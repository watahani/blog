<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>enjoy struggling</title>
  
  <subtitle>技術メモとか料理ネタとか</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.haniyama.com/"/>
  <updated>2024-02-18T07:06:48.703Z</updated>
  <id>http://blog.haniyama.com/</id>
  
  <author>
    <name>watahani</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker コンテナーへのアクセスを fail2ban で制限する (ufw 環境)</title>
    <link href="http://blog.haniyama.com/2024/02/18/docker-ufw-fail2ban/"/>
    <id>http://blog.haniyama.com/2024/02/18/docker-ufw-fail2ban/</id>
    <published>2024-02-18T03:00:00.000Z</published>
    <updated>2024-02-18T07:06:48.703Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 22.04 を使っているサーバーでは、基本的に Firewall として ufw を使っていると思う。しかしながら、Docker コンテナーへのアクセスは Docker が自動的に iptables のチェーンを作成し、ufw を迂回するため、ufw での制限が効かない。知らずにめちゃくちゃハマった。</p><p><a href="https://github.com/linuxserver/docker-fail2ban">GitHub - linuxserver/docker-fail2ban</a> を利用することで Docker が自動で作成する DOKCER-USER チェーンを考慮した iptables の構成を追加してくれるよう (iptables 直接編集だと FOWARD もまとめてブロックしてくれるのか？理解できていない。) だが、<a href="https://github.com/linuxserver/fail2ban-confs">設定ファイル</a> のどの辺が効いているのか解読するのがキツかった。</p><h2 id="最終的な構成"><a href="#最終的な構成" class="headerlink" title="最終的な構成"></a>最終的な構成</h2><p>fail2ban は元々ホストマシンで動かすつもりだったので、以下のサイトを参考に <code>/etc/ufw/after.rules</code> を追加して ufw route で通信を制御できるようにした。正直こちらの設定も正直正確な理解が出来ていない。</p><ul><li>参考: <a href="https://matsudamper.hatenablog.com/entry/2023/03/22/081825">Dockerとufwでポートのアクセス制御をする方法 - アプリ開発備忘録</a></li><li>参考: <a href="https://github.com/chaifeng/ufw-docker">chaifeng/ufw-docker: To fix the Docker and UFW security flaw without disabling iptables</a></li></ul><h3 id="etc-ufw-after-rules-に追記"><a href="#etc-ufw-after-rules-に追記" class="headerlink" title="/etc/ufw/after.rules に追記"></a><code>/etc/ufw/after.rules</code> に追記</h3><p><a href="https://github.com/chaifeng/ufw-docker">chaifeng/ufw-docker: To fix the Docker and UFW security flaw without disabling iptables</a> そのままコピペで追加</p><pre><code># BEGIN UFW AND DOCKER*filter:ufw-user-forward - [0:0]:ufw-docker-logging-deny - [0:0]:DOCKER-USER - [0:0]-A DOCKER-USER -j ufw-user-forward-A DOCKER-USER -j RETURN -s 10.0.0.0/8-A DOCKER-USER -j RETURN -s 172.16.0.0/12-A DOCKER-USER -j RETURN -s 192.168.0.0/16-A DOCKER-USER -p udp -m udp --sport 53 --dport 1024:65535 -j RETURN-A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 192.168.0.0/16-A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 10.0.0.0/8-A DOCKER-USER -j ufw-docker-logging-deny -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d 172.16.0.0/12-A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 192.168.0.0/16-A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 10.0.0.0/8-A DOCKER-USER -j ufw-docker-logging-deny -p udp -m udp --dport 0:32767 -d 172.16.0.0/12-A DOCKER-USER -j RETURN-A ufw-docker-logging-deny -m limit --limit 3/min --limit-burst 10 -j LOG --log-prefix &quot;[UFW DOCKER BLOCK] &quot;-A ufw-docker-logging-deny -j DROPCOMMIT# END UFW AND DOCKER</code></pre><h3 id="ufw-の動作検証"><a href="#ufw-の動作検証" class="headerlink" title="ufw の動作検証"></a>ufw の動作検証</h3><p>以下コマンドで特定 IP から Docker コンテナーへのアクセスが制限できることを確認</p><pre class=" language-bash"><code class="language-bash">ufw route insert 1 deny from <span class="token operator">&lt;</span>ip<span class="token operator">></span> to anyufw reload</code></pre><p><code>ufw insert</code> ではなく、<code>ufw route insert</code> とすること</p><p>以下コマンドでルールを削除し、コンテナーへのアクセスが可能なことを確認</p><pre class=" language-bash"><code class="language-bash">ufw route delete deny from <span class="token operator">&lt;</span>ip<span class="token operator">></span> to anyufw reload</code></pre><h3 id="Docker-ログの構成"><a href="#Docker-ログの構成" class="headerlink" title="Docker ログの構成"></a>Docker ログの構成</h3><p>コンテナーのログは Azure Monitor に送信したかったけど、ざっと調べた限りでは syslog 以外を転送するのはめんどそうなので、Docker のログも syslog に全部送ることに。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx-proxy</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginxproxy/nginx<span class="token punctuation">-</span>proxy    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>proxy    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/tmp/docker.sock<span class="token punctuation">:</span>ro      <span class="token punctuation">-</span> ./certs<span class="token punctuation">:</span>/etc/nginx/certs<span class="token punctuation">:</span>rw      <span class="token punctuation">-</span> ./vhost.d<span class="token punctuation">:</span>/etc/nginx/vhost.d      <span class="token punctuation">-</span> ./html<span class="token punctuation">:</span>/usr/share/nginx/html      <span class="token punctuation">-</span> ./custom<span class="token punctuation">-</span>nginx.conf<span class="token punctuation">:</span>/etc/nginx/conf.d/custom<span class="token punctuation">-</span>nginx.conf<span class="token punctuation">:</span>ro    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">proxy-network</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.18.0.2    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> com.github.nginx<span class="token punctuation">-</span>proxy.nginx<span class="token punctuation">-</span>proxy.keepalive=auto    <span class="token key atrule">logging</span><span class="token punctuation">:</span>      <span class="token key atrule">driver</span><span class="token punctuation">:</span> syslog      <span class="token key atrule">options</span><span class="token punctuation">:</span>        <span class="token key atrule">tag</span><span class="token punctuation">:</span> <span class="token string">"nginx-proxy"</span></code></pre><p>ログがでることを確認</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tail</span> -f /var/log/syslog <span class="token operator">|</span> <span class="token function">grep</span> nginx-proxy</code></pre><h3 id="fail2ban-の設定"><a href="#fail2ban-の設定" class="headerlink" title="fail2ban の設定"></a>fail2ban の設定</h3><p><code>/etc/fail2ban/jail.d/nginx-proxy.local</code> に以下の設定を追加</p><pre class=" language-conf"><code class="language-conf">[nginx-proxy]enabled = trueport = http,httpsfilter = nginx-proxylogpath = /var/log/syslogmaxretry = 5bantime = 600findtime = 600</code></pre><p>フィルターは <code>/etc/fail2ban/filter.d/nginx-proxy.conf</code> に以下の設定を追加して 404 エラーを検知するようにした</p><pre class=" language-conf"><code class="language-conf">[Definition]failregex = ^.*nginx-proxy.*\.example\.com\s<HOST>\s-\s-\s.*HTTP/.*" 404</code></pre><p>フィルターがうまく動いているかは fail2ban-regex で確認する</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> fail2ban-regex /var/log/syslog /etc/fail2ban/filter.d/nginx-proxy.conf</code></pre><p>設定ファイルをコピーして .local ファイルを編集</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span>  <span class="token function">cp</span> /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</code></pre><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-#ignoreip = 127.0.0.1/8 ::1</span><span class="token inserted">+ ignoreip = 127.0.0.1/8 ::1 192.168.0.0/16 172.0.0.0/12</span><span class="token deleted">- banaction = iptables-multiport</span><span class="token inserted">+ banaction = ufw</span>enable = true</code></pre><p>(もともとの iptables-multiport だったら初期設定で動いてた説はある)</p><p>ufw で ufw route もブロックするよう、<code>/etc/fail2ban/action.d/ufw.conf</code> を修正</p><pre class=" language-diff"><code class="language-diff">actionban = [ -n "&lt;application>" ] &amp;&amp; app="app &lt;application>"            ufw insert &lt;insertpos> &lt;blocktype> from &lt;ip> to &lt;destination> $app &amp;&amp;<span class="token inserted">+            ufw route insert &lt;insertpos> &lt;blocktype> from &lt;ip> to &lt;destination> $app</span>actionunban = [ -n "&lt;application>" ] &amp;&amp; app="app &lt;application>"              ufw delete &lt;blocktype> from &lt;ip> to &lt;destination> $app&amp;&amp;<span class="token inserted">+              ufw route delete &lt;blocktype> from &lt;ip> to &lt;destination> $app</span></code></pre><p>設定を変更したら fail2ban を再起動</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart fail2ban</code></pre><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>実際に 404 を発生させるアクセスを試みてブロックされるか検証。ブロックされたら <code>fail2ban-client status</code> と <code>ufw status</code> で確認</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">sudo</span> fail2ban-client status nginx-proxyStatus <span class="token keyword">for</span> the jail: nginx-proxy<span class="token operator">|</span>- Filter<span class="token operator">|</span>  <span class="token operator">|</span>- Currently failed: 1<span class="token operator">|</span>  <span class="token operator">|</span>- Total failed:     20<span class="token operator">|</span>  <span class="token variable"><span class="token variable">`</span>- File list:        /var/log/syslog<span class="token variable">`</span></span>- Actions   <span class="token operator">|</span>- Currently banned: 1   <span class="token operator">|</span>- Total banned:     4   `- Banned IP list:   20.247.234.38<span class="token operator">></span> <span class="token function">sudo</span> ufw statusStatus: activeTo                         Action      From--                         ------      ----Anywhere                   DENY        20.247.234.38<span class="token punctuation">..</span>.</code></pre><p>ちゃんとブロックされた。<br>iptables -L で Docker 起動時に作られるルールを理解して、fail2ban の既定の iptables-multicast で問題ないのか確認したいけど、まあ動いているんで今回はこれで。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu 22.04 を使っているサーバーでは、基本的に Firewall として ufw を使っていると思う。しかしながら、Docker コンテナーへのアクセスは Docker が自動的に iptables のチェーンを作成し、ufw を迂回するため、ufw での制限
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://blog.haniyama.com/tags/Docker/"/>
    
      <category term="home-server" scheme="http://blog.haniyama.com/tags/home-server/"/>
    
  </entry>
  
  <entry>
    <title>久しぶりに自宅サーバーを立てて Nextcloud を動かす</title>
    <link href="http://blog.haniyama.com/2024/02/15/home-server-nextcloud/"/>
    <id>http://blog.haniyama.com/2024/02/15/home-server-nextcloud/</id>
    <published>2024-02-15T03:00:00.000Z</published>
    <updated>2024-02-18T06:11:33.498Z</updated>
    
    <content type="html"><![CDATA[<p>以前買ったミニ PC を自宅サーバーにしようとしていたのだが、まったく時間が無くて放置していた。育休中に少し時間が取れたので、とりあえず Ubuntu をインストールして Nextcloud を動かしてみた。docker を使って構成したが結構ハマったので、その辺のメモ。</p><span id="more"></span><h2 id="ネットワーク構成について"><a href="#ネットワーク構成について" class="headerlink" title="ネットワーク構成について"></a>ネットワーク構成について</h2><p>IIJMio ひかりを使っているので、普段は DS-Lite IPv4 over IPv6 での通信をしている。ネットワークは詳しくないが、DS-Lite では複数のユーザーが同一の IPv4 アドレスを共有することになるので、ポートフォワードができない。</p><p>当初は IPv4 での外部アクセスと DS-Lite の両立を目指したが実際に PPPoE 接続を試したところ、日中や夕方の混雑隊でも DS-Lite と遜色がないことが分かった。ということで、PPPoE で普通にルーターで NAT する。</p><p>ネットワークが遅いと感じたらその時に勉強します。一般のご家庭なので…。</p><p>速度測定は <a href="https://www.speedtest.net/ja/apps/cli">speedtest-cli</a> で行った。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> curlcurl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> speedtest</code></pre><p>cron で定期的に測定するようにしたのだが、sppedtest コマンドだけでは日付が出ないので、3日ぐらい無駄にした。あらかじめ適当にヘッダーを追加しておくこと。</p><pre class=" language-cron"><code class="language-cron">24  *   *   *   *   now=\"$(date +"\%Y-\%m-\%d \%H:\%M:\%S")\",; /usr/bin/speedtest -f csv -s 48463 | sed "s/^/$now/" >> /home/user/speedtest.csv</code></pre><p>jupyter notebook で pandas で読み込んでグラフ化。こういうのは Copilot Chat に聞けば勝手にやってくれるので嬉しい。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># Load the CSV file</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'speedtest.csv'</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'download Mbps'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'download'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">125000</span>data<span class="token punctuation">[</span><span class="token string">'upload Mbps'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">125000</span><span class="token comment" spellcheck="true"># Assuming 'time' is the column with time information</span>data<span class="token punctuation">[</span><span class="token string">'time jst'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'datetime utc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>tz_localize<span class="token punctuation">(</span><span class="token string">'UTC'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>tz_convert<span class="token punctuation">(</span><span class="token string">'Asia/Tokyo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Extract hour from time</span>data<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'time jst'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>hour<span class="token comment" spellcheck="true"># Set 'time jst' as the index of the DataFrame</span>data<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'time jst'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot 'download Mbps' and 'upload Mbps' over time</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'download Mbps'</span><span class="token punctuation">,</span> <span class="token string">'upload Mbps'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Show the plot</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Group by hour and calculate mean download speed</span>average_speed_by_hour <span class="token operator">=</span> data<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'hour'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'download Mbps'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot the average download speed by hour</span>average_speed_by_hour<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2024/02/15/home-server-nextcloud/timechart.png" alt=""></p><p>遅いときでも上下 500Mbps ぐらい出ているので、特に問題はなさそうだ。</p><h2 id="Ubuntu-22-04-のセットアップでインストールされる-Docker-が古い"><a href="#Ubuntu-22-04-のセットアップでインストールされる-Docker-が古い" class="headerlink" title="Ubuntu 22.04 のセットアップでインストールされる Docker が古い"></a>Ubuntu 22.04 のセットアップでインストールされる Docker が古い</h2><p>Ubuntu 22.04 の初期セットアップ中に色々とパッケージのインストールができるのだが、パッケージマネージャーに snap が採用されている。snap で Docker をインストールすると、最新バージョンではない古いバージョンがインストールされてしまう。</p><p>あまり問題になることはないと思うが、私の環境では以下のバグを踏んでしまい docker compose exec が使えなくなってしまった。</p><p><a href="https://github.com/docker/compose/issues/11154">[BUG] docker-compose http: invalid Host header · Issue #11154 · docker/compose</a></p><p><code>sudo snap refresh docker --channel=latest/edge</code> でバージョンを更新できるらしいが、その情報を見つける前に snap の docker をアンインストールして、公式のインストール手順を参考にインストールし直してしまった。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> aa-remove-unknownsnap list <span class="token function">sudo</span> snap remove docker<span class="token comment" spellcheck="true"># 再起動後 Docker 公式のインストール手順を実施</span></code></pre><h2 id="Nextcloud-を-Docker-で動かす"><a href="#Nextcloud-を-Docker-で動かす" class="headerlink" title="Nextcloud を Docker で動かす"></a>Nextcloud を Docker で動かす</h2><p>ググれば色々記事があるが、<a href="https://github.com/nextcloud/all-in-one">Nextcloud All-in-One</a> (Nextcloud AIO) を利用するか snap でホストに直接インストールするのが一番楽そうだった。特に AIO 版は機能モリモリで便利なのだが、AIO 自体が docker コンテナを複数立ち上げるようなオーケストレーションツールのような感じで、重厚過ぎるので今回はパス。<br>そもそも、フロントに nginx-proxy を置いて検証アプリを色々動かしたかったため、自分で docker-compose.yml を書くことにした。</p><h3 id="ngix-proxy"><a href="#ngix-proxy" class="headerlink" title="ngix-proxy"></a>ngix-proxy</h3><p><a href="https://github.com/nginx-proxy/nginx-proxy">nginx-proxy</a> は docker.sock をマウントして、起動中のコンテナを監視して自動でリバースプロキシの設定を行ってくれる。nginxproxy/acme-companion は nginx-proxy が設定したリバースプロキシの設定を元に Let’s Encrypt の証明書を自動で取得してくれる<br>あらかじめ <code>docker network create proxy-network --subnet 172.18.0.0/16</code> でネットワークを作成しておく。サブネットは Nextcloud の Trusted Proxy のために定義する。</p><pre class=" language-yml"><code class="language-yml">version: '3'services:  nginx-proxy:    image: nginxproxy/nginx-proxy    container_name: nginx-proxy    ports:      - "80:80"      - "443:443"    volumes:      - /var/run/docker.sock:/tmp/docker.sock:ro      - ./certs:/etc/nginx/certs:rw      - ./vhost.d:/etc/nginx/vhost.d      - ./html:/usr/share/nginx/html      - ./custom-nginx.conf:/etc/nginx/conf.d/custom-nginx.conf:ro    networks:      proxy-network:        ipv4_address: 172.18.0.2    labels:      - com.github.nginx-proxy.nginx-proxy.keepalive=auto  letsencrypt:    image: nginxproxy/acme-companion    container_name: nginx-acme        depends_on:      - nginx-proxy    environment:      - DEFAULT_EMAIL=$&#123;MAILADDRESS&#125;      - NGINX_PROXY_CONTAINER=nginx-proxy    volumes:      - /var/run/docker.sock:/var/run/docker.sock:ro      - ./certs:/etc/nginx/certs:rw      - ./vhost.d:/etc/nginx/vhost.d      - ./html:/usr/share/nginx/html    networks:      - proxy-network  ddclient:    image: lscr.io/linuxserver/ddclient:latest    container_name: ddclient    environment:      - PUID=1000      - PGID=1000      - TZ=Etc/UTC    volumes:      - ./ddclient_conf:/config    restart: unless-stoppednetworks:  proxy-network:    external: true    driver: bridge    ipam:      config:        - subnet: 172.18.0.0/16</code></pre><p>ウチの IP は動的アドレスなので、ddclient で DNS を更新する。CloudFlare の場合はこんな感じ。CloudFlare の API トークンは DNS Read, Write の権限で十分だった。<br>なお、あらかじめ DNS レコードがないと動作しないので、手動で作成しておくこと。</p><pre class=" language-conf"><code class="language-conf"># Even though we use -foreground, daemon= is still needed.# It's value here is ignored, but it's needed. The value used is set in# ddclient.in in the dockerfile.daemon=0verbose=nossl=yesuse=web, web=he   # checkip.dns.he.netprotocol=cloudflarelogin=tokenpassword='yourtoken'zone=example.comdns1.example.com, dns2.example.com</code></pre><p><code>/etc/nginx/vhost.d</code> にホスト名のファイルを置くことで、各ホストごとに追加設定ができる。例えば example.com 向けの設定を追加したければ <code>/etc/nginx/vhost.d/example.com</code> のファイルを追加する。Nextcloud のホスト名でタイムアウトや Body 上限の変更などをしておく。</p><pre class=" language-ini"><code class="language-ini">send_timeout 300;keepalive_timeout 300;proxy_read_timeout 300;proxy_connect_timeout 300;proxy_send_timeout 300;client_max_body_size 1G;</code></pre><h3 id="Nextcloud-本体"><a href="#Nextcloud-本体" class="headerlink" title="Nextcloud 本体"></a>Nextcloud 本体</h3><p>ngix-proxy を使っていて nginx 側はいじりたくなかったので、apache 版を <a href="https://github.com/nextcloud/docker/blob/master/.examples/docker-compose/insecure/mariadb/apache/docker-compose.yml">公式のサンプル</a> をもとに作成した。<br>nginx-proxy の vhost.d/ に頑張って設定ファイルを書けば nextcloud:fpm 版を良い感じに使えそうだったけど、php にも nginx の設定も詳しくないので、とりあえず apache 版で。</p><p>出来上がったのがこれ。</p><pre class=" language-yml"><code class="language-yml">version: '3'services:  nextcloud:    build: ./customimages/nextcloud    container_name: nextcloud    volumes:      - nextcloud_data:/var/www/html      # - ./config:/var/www/html/config # for debug      - ./log/:/var/log/nextcloud/      - ./skeleton/:/var/skeleton/      - /mnt/hdd01/:/mnt/hdd01/    env_file:      - ./.env      - ./env/db.env      - ./env/nextcloud.env    secrets:      - nextcloud_admin_password      - nextcloud_admin_user      - mysql_password      - mysql_user      - mysql_database      - smtp_password    networks:      - proxy-network      - nextcloud-network    depends_on:      - db      - redis      - elasticsearch  nextcloud-cron:    build: ./customimages/nextcloud    container_name: nextcloud-cron    restart: unless-stopped    env_file:      - ./.env      - ./env/db.env      - ./env/nextcloud.env    volumes:      - nextcloud_data:/var/www/html      # - ./config:/var/www/html/config # for debug      - ./log/:/var/log/nextcloud/      - ./skeleton/:/var/skeleton/      - /mnt/hdd01/:/mnt/hdd01/      # if customize cron file      # https://help.nextcloud.com/t/docker-setup-cron/78547/5      # https://github.com/nextcloud/docker/blob/ccdf46609ff8419ffd7c5ce4e51a117e378b72b6/Dockerfile-debian.template#L15      # - ./mycronfile:/var/spool/cron/crontabs/www-data    secrets:      - nextcloud_admin_password      - nextcloud_admin_user      - mysql_password      - mysql_user      - mysql_database      - smtp_password    networks:      - nextcloud-network    entrypoint: /cron.sh    depends_on:      - nextcloud  db:    image: mariadb    container_name: nextcloud-db    volumes:      - db_data:/var/lib/mysql    env_file:      - ./.env      - ./env/db.env    secrets:      - mysql_database      - mysql_password      - mysql_user      - mysql_root_password    networks:      - nextcloud-network  redis:    image: redis:6    container_name: nextcloud_redis    restart: always    command: ["--databases", "1"]    healthcheck:      test: ["CMD", "redis-cli", "ping"]      interval: 10s      timeout: 5s      retries: 5    volumes:      - redis_data:/data    networks:      - nextcloud-network  elasticsearch:    build: ./customimages/elasticsearch    container_name: elasticsearch    restart: always    environment:      - discovery.type=single-node      - bootstrap.memory_lock=true      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"      - xpack.security.enabled=false    volumes:      - elasticsearch_data:/usr/share/elasticsearch/data    networks:      - nextcloud-networksecrets:  nextcloud_admin_password:    file: ./secrets/nextcloud_admin_password  nextcloud_admin_user:    file: ./secrets/nextcloud_admin_user  mysql_password:    file: ./secrets/mysql_password  mysql_user:    file: ./secrets/mysql_user  mysql_database:    file: ./secrets/mysql_database  mysql_root_password:    file: ./secrets/mysql_root_password  smtp_password:    file: ./secrets/smtp_passwordvolumes:  nextcloud_data:  db_data:  redis_data:  elasticsearch_data:networks:  proxy-network:    external: true    driver: bridge    ipam:      config:        - subnet: 172.18.0.0/16  nextcloud-network:    driver: bridge</code></pre><h3 id="ポイントメモ"><a href="#ポイントメモ" class="headerlink" title="ポイントメモ"></a>ポイントメモ</h3><p>Nextcloud 本体は nginx-proxy と同一のネットワークにおいて、それ以外のコンテナ nextcloud-network を作成してそこに配置した。</p><h4 id="環境変数"><a href="#環境変数" class="headerlink" title="環境変数"></a>環境変数</h4><p>.env ファイルなどの中身はこんな感じ。</p><pre class=" language-ini"><code class="language-ini">#for nginx-proxy<span class="token constant">VIRTUAL_HOST</span><span class="token attr-value"><span class="token punctuation">=</span>$&amp;#123;YOUR_DOMAIN&amp;#125;</span><span class="token constant">LETSENCRYPT_HOST</span><span class="token attr-value"><span class="token punctuation">=</span>$&amp;#123;YOUR_DOMAIN&amp;#125;</span><span class="token constant">LETSENCRYPT_EMAIL</span><span class="token attr-value"><span class="token punctuation">=</span>$&amp;#123;MAIL_ADDRESS&amp;#125;</span># trust nginx proxy<span class="token constant">TRUSTED_PROXIES</span><span class="token attr-value"><span class="token punctuation">=</span>172.18.0.2/32</span><span class="token constant">OVERWRITEHOST</span><span class="token attr-value"><span class="token punctuation">=</span>$&amp;#123;YOUR_DOMAIN&amp;#125;</span><span class="token constant">OVERWRITEPROTOCOL</span><span class="token attr-value"><span class="token punctuation">=</span>https</span>#admin password<span class="token constant">NEXTCLOUD_ADMIN_PASSWORD_FILE</span><span class="token attr-value"><span class="token punctuation">=</span>/run/secrets/nextcloud_admin_password</span><span class="token constant">NEXTCLOUD_ADMIN_USER_FILE</span><span class="token attr-value"><span class="token punctuation">=</span>/run/secrets/nextcloud_admin_user</span><span class="token constant">NEXTCLOUD_TRUSTED_DOMAINS</span><span class="token attr-value"><span class="token punctuation">=</span>$&amp;#123;YOUR_DOMAIN&amp;#125;</span># redis settings<span class="token constant">REDIS_HOST</span><span class="token attr-value"><span class="token punctuation">=</span>nextcloud_redis</span># smtp settings<span class="token constant">SMTP_HOST</span><span class="token attr-value"><span class="token punctuation">=</span>smtp.sendgrid.net</span><span class="token constant">SMTP_NAME</span><span class="token attr-value"><span class="token punctuation">=</span>apikey</span><span class="token constant">SMTP_PASSWORD_FILE</span><span class="token attr-value"><span class="token punctuation">=</span>/run/secrets/smtp_password</span><span class="token constant">MAIL_FROM_ADDRESS</span><span class="token attr-value"><span class="token punctuation">=</span>noreply</span><span class="token constant">SMTP_SECURE</span><span class="token attr-value"><span class="token punctuation">=</span>tls</span><span class="token constant">SMTP_AUTHTYPE</span><span class="token attr-value"><span class="token punctuation">=</span>LOGIN</span><span class="token constant">MAIL_DOMAIN</span><span class="token attr-value"><span class="token punctuation">=</span>$&amp;#123;MAIL_DOMAIN&amp;#125;</span># other settings<span class="token constant">PHP_UPLOAD_LIMIT</span><span class="token attr-value"><span class="token punctuation">=</span>10G</span><span class="token constant">NC_default_phone_region</span><span class="token attr-value"><span class="token punctuation">=</span>JP</span><span class="token constant">NC_logtype</span><span class="token attr-value"><span class="token punctuation">=</span>file</span><span class="token constant">NC_logfile</span><span class="token attr-value"><span class="token punctuation">=</span>/var/log/nextcloud/nextcloud.log</span><span class="token constant">NC_loglevel</span><span class="token attr-value"><span class="token punctuation">=</span>0</span><span class="token constant">NC_default_language</span><span class="token attr-value"><span class="token punctuation">=</span>ja</span><span class="token constant">NC_default_locale</span><span class="token attr-value"><span class="token punctuation">=</span>ja_JP</span><span class="token constant">NC_default_timezone</span><span class="token attr-value"><span class="token punctuation">=</span>Asia/Tokyo</span><span class="token constant">NC_skeletondirectory</span><span class="token attr-value"><span class="token punctuation">=</span>/var/skeleton/</span><span class="token constant">NC_maintenance_window_start</span><span class="token attr-value"><span class="token punctuation">=</span>16</span></code></pre><p>NC_ プレフィックスがつく環境変数は config.php の設定を上書きする。環境変数含め config.php に直接書き込むのではなく、値を無視して環境変数が上書きされるので注意。なので設定が間違っていた場合、コンテナ内の confing.php を直接書き換えても反映されない。これにハマって 2, 3 時間無駄にした。上記設定をすれば最低限管理画面で警告が出なくなるはず。</p><p>ちなみに、Nextcloud の環境変数は変数名の末尾に _FILE とつけることで、docker の secrets で管理できる。Nextcloud や拡張機能のの脆弱性などで環境変数が漏れた時に備えて、パスワード系は secrets で管理することにした。</p><h4 id="SendGrid"><a href="#SendGrid" class="headerlink" title="SendGrid"></a>SendGrid</h4><p>メールの配信は SendGrid を使っている。SMTP_NAME は apikey, SMTP_PASSWORD には SendGrid の API キーを設定する。</p><ul><li>参考: <a href="https://docs.sendgrid.com/ja/for-developers/sending-email/getting-started-smtp">SMTPメールの送信方法 | Twilio</a></li></ul><h4 id="skelton-ディレクトリ"><a href="#skelton-ディレクトリ" class="headerlink" title="skelton ディレクトリ"></a>skelton ディレクトリ</h4><p>新規作成したユーザーに対してデフォルトで配置されるファイルを指定できる。既定だとサンプルの画像などが入っているので NC_skeletondirectory=/var/skeleton/ で指定して、docker-compose.yml でマウントしておく。使い方の PDF でもつくってツッコんでおく</p><h4 id="ログ"><a href="#ログ" class="headerlink" title="ログ"></a>ログ</h4><p>apache 版の docker イメージは apache のログしか stdout に出力しないので docker compose logs などで Nextcloud 側のログが確認できない。またファイル出力されていなければ、Web の管理コンソールでログが見えなくて不便なのでファイルに出力するよう修正。出力先の /var/log/nextcloud/ フォルダーはカスタムイメージ内で作成して www-data にオーナーを変更しておく。 安定稼働までは NC_loglevel でログレベルを 0 (DEBUG) にしてある。しばらくしたら 3 (ERROR) に戻す。</p><h4 id="バックアップ"><a href="#バックアップ" class="headerlink" title="バックアップ"></a>バックアップ</h4><p>バックアップは雑に docker volume を tar で固めて、外部ストレージ &amp; Azure Blob に保存している。リストアは出来ることを確認したけど、雑は雑。</p><pre class=" language-sh"><code class="language-sh"># maintenance mode on# https://doc.owncloud.com/server/next/admin_manual/maintenance/enable_maintenance.htmlcd /home/watahani/docker_apps/nextclouddocker compose exec -u www-data nextcloud php occ maintenance:mode --ondate=`date '+%Y-%m-%d'`VOLUMES=("nextcloud_db_data" "nextcloud_nextcloud_data" "nextcloud_redis_data" "elasticsearch_data")for VOLUME_NAME in $&#123;VOLUMES[@]&#125;; do    echo back up $VOLUME_NAME start    BACKUP_DESTINATION=/mnt/exthdd/owncloud_backup/$VOLUME_NAME.tar.gz    sudo tar -czf "$BACKUP_DESTINATION" -C "/var/lib/docker/volumes/$VOLUME_NAME" _data    echo upload $VOLUME_NAME start    azcopy copy $BACKUP_DESTINATION "https://example.blob.core.windows.net/backup/$VOLUME_NAME-$date.tar.gz"    echo back up $VOLUME_NAME finish!donedocker compose exec -u www-data nextcloud php occ maintenance:mode --off</code></pre><p>azcopy login が廃止予定になるらしく、サービス プリンシパルでの認証の場合、あらかじめ環境変数に AZCOPY_SPA_APPLICATION_ID, AZCOPY_SPA_CLIENT_SECRET, AZCOPY_TENANT_ID, AZCOPY_AUTO_LOGIN_TYPE=SPN を設定しておくこと。</p><pre class=" language-sh"><code class="language-sh">INFO: 'azcopy login' command will be deprecated starting release 10.22. Use auto-login instead. Visit https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-authorize-azure-active-directory#authorize-without-a-secret-store  to know more.</code></pre><p>インタラクティブな認証は azure-cli でログインしておいてその認証情報を使いまわす実装に移行していくようだ。</p><ul><li>参考: <a href="https://zenn.dev/ciffelia/articles/docker-volume-backup-restore">パーミッションを保持したままDockerのボリュームをバックアップ・復元する</a></li></ul><p>最悪アップロードした写真データが無事なら良いのでまあこれでヨシ。</p><h4 id="カスタムアプリ"><a href="#カスタムアプリ" class="headerlink" title="カスタムアプリ"></a>カスタムアプリ</h4><p>この辺を入れた</p><ul><li>memories</li><li>fulltextsearch</li><li>fulltextsearch_elasticsearch</li><li>previewgenerator</li></ul><p>コマンドで入れるなら <code>docker compose exec -u www-data nextcloud php occ app:install memories</code> のようにする。</p><p>構築していた当時、<a href="https://apps.nextcloud.com/">https://apps.nextcloud.com/</a> が異常に重く、アプリのインストールがタイムアウトで出来なかった。</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"reqId"</span><span class="token operator">:</span><span class="token string">"CIl2uB04J5qvKBuCFJOe"</span><span class="token punctuation">,</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"time"</span><span class="token operator">:</span><span class="token string">"2024-02-03T13:31:32+00:00"</span><span class="token punctuation">,</span><span class="token property">"remoteAddr"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token string">"--"</span><span class="token punctuation">,</span><span class="token property">"app"</span><span class="token operator">:</span><span class="token string">"appstoreFetcher"</span><span class="token punctuation">,</span><span class="token property">"method"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"--"</span><span class="token punctuation">,</span><span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"Could not connect to appstore: cURL error 28: Operation timed out after 60000 milliseconds with 2514944 out of 6055936 bytes received (see https://curl.haxx.se/libcurl/c/libcurl-errors.html) for https://apps.nextcloud.com/api/v1/apps.json"</span><span class="token punctuation">,</span><span class="token property">"userAgent"</span><span class="token operator">:</span><span class="token string">"--"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"28.0.2.5"</span><span class="token punctuation">,</span><span class="token property">"data"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"app"</span><span class="token operator">:</span><span class="token string">"appstoreFetcher"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>幸い何度か試せば通信で切るときがあったので、一時的にオリジナルの json ファイルを Blob において対処した。具体的には <a href="https://apps.nextcloud.com/api/v1/apps.json">https://apps.nextcloud.com/api/v1/apps.json</a> と <a href="https://apps.nextcloud.com/api/v1/categories.json">https://apps.nextcloud.com/api/v1/categories.json</a> をダウンロードして、適当なサイト、同じパスで公開する。</p><p>その後、config.php の appstoreurl に、https://&lt;適当なサイト&gt;/api/v1 を設定する。</p><pre class=" language-sh"><code class="language-sh">docker compose exec -u www-data nextcloud php occ --no-warnings config:system:set appstoreurl --value="https://<適当なサイト>/api/v1"</code></pre><p>元のサイトが復旧したら元に戻す</p><pre class=" language-sh"><code class="language-sh">docker compose exec -u www-data nextcloud php occ --no-warnings config:system:delete appstoreurl</code></pre><h4 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h4><p>Elastic Search は日本語検索のために kuromoji_tokenizer を使うように設定しておく。そのために Dockerfile についてもカスタマイズしている。</p><pre class=" language-dockerfile"><code class="language-dockerfile"># Probably from here https://github.com/elastic/elasticsearch/blob/main/distribution/docker/src/docker/DockerfileFROM elasticsearch:8.12.0USER root# hadolint ignore=DL3008RUN set -ex; \    \    export DEBIAN_FRONTEND=noninteractive; \    apt-get update; \    apt-get install -y --no-install-recommends \        tzdata \    ; \    rm -rf /var/lib/apt/lists/*; \    elasticsearch-plugin install --batch ingest-attachment;\    elasticsearch-plugin install --batch analysis-kuromoji;\    elasticsearch-plugin install --batch analysis-icuUSER 1000:0HEALTHCHECK CMD nc -z localhost 9200 || exit 1LABEL com.centurylinklabs.watchtower.enable="false"</code></pre><p>fulltextsearch を入れたら、Web の管理コンソールから <a href="http://elasticsearch:9200">http://elasticsearch:9200</a> と、トークナイザーに kuromoji_tokenizer を指定する。<br>その後、以下のコマンドでインデックスの初期作成をしておく</p><pre class=" language-sh"><code class="language-sh">docker compose exec -u www-data nextcloud php occ fulltextsearch:resetdocker compose exec -u www-data nextcloud php occ fulltextsearch:index</code></pre><p>インデックスの定期作成については、<a href="https://rohhie.net/ubuntu22-04-implementing-nextcloud-with-docker/">Ubuntu22.04 DockerでNextcloud | ろっひー</a> を参考に /var/www/html/occ fulltextsearch:live –service コマンドを起動スクリプトから呼びだすよう Dockerfile をカスタマイズした。<br>ファイルが多く処理に時間がかかったり、バッチ処理をしたいのであれば後述の cron に fulltextsearch:index をジョブとして追加すれば良いだろう。</p><h4 id="memories-と-previewgenerator"><a href="#memories-と-previewgenerator" class="headerlink" title="memories と previewgenerator"></a>memories と previewgenerator</h4><p>memories を入れることにより Google Photo のように日付ごとに写真を表示したり、人物や場所ごとに写真を表示したりできるようになる。画像認識は別途プラグインが必要なので、今回は試していない。<br>また、memories のプレビュー生成には ffmpeg が必要なので、Dockerfile に ffmpeg を追加した。</p><p>memories のドキュメントによると Nextcloud 既定では 2048px のプレビュー画像を生成するらしいので、少し小さく。</p><pre class=" language-sh"><code class="language-sh">docker compose exec -u www-data nextcloud php occ config:system:set preview_max_x --value="1024"docker compose exec -u www-data nextcloud php occ config:system:set preview_max_y --value="1024"</code></pre><p>previewgenerator も初期作成をしておく</p><pre class=" language-sh"><code class="language-sh">docker compose exec -it -u www-data nextcloud php occ config:app:set --value="64 256 1024" previewgenerator squareSizesdocker compose exec -it -u www-data nextcloud php occ config:app:set --value="64 256 1024" previewgenerator widthSizesdocker compose exec -it -u www-data nextcloud php occ config:app:set --value="64 256 1024" previewgenerator heightSizes</code></pre><p>出来たら初回のプレビュー生成を行う</p><pre class=" language-sh"><code class="language-sh">nohup docker compose exec -u www-data nextcloud php occ preview:generate-all&</code></pre><p>終わったら以下コマンドを nextcloud-cron に追加して定期的に差分生成するよう構成する。</p><pre class=" language-sh"><code class="language-sh">php /var/www/nextcloud/occ preview:pre-generate</code></pre><h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><p>Nextcloud の cron ジョブは、nextcloud-cron として別コンテナで起動している。</p><p>参考: <a href="https://help.nextcloud.com/t/docker-setup-cron/78547/5">Docker setup &amp; cron - Reiner_Nippes の #5 - 📦 Appliances (Docker, Snappy, VM, NCP, AIO) - Nextcloud community</a></p><p>既定では <a href="https://github.com/nextcloud/docker/blob/ccdf46609ff8419ffd7c5ce4e51a117e378b72b6/Dockerfile-debian.template#L15">php -f /var/www/html/cron.php</a> が 5 分ごとに実行される。上書きしたければ <code>/var/spool/cron/crontabs/www-data</code> をマウントするなどしてカスタマイズする。</p><p>memories や previewgenerator を適当に定期実行するように設定する。この時 cron ファイルの所有者が root でなければ失敗するので注意。</p><ul><li>参考: <a href="https://keep-memory.com/docker-busybox-crond">dockerでBusyBox crondが動かない – numa blog</a></li></ul><pre class=" language-sh"><code class="language-sh">docker compose cp nextcloud-cron:/var/spool/cron/crontabs/www-data ./mycronfileecho '30 18 * * * php /var/www/html/occ preview:pre-generate' >> ./mycronfileecho '5 * * * * php /var/www/html/occ memories:index' >> ./mycronfilesudo chown root:root ./mycronfile</code></pre><p>コンテナにマウント</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">nextcloud-cron</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./customimages/nextcloud    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nextcloud<span class="token punctuation">-</span>cron    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./.env      <span class="token punctuation">-</span> ./env/db.env      <span class="token punctuation">-</span> ./env/nextcloud.env    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> nextcloud_data<span class="token punctuation">:</span>/var/www/html      <span class="token comment" spellcheck="true"># - ./config:/var/www/html/config # for debug</span>      <span class="token punctuation">-</span> ./log/<span class="token punctuation">:</span>/var/log/nextcloud/      <span class="token punctuation">-</span> ./skeleton/<span class="token punctuation">:</span>/var/skeleton/      <span class="token punctuation">-</span> /mnt/hdd01/<span class="token punctuation">:</span>/mnt/hdd01/      <span class="token comment" spellcheck="true"># if customize cron file</span>      <span class="token comment" spellcheck="true"># https://help.nextcloud.com/t/docker-setup-cron/78547/5</span>      <span class="token comment" spellcheck="true"># https://github.com/nextcloud/docker/blob/ccdf46609ff8419ffd7c5ce4e51a117e378b72b6/Dockerfile-debian.template#L15</span>      <span class="token punctuation">-</span> ./mycronfile<span class="token punctuation">:</span>/var/spool/cron/crontabs/www<span class="token punctuation">-</span>data</code></pre><h4 id="Google-Taskout-からの移行"><a href="#Google-Taskout-からの移行" class="headerlink" title="Google Taskout からの移行"></a>Google Taskout からの移行</h4><p>今回は Google Photo からの移行なので、<a href="https://takeout.google.com/settings/takeout">Google Takeout</a> からファイルをエクスポートして、Nextcloud に取り込む。保存したパスを外部ストレージとしてマウントしても良いのだが、今後アップロードするスマホのカメラ画像と同様の扱いにしたかったので、Nextcloud に直接取り込む。</p><p>memories がメタデータを読み込んでくれるらしいので、ファイルを Nextcloud に転送後に以下を実行する。</p><pre class=" language-sh"><code class="language-sh"># ファイルを直接 docker volume に転送sudo mv ./Takeout /var/lib/docker/volumes/&#123;volume_name&#125;/_data/data/&#123;username&#125;/# インデックスを作成docker compose exec -u www-data nextcloud php occ files:scan --path="&#123;username&#125;/files/Takeout"# Google Takeout のメタデータを読み込むdocker compose exec -u www-data nextcloud sh -c 'yes | php occ memories:migrate-google-takeout'</code></pre><p>が、手元の環境ではうまく動かないファイルがあったので、<a href="https://github.com/TheLastGimbus/GooglePhotosTakeoutHelper">TheLastGimbus/GooglePhotosTakeoutHelper: Script that organizes the Google Takeout archive into one big chronological folder</a> を使ってメタデータを書き込んだ。</p><p>guess-from-name オプションはファイル名などから日付を推測してくれるらしい。実際に memories で取り込めなかったデータなどが、フォルダ名の日付を元に取り込まれたので助かった。アルバムは既定では元ファイルは日付フォルダに入れてアルバム用にシンボリックリンクを張る設定らしいので、nothing にしておく。</p><pre class=" language-sh"><code class="language-sh">wget https://github.com/TheLastGimbus/GooglePhotosTakeoutHelper/releases/download/v3.4.3/gpth-linuxchmod +x gpth-linux./gpth-linux -i ./Takeout/ -o ./output --divide-to-dates --guess-from-name --albums nothing</code></pre><p>メタデータの変換後、念のためバックアップ後にフォルダーを直接 Docker Volume の中に移動。</p><pre class=" language-sh"><code class="language-sh">sudo mv ./output/ALL_PHOTOS  /var/lib/docker/volumes/&#123;volume_name&#125;/_data/data/&#123;username&#125;/docker compose exec nextcloud chown -R www-data:www-data /var/lib/docker/volumes/&#123;volume_name&#125;/_data/data/&#123;username&#125;/Takeout</code></pre><p>インデックス作る</p><pre class=" language-sh"><code class="language-sh">docker compose exec -u www-data nextcloud php occ files:scan --path="&#123;username&#125;/files/Takeout"</code></pre><p>雑だけど動いたのでヨシッ！そもそもメタデータがうまく取り込めない古いファイルは、家の HDD にオリジナルがあるのでどこかのタイミングでそれに差し替えよう。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Docker で Nextcloud を動かすメモ。フォーラムも公式ドキュメントもかなり充実しているものの、docker で動かすにはそれなりに苦労した。バージョンアップや監視についてはまだ出来ていないので、単に Nextcloud だけが目的であれば snap で入れるのが一番楽だろう。</p><p>最後に認証の話をしておくと Nextcloud 自体は Passkey に対応しているようで、個人設定から Android デバイスや Windows Hello を追加できた。<br>ただモバイル アプリではログイン時に Chrome などが起動するのではなく、hwsecurity.dev という会社が提供している SDK が組み込まれた独自ブラウザーが起動して、Security Key しか使えない UX になっていた。そのため 2FA を有効にしたうえでモバイルアプリを利用する場合、PC でアプリパスワードを発行するか、セキュリティ キーや OTP など別の認証要素を登録しておく必要があるので注意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前買ったミニ PC を自宅サーバーにしようとしていたのだが、まったく時間が無くて放置していた。育休中に少し時間が取れたので、とりあえず Ubuntu をインストールして Nextcloud を動かしてみた。docker を使って構成したが結構ハマったので、その辺のメモ。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://blog.haniyama.com/tags/Docker/"/>
    
      <category term="home-server" scheme="http://blog.haniyama.com/tags/home-server/"/>
    
  </entry>
  
  <entry>
    <title>App Service Authentication (aka EasyAuth) を安全に使うための Tips</title>
    <link href="http://blog.haniyama.com/2023/08/01/tips-for-using-appservice-authentication-securely/"/>
    <id>http://blog.haniyama.com/2023/08/01/tips-for-using-appservice-authentication-securely/</id>
    <published>2023-07-31T16:00:00.000Z</published>
    <updated>2023-08-01T00:01:21.713Z</updated>
    
    <content type="html"><![CDATA[<p>Azure の App Service や Functions などの Web サービスには、Azure AD と連携して認証を行う機能があります。App Service 認証と呼ばれる機能で、旧称？の EasyAuth の方が馴染みがあるかもしれない。<br>最短ではほぼワンクリックでアプリに認証機能を追加できるため、とても便利だ。しかし、既定の設定ではテナントのすべてのユーザーおよびアプリがアクセス可能になっているため、要件によってはセキュリティ上の懸念がある。</p><p>ということで EasyAuth の機能が Azure AD から見てどのような機能なのか、どのようなセキュリティ上の懸念があるのか、どのように対策するのかをまとめてみた。</p><span id="more"></span><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>既定ではテナントすべてのユーザーやアプリがアクセスできてしまうので、以下のいずれかの設定を実施することをお勧めする</p><ul><li>App Service 認証用に作成されたアプリの “ユーザーの割り当てを有効化” してアクセス可能なユーザーを制限する</li><li>App Service 認証の組み込み認可ポリシーを使ってアクセス可能なユーザーを制限する</li><li>App Service にデプロイしたアプリ側でトークンのクレームをチェックするビジネス ロジックを追加する</li></ul><h2 id="App-Service-認証とは"><a href="#App-Service-認証とは" class="headerlink" title="App Service 認証とは"></a>App Service 認証とは</h2><p>EasyAuth の基本についてはここでは記載しないが、ざっくり以下の機能を持っている</p><ol><li>OIDC/OAuth のクライアントとしての機能 (OP へのリダイレクトや、認可コードの取得と引き換え、トークンストアなど)</li><li>OIDC/OAuth の RP としての機能 (アクセス トークンの検証、<strong>簡易的な</strong>認可ポリシーの作成)</li></ol><p>ほとんどの場合は 1 のクライアントとしての機能を利用するために有効化すると思うが、API としての機能を利用する場合は 2 の RP としての機能も利用することになる。<br>つまり、別のクライアントで取得したアクセス トークンを EasyAuth で保護された App Service に送信し、EasyAuth が検証してアクセスを許可するということができる。</p><p>ここで注意が必要なのは EasyAuth は既定では aud の検証と iss および署名検証しか行わないことだ。そして Azure AD では API 側で制限されていない限り、基本的にアプリは自由に特定の aud に対するトークンを取得できるので、テナントに登録されたすべてのアプリが EasyAuth が有効なアプリにアクセスができる。</p><h2 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h2><p>ということで、簡単なコードで試してみる。まずは App Service なり Functions なりを作って EasyAuth を有効化する。<br>作成したらクライアント ID をメモっておく</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/easyauth-settings.png" alt=""></p><p>作成したら、これとは別に <code>アプリの登録</code> から適当なアプリを登録して、シークレットを作成する。</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/app-secret.png" alt=""></p><p>作成した方のクライアント ID とテナント ID もメモっておく</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/app-id.png" alt=""></p><p>メモったクライアント ID とテナント ID、作成したシークレットを使って、おもむろにアクセス トークンを取得する。</p><pre class=" language-posershell"><code class="language-posershell">$clientId = "e27ad7e4-f5a6-400f-ad8c-99079aaff560"$clientSecret = "************"$tenantId= 'c698d583-792e-44c6-8cd6-31dc9a64795a'$scope = '6c5dd842-bcfe-4a2e-9834-b19bfba1e26b/.default'$tokenEndpoint = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"$postParams = @&#123;    client_id = $clientId;    client_secret = $clientSecret;    grant_type = 'client_credentials';    scope = $scope&#125;$authResult = Invoke-RestMethod -UseBasicParsing -Uri $tokenEndpoint -Method POST -ContentType "application/x-www-form-urlencoded" -Body $postParams</code></pre><p>取得したアクセス トークンを EasyAuth で保護されたアプリに送信してみる。</p><pre class=" language-posershell"><code class="language-posershell">$headers = @&#123; Authorization = "Bearer $($authResult.access_token)" &#125;$res = Invoke-WebRequest -UseBasicParsing -Uri "https://easyauth-securely.azurewebsites.net/" -Headers $headers$res.StatusCode # => 200</code></pre><p>ということで、何の権限も持たないアプリが EasyAuth で保護されたアプリにアクセスが出来た。これは直感に反する動作に思える。</p><h2 id="なぜ権限がないのにも関わらずアクセスが出来たのか"><a href="#なぜ権限がないのにも関わらずアクセスが出来たのか" class="headerlink" title="なぜ権限がないのにも関わらずアクセスが出来たのか"></a>なぜ権限がないのにも関わらずアクセスが出来たのか</h2><p>シンプルに EasyAuth は既定では aud の検証と iss, 署名検証しか行わないからだ。つまり、アクセス トークンの aud が EasyAuth で保護されたアプリのものであって、署名の検証ができればアクセスが許可される。<br>先ほど取得したアクセス トークンの内容を <a href="https://jwt.ms">https://jwt.ms</a> で見てみると、以下のような内容が確認できる</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/access-token-claims.png" alt=""></p><p>Azure AD ではリソース側で制限がなされていない限り、アプリは特定リソースに対するアクセス トークンを発行可能である。<br>たとえば Microsoft Graph API に対するアクセス トークンは、テナントに登録されたすべてのアプリで取得可能である。先ほどのトークン取得コードの scope パラメーターを <code>&lt;appid&gt;/.default</code> の部分をテナントに登録された好きなアプリの ID に差し替えてみると、そのアプリに対するアクセス トークンが取得できることが確認できる。</p><p>ではテナントに登録されたアプリは、どの API に対しても自由にアクセスが可能かというとそうではなく、API 側で通常はトークンに含まれるクレームをチェックし権限を持ったプリンシパルからのアクセスかを判定する。<br>良く使われるのは scp (scope) や roles クレームだろう。</p><p>たとえば、Microsoft Graph API をアプリ権限で呼び出そうとすると、API のアクセス許可から権限を追加し、管理者の同意を付与する必要があるが、あれは roles クレームを追加するための作業といえるし、ユーザー権限での Graph API 呼び出しをするアプリを実装するときに scope を指定するのは scp クレームを追加するための作業といえる。</p><p>ただ、先ほども説明した通り、EasyAuth は既定では aud クレームの検証しかしない。つまり scp や roles クレームがないトークン、つまり特に権限を付与していないアプリが取得できるアクセス トークンでも、EasyAuth で保護されたアプリにアクセスすることが出来る。</p><h2 id="アクセスを制限するには"><a href="#アクセスを制限するには" class="headerlink" title="アクセスを制限するには"></a>アクセスを制限するには</h2><p>EasyAuth はあくまで簡易的な認証の仕組みであり、既定ではトークンの aud と署名を検証するのみなので、アクセスを制限するには以下のいずれかを行う必要がある。</p><ul><li>App Service 認証用に作成されたアプリの “ユーザーの割り当てを有効” にしてアクセス可能なユーザーを制限する</li><li>App Service 認証の組み込み認可ポリシーを使ってアクセス可能なユーザーを制限する</li><li>App Service にデプロイしたアプリ側でトークンのクレームをチェックするビジネス ロジックを追加する</li></ul><p>実施が簡単な順に並べたが、それぞれでの方法には一長一短がある。また複雑な要件を満たすには EasyAuth を利用するにしても、ビジネス ロジックを書く必要がある。</p><h3 id="App-Service-認証用に作成されたアプリの-“ユーザーの割り当てを有効”-にしてアクセス可能なユーザーを制限する"><a href="#App-Service-認証用に作成されたアプリの-“ユーザーの割り当てを有効”-にしてアクセス可能なユーザーを制限する" class="headerlink" title="App Service 認証用に作成されたアプリの “ユーザーの割り当てを有効” にしてアクセス可能なユーザーを制限する"></a>App Service 認証用に作成されたアプリの “ユーザーの割り当てを有効” にしてアクセス可能なユーザーを制限する</h3><p>あなたが Azure AD の管理者であり、Azure AD に対する管理権限を持つ場合には最も手っ取り早い方法は <a href="https://learn.microsoft.com/ja-jp/azure/active-directory/develop/howto-restrict-your-app-to-a-set-of-users">ユーザーの割り当てを有効化</a> することだ。<br>既定では EasyAuth により作成されたアプリは <code>ユーザーの割り当てが有効ですか?</code> が <code>いいえ</code> になっているので、これを <code>はい</code> に変更する。</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/assigned-required.png" alt=""></p><p>作業は <code>アプリの登録</code> ではなく <code>エンタープライズ アプリケーション</code> から行う必要があるので注意。</p><p>この設定を実施後、再度先ほどのトークン取得コードを実行してみると、今度は 401 エラーが返ってくることが確認できる。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$authResult</span> = <span class="token function">Invoke-RestMethod</span> <span class="token operator">-</span>UseBasicParsing <span class="token operator">-</span>Uri <span class="token variable">$tokenEndpoint</span> <span class="token operator">-</span>Method POST <span class="token operator">-</span>ContentType <span class="token string">"application/x-www-form-urlencoded"</span> <span class="token operator">-</span>Body <span class="token variable">$postParams</span><span class="token comment" spellcheck="true"># Invoke-RestMethod: &amp;#123;"error":"invalid_grant","error_description":"AADSTS501051: Application 'e27ad7e4-f5a6-400f-ad8c-99079aaff560'(EasyAuth Access App) is not assigned to a role for the application '6c5dd842-bcfe-4a2e-9834-b19bfba1e26b'(easyauth-securely).\r\nTrace ID: 31f83ef7-4e6e-4e4d-9ce7-4d3d04191c00\r\nCorrelation ID: a0ceee27-3cfb-4574-bf22-22289e6452f3\r\nTimestamp: 2023-07-31 14:23:05Z","error_codes":[501051],"timestamp":"2023-07-31 14:23:05Z","trace_id":"31f83ef7-4e6e-4e4d-9ce7-4d3d04191c00","correlation_id":"a0ceee27-3cfb-4574-bf22-22289e6452f3","error_uri":"https://login.microsoftonline.com/error?code=501051"&amp;#125;</span>```</code></pre><p>アクセスを許可するにはユーザーと割り当てに対してロールの割り当てを実施する。ユーザーはそのまま割り当てればよいが、アプリケーションは GUI で直接割り当てができないので、アプリケーションが所属するグループを作って、そのグループに対してロールの割り当てを行う (要 Azure AD Premium ライセンス) か、ライセンスがないのであれば Graph API 経由で割り当てを実施する。</p><pre class=" language-powershell"><code class="language-powershell">Connect<span class="token operator">-</span>MgGraph <span class="token operator">-</span>Scopes <span class="token string">"Application.ReadWrite.All, AppRoleAssignment.ReadWrite.All"</span><span class="token variable">$easyAuthApp</span> = Get<span class="token operator">-</span>MgServicePrincipal <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"appId eq '6c5dd842-bcfe-4a2e-9834-b19bfba1e26b'"</span><span class="token punctuation">;</span> <span class="token variable">$clientApp</span> = Get<span class="token operator">-</span>MgServicePrincipal <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"appId eq 'e27ad7e4-f5a6-400f-ad8c-99079aaff560'"</span><span class="token punctuation">;</span> <span class="token variable">$defaultRoleId</span> = <span class="token punctuation">(</span><span class="token namespace">[guid]</span>::Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>GuidNew<span class="token operator">-</span>MgServicePrincipalAppRoleAssignedTo <span class="token operator">-</span>ServicePrincipalId <span class="token variable">$easyAuthApp</span><span class="token punctuation">.</span>Id <span class="token operator">-</span>AppRoleId <span class="token variable">$defaultRoleId</span> <span class="token operator">-</span>ResourceId <span class="token variable">$easyAuthApp</span><span class="token punctuation">.</span>Id <span class="token operator">-</span>PrincipalId <span class="token variable">$clientApp</span><span class="token punctuation">.</span>Id</code></pre><p>上記のように権限を割り当てると、ユーザーとグループにクライアント アプリのサービス プリンシパルが追加され、アクセスが許可されるようになる。</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/users-and-groups.png" alt=""></p><p>ユーザーも同様に制御ができるが、<code>ユーザーの割り当てが有効ですか?</code> を <code>はい</code> に設定した時点で一般ユーザーが EasyAuth の認可処理に同意が出来なくなり、実質管理者同意が必要になるのでで注意。<br>詳しくは <a href="https://jpazureid.github.io/blog/azure-active-directory/azure-ad-consent-framework/#%E2%91%A2%E5%AF%BE%E8%B1%A1%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%A8%E8%A8%AD%E5%AE%9A%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B">「管理者の承認が必要」のメッセージが表示された場合の対処法 | Japan Azure Identity Support Blog</a> を参照のこと。</p><p>上記手順は手順自体はまあ簡単だが、Azure AD 側の管理権限がもろもろ必要になるのでアプリ開発者だと管理者に依頼することになるだろう。</p><h3 id="App-Service-認証の組み込み認可ポリシーを使ってアクセス可能なユーザーを制限する"><a href="#App-Service-認証の組み込み認可ポリシーを使ってアクセス可能なユーザーを制限する" class="headerlink" title="App Service 認証の組み込み認可ポリシーを使ってアクセス可能なユーザーを制限する"></a>App Service 認証の組み込み認可ポリシーを使ってアクセス可能なユーザーを制限する</h3><p>最近できた EasyAuth の新機能だが、本当に必要最低限のことしかできないがとりあえず動く。<br>簡単に設定方法を書いておく。詳細は <a href="https://learn.microsoft.com/ja-jp/azure/app-service/configure-authentication-provider-aad?tabs=workforce-tenant#use-a-built-in-authorization-policy">組み込み認可ポリシーを使用する</a> のドキュメントを参照。<br>ARM API を叩くのでよくわからん人は <a href="https://resoures.azure.com">https://resoures.azure.com</a> で設定すれば良い。</p><p>App Service のリソースを探して、config/authsettingsV2 を開く。上部の Edit を押してから <code>identityProviders</code> &gt; <code>azureActiveDirectory</code> &gt; <code>validation</code> を編集する。</p><p><img src="/2023/08/01/tips-for-using-appservice-authentication-securely/authsettingsV2.png" alt=""></p><p>指定する ID は アプリケーション ID ではなくサービス プリンシパルの ObjectId であることに注意。つまりエンタープライズ アプリケーション ブレードから確認できるオブジェクト ID。ユーザーの場合は普通にオブジェクト ID を指定する。</p><p>この設定を実施すると <code>allowedPrincipals</code> &gt; <code>identities</code> で設定したプリンシパルのみがアプリにアクセス可能となる。もう少し正確に言うとアクセス トークンの oid クレームが <code>allowedPrincipals</code> &gt; <code>identities</code> で設定したプリンシパルのいずれかの ObjectId と一致する場合にアクセスが許可される。</p><p>ちなみに <code>jwtClaimChecks</code> とかいうそれっぽい名前空間が定義されているが今のところ使い方は不明。<br>この設定は、サブスクリプションの管理権限があればいいのでアプリ管理者が大抵できると思われるが、まあ機能不足感は否めない。せめて scp や roles クレームの検証ぐらいしてくれたらいいのだが…。</p><h3 id="App-Service-にデプロイしたアプリ側でトークンのクレームをチェックするビジネス-ロジックを追加する"><a href="#App-Service-にデプロイしたアプリ側でトークンのクレームをチェックするビジネス-ロジックを追加する" class="headerlink" title="App Service にデプロイしたアプリ側でトークンのクレームをチェックするビジネス ロジックを追加する"></a>App Service にデプロイしたアプリ側でトークンのクレームをチェックするビジネス ロジックを追加する</h3><p>より複雑な要件を満たすためには、Azure AD や EasyAuth の機能だけでは不足なので、独自のコードを書く必要がある。<br>やりたいことによって実装難易度は異なるが EasyAuth 組み込みの機能レベルを実現するだけなら、リクエスト ヘッダーの <code>X-MS-CLIENT-PRINCIPAL-ID</code> をチェックすればよい。ここに ID トークン/アクセス トークンのオブジェクト ID が含まれるので、アクセス許可する ID のリストをアプリ側で持っておいて、合致するかをチェックすれば OK だ。</p><p>ただ、上記だけであれば前述の 2 つの方法を使ったほうが良いので、ビジネス ロジックを書く場合は追加のクレームを構成しチェックすることになるだろう。</p><p>例えば、<a href="https://learn.microsoft.com/ja-jp/azure/active-directory/develop/optional-claims#configure-groups-optional-claims">groups クレームを追加</a> して検証すれば、特定のグループに所属するユーザーにのみ権限を付与したり、<a href="https://learn.microsoft.com/ja-jp/azure/active-directory/develop/howto-add-app-roles-in-apps">アプリ ロール</a> を定義すれば、アプリ独自の権限を Azure AD 上で、特定のユーザーやサービス プリンシパルに付与して App Service 上のアプリで割り当てた権限によった応答を返すといったことが可能だ。</p><p>その他のクレームをチェックするには <a href="https://learn.microsoft.com/ja-jp/azure/app-service/configure-authentication-user-identities#decoding-the-client-principal-header">X-MS-CLIENT-PRINCIPAL</a> をチェックするか、素直にアクセス トークン or ID トークンをデコードして値を取り出して検証する。あと .NET なら ClaimsPrincipal に特定のクレームは勝手に入るので、それをチェックするでも良い。</p><p>この辺の詳細は前提の知識とか含め記事にすると面倒なので、今回は割愛。</p><p>ということで、EasyAuth はあくまで Easy な Auth なので、既定では結構だれでもアクセスが可能な状態で、ちょっと思ってたのと違う！ってなることがあるので注意しましょうという話。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Azure の App Service や Functions などの Web サービスには、Azure AD と連携して認証を行う機能があります。App Service 認証と呼ばれる機能で、旧称？の EasyAuth の方が馴染みがあるかもしれない。&lt;br&gt;最短ではほぼワンクリックでアプリに認証機能を追加できるため、とても便利だ。しかし、既定の設定ではテナントのすべてのユーザーおよびアプリがアクセス可能になっているため、要件によってはセキュリティ上の懸念がある。&lt;/p&gt;
&lt;p&gt;ということで EasyAuth の機能が Azure AD から見てどのような機能なのか、どのようなセキュリティ上の懸念があるのか、どのように対策するのかをまとめてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure AD" scheme="http://blog.haniyama.com/tags/Azure-AD/"/>
    
      <category term="App Service" scheme="http://blog.haniyama.com/tags/App-Service/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Graph API のトークンを検証しないでください</title>
    <link href="http://blog.haniyama.com/2023/04/26/do-not-validate-ms-graph-token/"/>
    <id>http://blog.haniyama.com/2023/04/26/do-not-validate-ms-graph-token/</id>
    <published>2023-04-26T08:04:00.000Z</published>
    <updated>2023-05-26T15:13:09.673Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft Graph API に対するトークンは JWT のように見えるが、JWT ではないので、<strong>決して署名を検証しようとしてはいけない。</strong></p><span id="more"></span><p>「アクセス トークンの署名を検証できません」という話を聞いて、詳しく話を聞いてみると検証しようとしているトークンが Microsoft Graph API に対するトークンだったというオチがある。</p><p>Azure AD から発行されるアクセス トークンは、発行された対象 (audience) で消費されるべきであり、Microsoft Graph API に対するトークンは Microsoft Graph API だけが検証してよい。<br>特に Microsoft の First Party に対して発行されるアクセス トークンについては、公開情報でも jwt 形式とは限らないと注意書きがある。</p><p>[<a href="https://learn.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-auth-code-flow]">https://learn.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-auth-code-flow]</a></p><blockquote><p>この例のトークンを含めて、自分が所有していないすべての API について、トークンの検証や読み取りを行わないでください。 Microsoft サービスのトークンには、JWT として検証されない特殊な形式を使用できます。また、コンシューマー (Microsoft アカウント) ユーザーに対して暗号化される場合もあります。 トークンの読み取りは便利なデバッグおよび学習ツールですが、コード内でこれに対する依存関係を取得したり、自分で制御する API 用ではないトークンについての詳細を想定したりしないでください。</p></blockquote><p>詳しい話は会社のチームブログ <a href="https://jpazureid.github.io/blog/azure-active-directory/oauth2-application-resource-and-api-permissions/">Azure AD に登録できる 「アプリ」と「リソース」、「API 権限」を理解する | Japan Azure Identity Support Blog</a> に詳しく書いたのでそちらを参照のこと。</p><p>要望があれば続きを書くかも。</p><h2 id="実際に検証してみた"><a href="#実際に検証してみた" class="headerlink" title="実際に検証してみた"></a>実際に検証してみた</h2><p>ということで、前置きはこの辺にして実際に Microsoft Graph API に発行されたトークンを検証してみた。(は？) </p><p>詳細は以下の GitHub Issue にある通り。</p><p><a href="https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/609#issuecomment-437471108">Cannot validate signature. · Issue #609 · AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet</a></p><p>Microsoft Graph API に発行されたトークンの形式は、ある突然不透明なランダム文字列になる可能性もある。また、JWT のままだがこの検証方法が突然使えなくなることもあるし、ただの興味本位で実装しただけなので注意。</p><p><strong>もしどこかからこのコードを見つけてきて参考に実装しようとしているなら、アタマを冷やして上記スレッドを理解できるまで読み込むことをおススメする。</strong></p><script src="https://gist.github.com/watahani/6ddd7f1cbd8197c30e4adad9d09a6c12.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft Graph API に対するトークンは JWT のように見えるが、JWT ではないので、&lt;strong&gt;決して署名を検証しようとしてはいけない。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="OAuth" scheme="http://blog.haniyama.com/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>Azure ポータルの言語をワンクリックで切り替える</title>
    <link href="http://blog.haniyama.com/2021/11/05/azure-portal-change-language/"/>
    <id>http://blog.haniyama.com/2021/11/05/azure-portal-change-language/</id>
    <published>2021-11-05T03:23:00.000Z</published>
    <updated>2023-05-26T15:12:05.739Z</updated>
    
    <content type="html"><![CDATA[<p>検証の時に英語にしたり、日本語にしたり面倒だったのでブックマーク レートにした。備忘録のためにメモっておく。</p><p>以下のリンクをブックマーク バーにでもドラッグアンドドロップしておけばよい。</p><p><a href="javascript:l%3Dnew%20URL(location.href)%3Bif(l.host%3D%3D%3D'learn.microsoft.com')%7Bwindow.location.href%3Dl.origin%20%2B%20l.pathname.replace(%2F%5E%5C%2F.*%3F%5C%2F%2F%2C%22%2Fja-jp%2F%22)%3B%7Delse%7Bl.searchParams.set(%22l%22%2C%22ja.ja-jp%22)%3Bwindow.location.href%3Dl.toString()%3B%7Dvoid(0);">日本語</a></p><p><a href="javascript:l%3Dnew%20URL(location.href)%3Bif(l.host%3D%3D%3D'learn.microsoft.com')%7Bwindow.location.href%3Dl.origin%20%2B%20l.pathname.replace(%2F%5E%5C%2F.*%3F%5C%2F%2F%2C%22%2Fen-us%2F%22)%3B%7Delse%7Bl.searchParams.set(%22l%22%2C%22en.en-us%22)%3Bwindow.location.href%3Dl.toString()%3B%7Dvoid(0);">英語</a></p><span id="more"></span><p>中身はこれ。URL に l=en.en-us のクエリを追加するだけ。</p><pre class=" language-javascript"><code class="language-javascript">l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"en.en-us"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>めんどいので URL チェックなどはやってない。ブックマーク レートの作成は、ググって以下のサイトを利用した。</p><ul><li><a href="https://ytyng.github.io/bookmarklet-script-compress/">Bookmarklet スクリプト変換</a></li></ul><p>Docs の変換も面倒なので追記。en-us を雑に変換してもいいんだけど一応ちゃんとパスの狙ったとこだけ</p><pre class=" language-javascript"><code class="language-javascript">l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>host <span class="token operator">===</span> <span class="token string">'learn.microsoft.com'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> l<span class="token punctuation">.</span>origin <span class="token operator">+</span> l<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\/.*?\//</span><span class="token punctuation">,</span> <span class="token string">"/ja-jp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"ja.ja-jp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;検証の時に英語にしたり、日本語にしたり面倒だったのでブックマーク レートにした。備忘録のためにメモっておく。&lt;/p&gt;
&lt;p&gt;以下のリンクをブックマーク バーにでもドラッグアンドドロップしておけばよい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;javascript:l%3Dnew%20URL(location.href)%3Bif(l.host%3D%3D%3D&#39;learn.microsoft.com&#39;)%7Bwindow.location.href%3Dl.origin%20%2B%20l.pathname.replace(%2F%5E%5C%2F.*%3F%5C%2F%2F%2C%22%2Fja-jp%2F%22)%3B%7Delse%7Bl.searchParams.set(%22l%22%2C%22ja.ja-jp%22)%3Bwindow.location.href%3Dl.toString()%3B%7Dvoid(0);&quot;&gt;日本語&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;javascript:l%3Dnew%20URL(location.href)%3Bif(l.host%3D%3D%3D&#39;learn.microsoft.com&#39;)%7Bwindow.location.href%3Dl.origin%20%2B%20l.pathname.replace(%2F%5E%5C%2F.*%3F%5C%2F%2F%2C%22%2Fen-us%2F%22)%3B%7Delse%7Bl.searchParams.set(%22l%22%2C%22en.en-us%22)%3Bwindow.location.href%3Dl.toString()%3B%7Dvoid(0);&quot;&gt;英語&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="雑記" scheme="http://blog.haniyama.com/tags/%E9%9B%91%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Secure Deployments with OIDC を Azure AD で試す</title>
    <link href="http://blog.haniyama.com/2021/10/30/github-secure-deployments-with-oidc-for-azure/"/>
    <id>http://blog.haniyama.com/2021/10/30/github-secure-deployments-with-oidc-for-azure/</id>
    <published>2021-10-30T13:00:00.000Z</published>
    <updated>2023-05-26T15:12:52.238Z</updated>
    
    <content type="html"><![CDATA[<p>プレビューの時に AWS が対応したと話題だった GitHub ID トークンとか呼ばれてた機能が正式発表された。</p><ul><li><a href="https://github.blog/changelog/2021-10-27-github-actions-secure-cloud-deployments-with-openid-connect/">GitHub Actions: Secure cloud deployments with OpenID Connect | GitHub Changelog</a></li></ul><p>ドキュメントを見ると、Azure AD との連携手順もしっかり公開されているので早速試してみた。ついでに az cli でラッピングされているトークン取得の通信も調べてみた。</p><span id="more"></span><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>GitHub のようなソース管理ツールは、今や CI/CD のプラットフォームとしても拡大している。いわゆる DevOps。GitHub にも多分に漏れず GitHub Actions という CI/CD のシステムがある。</p><p>このような CI/CD ツールを使うのに頭を悩ますのがクレデンシャルの管理である。GitHub Actions の場合、通常は Environment Variables としてシークレットや証明書などを格納して、GitHub Action から呼び出すことになるのだが、実際クレデンシャルをセキュアに保とうとすると有効期限を短く保だとか、ローテーションするだとかということに頭を悩ますことになる。</p><p>しかし、Secure cloud deployments with OpenID Connect (これ、正式名称なんですかね。話すとき伝えづらい。) を利用すると、GitHub 上にクレデンシャルをおかなくて済む。具体的には GitHub 側がワークフロー内だけで生成できる ID トークンを資格情報としてクラウドサービス側に送信し、署名とクレームを検証することで認証を行うことができる。</p><h2 id="設定手順"><a href="#設定手順" class="headerlink" title="設定手順"></a>設定手順</h2><p>手順もサンプルも <a href="https://github.com/marketplace/actions/azure-login">azure/login のリポジトリ</a> にあった。</p><p>説明するよりもやってみたほうが早いのでまずは Azure AD 側からセットアップする。手順は以下の通り。1, 2 はいつもの手順なので省略。</p><ol><li>アプリの登録</li><li>RBAC の割り当て</li><li>Federated Credentials に GitHub の情報をアプリに登録</li><li>GitHub Actions から呼び出し</li></ol><h3 id="Federated-Credentials-に-GitHub-の情報をアプリに登録"><a href="#Federated-Credentials-に-GitHub-の情報をアプリに登録" class="headerlink" title="Federated Credentials に GitHub の情報をアプリに登録"></a>Federated Credentials に GitHub の情報をアプリに登録</h3><p>アプリの登録で登録後、通常シークレット等を発行するための <code>証明書とシークレット</code> ブレードで <code>Federated Credentials</code> を選択し、資格情報の追加を選択する。</p><p><img src="/2021/10/30/github-secure-deployments-with-oidc-for-azure/appreg01.png" alt="appreg01.png"></p><p>色々入力項目があるが、organizations (個人リポジトリならユーザー名) と リポジトリ名を入力する。</p><p><img src="/2021/10/30/github-secure-deployments-with-oidc-for-azure/appreg02.png" alt="appreg02.png"></p><p>Entity Type (エンティティ型) というのは後で説明するが、GitHub 側の特定ブランチやタグがついてる時だけ認証できる、みたいな設定ができる。ここでは <code>ブランチ</code> を選択し <code>main</code> ブランチを対象のブランチに設定する。</p><p>ポイントとしては、この時点でサブジェクト識別子 (sub) が <code>repo:watahani/secure-deployments-for-azure-lab:ref:refs/heads/main</code> のようになっていること。これが実際に GitHub の ID トークンに含めるべき <code>sub</code> クレームになる。逆に言うと、ここで設定した <code>sub</code> が含まれていない場合、認証に失敗する。ちなみに AAD 側で受け入れ可能な audience は編集できるが az cli を使っている限り上述のパラメーターをいじることはなさそう。</p><h3 id="GitHub-Actions-側の設定"><a href="#GitHub-Actions-側の設定" class="headerlink" title="GitHub Actions 側の設定"></a>GitHub Actions 側の設定</h3><p>GitHub Actions 側の設定は <a href="https://github.com/marketplace/actions/azure-login">azure/login のリポジトリ</a> にサンプルがあるのでその通りに記載する。現状 az cli のベータバージョンが必要なのでインストールタスクが追加されているが、これがなくなれば <code>azure/login</code> を呼び出すだけで az login ができるようになるはず。(Installing CLI-beta for OpenID Connect の job が不要になるという意味)</p><pre class=" language-yml"><code class="language-yml">name: Run Azure Login with OpenID Connect# main ブランチでだけ動くように修正on:  push:    branches:      - mainpermissions:      id-token: writejobs:   build-and-deploy:    runs-on: ubuntu-latest    steps:    - name: Installing CLI-beta for OpenID Connect      run: |        cd ../..        CWD="$(pwd)"        python3 -m venv oidc-venv        . oidc-venv/bin/activate        echo "activated environment"        python3 -m pip install -q --upgrade pip        echo "started installing cli beta"        pip install -q --extra-index-url https://azcliprod.blob.core.windows.net/beta/simple/ azure-cli        echo "***************installed cli beta*******************"        echo "$CWD/oidc-venv/bin" >> $GITHUB_PATH    - name: 'Az CLI login'      uses: azure/login@v1.4.0      with:        client-id: $&#123;&#123; secrets.AZURE_CLIENTID &#125;&#125;        tenant-id: $&#123;&#123; secrets.AZURE_TENANTID &#125;&#125;        subscription-id: $&#123;&#123; secrets.AZURE_SUBSCRIPTIONID &#125;&#125;    - name: 'Run az commands'      run: |        az account show        az group list        pwd </code></pre><p>サンプルのままだと、push したらタスクが動いてしまうので、ちゃんと main ブランチだけで動くようにした方が良いだろう。今回はブランチ名を指定して federated credentials を作成したので、別ブランチで Action が動くとトークン取得に失敗してまう。</p><p>環境変数は、とりあえずリポジトリ全体の Secrets にでも突っ込んでおく。Environment を設定するなら Environment Secrets に入れればいいだろう。</p><p><img src="/2021/10/30/github-secure-deployments-with-oidc-for-azure/github-secrets.png" alt="github-secrets.png"><br><img src="/2021/10/30/github-secure-deployments-with-oidc-for-azure/githb-add-secrets.png" alt="github-add-secrets.png"></p><p>保存して push すると GitHub Actions が動いて、割り当てたリソースグループの情報が見えた。</p><pre class=" language-json"><code class="language-json">// az group list&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"environmentName"</span><span class="token operator">:</span> <span class="token string">"AzureCloud"</span><span class="token punctuation">,</span>  <span class="token property">"homeTenantId"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span>  <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"managedByTenants"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"My Subscription Name"</span><span class="token punctuation">,</span>  <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"Enabled"</span><span class="token punctuation">,</span>  <span class="token property">"tenantId"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span>  <span class="token property">"user"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"servicePrincipal"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span>  &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"/subscriptions/***/resourceGroups/gh-actions-branch"</span><span class="token punctuation">,</span>    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"eastus"</span><span class="token punctuation">,</span>    <span class="token property">"managedBy"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"gh-actions-branch"</span><span class="token punctuation">,</span>    <span class="token property">"properties"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"provisioningState"</span><span class="token operator">:</span> <span class="token string">"Succeeded"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Microsoft.Resources/resourceGroups"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h3 id="GitHub-ID-トークンの中身"><a href="#GitHub-ID-トークンの中身" class="headerlink" title="GitHub ID トークンの中身"></a>GitHub ID トークンの中身</h3><p>このままだと面白くないので、az cli のソースをみてトークンの取り方を調べてみようと思ったのだがソースがどこにあるかよくわからなかったので手探りで curl コマンドを叩くことにした。とはいえ ID トークンの取得はすでに先人たちが試してくれているので、その通りに記載する。</p><p>ACTIONS_ID_TOKEN_REQUEST_URL へはクエリパラメータとして aud を渡すことで、任意の Audience を ID トークンに埋め込めるようだった。</p><pre class=" language-sh"><code class="language-sh">federated_token=`curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value'`</code></pre><p>実際に取得したトークンがこんな感じ。</p><script src="https://gist.github.com/watahani/cad18acba1bc2ad655ee275558b1d2e4.js"></script><p>まずは、署名を検証するために openid-configuration を見に行く。</p><p><a href="https://token.actions.githubusercontent.com/.well-known/openid-configuration">https://token.actions.githubusercontent.com/.well-known/openid-configuration</a></p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"issuer"</span><span class="token operator">:</span> <span class="token string">"https://token.actions.githubusercontent.com"</span><span class="token punctuation">,</span>  <span class="token property">"jwks_uri"</span><span class="token operator">:</span> <span class="token string">"https://token.actions.githubusercontent.com/.well-known/jwks"</span><span class="token punctuation">,</span>  <span class="token property">"subject_types_supported"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"public"</span><span class="token punctuation">,</span>    <span class="token string">"pairwise"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"response_types_supported"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"id_token"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"claims_supported"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"sub"</span><span class="token punctuation">,</span>    <span class="token string">"aud"</span><span class="token punctuation">,</span>    <span class="token string">"exp"</span><span class="token punctuation">,</span>    <span class="token string">"iat"</span><span class="token punctuation">,</span>    <span class="token string">"iss"</span><span class="token punctuation">,</span>    <span class="token string">"jti"</span><span class="token punctuation">,</span>    <span class="token string">"nbf"</span><span class="token punctuation">,</span>    <span class="token string">"ref"</span><span class="token punctuation">,</span>    <span class="token string">"repository"</span><span class="token punctuation">,</span>    <span class="token string">"repository_owner"</span><span class="token punctuation">,</span>    <span class="token string">"run_id"</span><span class="token punctuation">,</span>    <span class="token string">"run_number"</span><span class="token punctuation">,</span>    <span class="token string">"run_attempt"</span><span class="token punctuation">,</span>    <span class="token string">"actor"</span><span class="token punctuation">,</span>    <span class="token string">"workflow"</span><span class="token punctuation">,</span>    <span class="token string">"head_ref"</span><span class="token punctuation">,</span>    <span class="token string">"base_ref"</span><span class="token punctuation">,</span>    <span class="token string">"event_name"</span><span class="token punctuation">,</span>    <span class="token string">"ref_type"</span><span class="token punctuation">,</span>    <span class="token string">"environment"</span><span class="token punctuation">,</span>    <span class="token string">"job_workflow_ref"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"id_token_signing_alg_values_supported"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"RS256"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"scopes_supported"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"openid"</span>  <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>jkws_uri</code> から  <code>kid</code>: <code>DA6DD449E0E809599CECDFB3BDB6A2D7D0C2503A</code> の証明書を取ってきて <a href="https://jwt.io">jwt.io</a> に入れるとちゃんと検証できた。</p><p><img src="/2021/10/30/github-secure-deployments-with-oidc-for-azure/jwtio.png" alt="jwtio.png"></p><h4 id="クレームの中身"><a href="#クレームの中身" class="headerlink" title="クレームの中身"></a>クレームの中身</h4><p>Azure AD では多分 <code>sub</code> と <code>iss</code> ぐらいしか見てないが、色々情報が入っている。前述の通り aud はカスタマイズできるし、Azure AD 側でも変更できるので、それぞれが一致していれば認証は出来そう。(あんまやる意味ないけど)<br>ちなみに <code>environment</code> だけは Environment を作って動かさないと入ってこなかった。有効期限は 900 秒、ワークフローの中で何回発行できるか、などは試してない。</p><h4 id="sub-の中身"><a href="#sub-の中身" class="headerlink" title="sub の中身"></a>sub の中身</h4><p><code>sub</code> としては以下の 4 パターンがあるようで、それぞれのパターンで以下のような形式だった。</p><table><thead><tr><th>エンティティ型</th><th>trigger</th><th>sub</th></tr></thead><tbody><tr><td>ブランチ (Branch)</td><td>push</td><td>repo:{organization_name}/{repository_name}:{branch_name}</td></tr><tr><td>タグ (Tag)</td><td>push/tags</td><td>repo:{organization_name}/{repository_name}:ref:refs/tags/{tag_name}</td></tr><tr><td>環境 (Environment)</td><td>push/environment</td><td>repo:{organization_name}/{repository_name}:environment:{environment_name}</td><td></td></tr><tr><td>Pull Request</td><td>pull_request</td><td>repo:{organization_name}/{repository_name}:pull_request</td></tr></tbody></table><p>いちおうそれぞれ動かしてみた、<a href="https://github.com/watahani/secure-deployments-for-azure-lab/tree/main/.github/workflows">サンプル</a> もおいておく。GitHub Actions の書き方あまり知らなくて、めちゃくちゃ試行錯誤したのでコミットログが汚い。</p><p>ちなみに Azure AD のアプリの登録から pull_request の sub を設定しようとすると、ポータルの問題で repo:{organization_name}/{repository_name}:pull<code>-</code>request の形式になってしまう。(<code>_</code> が <code>-</code> になってる)</p><p>このせいで Pull Request ベースの Action が失敗しまくったのだがトークンの中身みても、しばらく何で失敗しているか分からなった。こういう間違いホントに気づけないから困るｗ</p><p>sub の値を直接編集すれば正しく動くので Pull Request のトリガーを設定したいときは、以下の通り設定しよう。速攻ポータルから Feedback しておいた。</p><p><img src="/2021/10/30/github-secure-deployments-with-oidc-for-azure/appreg03.png" alt="appreg03.png"></p><p>気になって <a href="https://docs.microsoft.com/en-us/graph/api/application-post-federatedidentitycredentials?view=graph-rest-beta&amp;tabs=http">Graph API のリファレンス</a> を漁ったところ sub を生で指定するようなので、多分ポータル側の問題のように見える。</p><h3 id="Azure-AD-との認証フロー"><a href="#Azure-AD-との認証フロー" class="headerlink" title="Azure AD との認証フロー"></a>Azure AD との認証フロー</h3><p>Azure AD への認証フローは、Client Credentials の client_assertion に入れれば良いんでしょ？と思って入れたら実際動いた。</p><p>あとで公式ドキュメントが見つかって (<a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/workload-identity-federation">Workload identity federation - Microsoft identity platform | Microsoft Docs</a>) 見たら答えが書いてあったので、悩む必要はなかったが…。</p><p>なので、<a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow">Client Credentials Grant</a> でトークンを取るだけ。試しに management.azure.com の API をたたいて動くことを確認する。</p><pre class=" language-sh"><code class="language-sh">azure_token=`curl -X POST https://login.microsoftonline.com/$&#123;AZURE_TENANTID&#125;/oauth2/v2.0/token \      -F client_id=$&#123;AZURE_CLIENTID&#125; \      -F grant_type=client_credentials \      -F scope=https://management.azure.com/.default \      -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \      -F client_assertion=$&#123;federated_token&#125; | jq -r '.access_token'`curl -H "Authorization: Bearer $azure_token" https://management.azure.com/subscriptions/$AZURE_SUBSCRIPTIONID/resourcegroups?api-version=2021-04-01</code></pre><p>全体のコードはこんな感じになる。</p><script src="https://gist.github.com/watahani/e831a19a4653a459847070b60909e02b.js"></script><p>アプリに必要な権限さえ与えておけば scope を呼び出す API ごとに設定することで Microsoft Graph や独自の API に対するトークン何かも取れると思う。個人のテスト テナントだったら GitHub Actions で定期ジョブとか組めそうで非常に良い。とはいえ、クレデンシャルが漏れないからといって安全というわけではないので、きちんと使うには GitHub Actions を勉強しましょう。</p><h3 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h3><p>AWS の IAM が GitHub OIDC に対応したとき Twitter ですごく盛り上がっていたが、あまり何のことか分かっておらず、今回触ってはじめて理解した。何で今まで無かったんだというレベルで良い。</p><p>GitHub Actions についてもこの前作ってみて、おおよその作り方も分かっているので、GitHub OIDC 使いつつ、検証用テナントの設定保存したりいじったりする GitHub Actions でも書いてみようかなー。</p><h3 id="蛇足な疑問"><a href="#蛇足な疑問" class="headerlink" title="蛇足な疑問"></a>蛇足な疑問</h3><p>Microsoft Graph API で <a href="https://docs.microsoft.com/en-us/graph/api/application-post-federatedidentitycredentials?view=graph-rest-beta&amp;tabs=http">federated Credentials 作成</a> のリファレンス見ると Azure AD から発行したトークンを、Client Credentials の assertion として使うようなサンプルが書いてある。</p><pre class=" language-http"><code class="language-http">POST https://graph.microsoft.com/beta/applications/bcd7c908-1c4d-4d48-93ee-ff38349a75c8/federatedIdentityCredentials/<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"testing02"</span><span class="token punctuation">,</span>    <span class="token string">"issuer"</span><span class="token punctuation">:</span> <span class="token string">"https://login.microsoftonline.com/3d1e2be9-a10a-4a0c-8380-7ce190f98ed9/v2.0"</span><span class="token punctuation">,</span>    <span class="token string">"subject"</span><span class="token punctuation">:</span> <span class="token string">"a7d388c3-5e3f-4959-ac7d-786b3383006a"</span><span class="token punctuation">,</span>    <span class="token string">"audiences"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"api://AzureADTokenExchange"</span>    <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span></code></pre><p><code>openid-configuration</code> が読めて <code>sub</code> と <code>aud</code> さえあってればいいので、ユーザーの ID トークン使ってアプリ権限のアクセス トークンとる、とかも動きはしそう。使いどころは分からないけど。</p><p>その他に、気になる点としては、Trigger が複数条件あったときに何が優先されるかというのがドキュメントを読んでも良くわからず。例えば、以下のようなワークフローがあったときに、id_token の sub には何が入るのか。</p><pre class=" language-yml"><code class="language-yml">on: [push, pull_request]  branches:    - dev  tags:    - v1.0.0-betajobs:   development-build:    runs-on: ubuntu-latest    environment: development    steps:        </code></pre><p>GitHub Actions はあまり触ってないのでどんなワークフローを組むのが一般的なのかは分からないが、環境によっては発行される id_token の <code>sub</code> を気にしないといけないかもしれない。GitHub Actions 詳しい人教えてください。</p><h3 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/workload-identity-federation">Workload identity federation - Microsoft identity platform | Microsoft Docs</a></li><li><a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect">About security hardening with OpenID Connect - GitHub Docs</a></li><li><a href="https://zenn.dev/mryhryki/articles/2021-09-19-access-aws-by-github-actions">GitHub Actions のIDトークンを使ってAWSリソースにアクセスする</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;プレビューの時に AWS が対応したと話題だった GitHub ID トークンとか呼ばれてた機能が正式発表された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.blog/changelog/2021-10-27-github-actions-secure-cloud-deployments-with-openid-connect/&quot;&gt;GitHub Actions: Secure cloud deployments with OpenID Connect | GitHub Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ドキュメントを見ると、Azure AD との連携手順もしっかり公開されているので早速試してみた。ついでに az cli でラッピングされているトークン取得の通信も調べてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="GitHub" scheme="http://blog.haniyama.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD のトークンを PowerShell で取得する</title>
    <link href="http://blog.haniyama.com/2021/04/24/get-aad-token-using-powershell/"/>
    <id>http://blog.haniyama.com/2021/04/24/get-aad-token-using-powershell/</id>
    <published>2021-04-24T07:33:00.000Z</published>
    <updated>2022-05-18T13:45:29.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-Of-All"><a href="#First-Of-All" class="headerlink" title="First Of All"></a>First Of All</h2><p>業務等で使うなら素直に <a href="https://github.com/AzureAD/MSAL.PS/">MSAL.PS</a> や、<a href="https://github.com/microsoftgraph/msgraph-sdk-powershell">Microsoft Graph PowerShell SDK</a> を利用してトークン取得しましょう。<br>自分で実装しても勉強以外の役にはたぶん立たないです。</p><p>Windows 入ってたらとりあえず動くので、勉強会用にそれぞれのフローのコードを書いてみたのだが、勉強会する暇なくて腐ってたので供養。</p><span id="more"></span><h3 id="クライアント資格情報フロー"><a href="#クライアント資格情報フロー" class="headerlink" title="クライアント資格情報フロー"></a>クライアント資格情報フロー</h3><p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow">https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow</a></p><p>めちゃ簡単。</p><script src="https://gist.github.com/watahani/546d21ce1f0368bb90c6ab517843134e.js"></script><p>証明書でやるパターンは全然わからんし、めっちゃ .Net のクラス呼んでるので多分 C# で書いたほうが勉強になる。</p><script src="https://gist.github.com/watahani/d5b6def478b9f6a1fcb815123f537c53.js"></script><h3 id="認可コード付与-Authorization-Code-Grant"><a href="#認可コード付与-Authorization-Code-Grant" class="headerlink" title="認可コード付与 (Authorization Code Grant)"></a>認可コード付与 (Authorization Code Grant)</h3><p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-auth-code-flow">https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-auth-code-flow</a></p><p>ドキュメントは認証コードなのは無視だ！リフレッシュ トークンの検証をした時期があって、その辺のコードも残ってる。<br>PowerShell のローカルサーバーはよく止まってしまうんだけど、エラーハンドリングのやり方がわからない。</p><p>無駄に PKCE にも対応しているぞ。</p><script src="https://gist.github.com/watahani/383f2aff2480e579e27127821897682a.js"></script><h3 id="デバイス許可付与-Device-Authorization-Grant"><a href="#デバイス許可付与-Device-Authorization-Grant" class="headerlink" title="デバイス許可付与 (Device Authorization Grant)"></a>デバイス許可付与 (Device Authorization Grant)</h3><p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-device-code">https://docs.microsoft.com/ja-jp/azure/active-directory/develop/v2-oauth2-device-code</a></p><p>これも特に変なことはしてない。</p><script src="https://gist.github.com/watahani/f53468b819ab1e35bcc5f4d0d1cb3ee2.js"></script><h2 id="おわり"><a href="#おわり" class="headerlink" title="おわり"></a>おわり</h2><p>On-Behalf-Of とか消えつつある SAML Bearer Assertion フローは気が向けば書くかも。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First-Of-All&quot;&gt;&lt;a href=&quot;#First-Of-All&quot; class=&quot;headerlink&quot; title=&quot;First Of All&quot;&gt;&lt;/a&gt;First Of All&lt;/h2&gt;&lt;p&gt;業務等で使うなら素直に &lt;a href=&quot;https://github.com/AzureAD/MSAL.PS/&quot;&gt;MSAL.PS&lt;/a&gt; や、&lt;a href=&quot;https://github.com/microsoftgraph/msgraph-sdk-powershell&quot;&gt;Microsoft Graph PowerShell SDK&lt;/a&gt; を利用してトークン取得しましょう。&lt;br&gt;自分で実装しても勉強以外の役にはたぶん立たないです。&lt;/p&gt;
&lt;p&gt;Windows 入ってたらとりあえず動くので、勉強会用にそれぞれのフローのコードを書いてみたのだが、勉強会する暇なくて腐ってたので供養。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="OAuth" scheme="http://blog.haniyama.com/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>自分的 CORS メモ</title>
    <link href="http://blog.haniyama.com/2021/04/24/cors/"/>
    <id>http://blog.haniyama.com/2021/04/24/cors/</id>
    <published>2021-04-24T06:46:00.000Z</published>
    <updated>2022-05-18T13:45:29.038Z</updated>
    
    <content type="html"><![CDATA[<p>最近 CORS を改めて勉強したけど、やっぱり知識があいまいな部分があるので、一旦アウトプットとしてまとめておく。</p><span id="more"></span><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>とりあえず MDN を読んどけばなんとなく理解できる。</p><ul><li><a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS">オリジン間リソース共有 (CORS) - HTTP | MDN</a></li></ul><p>なんで CORS があるのって話。</p><ul><li><a href="https://note.crohaco.net/2019/http-cors-preflight/">CORS とか Preflight とかよくわかんないよな - くろのて</a></li></ul><p>なんでできたのかみたいな話を調べていくと JSONP とかいう黒魔術の話がでて楽しそうだが、キリがなさそう。</p><p>TL で CORS 完全手冊という中国語のブログが紹介されており、Google 翻訳で読んだところすごくわかりやすかった。全部で 6 章あるが、自分が理解できたのは大体 3 章まで。</p><ul><li><a href="https://blog.huli.tw/2021/02/19/cors-guide-1/">CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？ - Huli</a></li></ul><p>大体理解した後、日本語のドキュメントを探したけど、あんま良さげなのはなかった。<br>実用上は Qiita のこの記事読んどけば大丈夫そう。</p><p><a href="https://qiita.com/tomoyukilabs/items/81698edd5812ff6acb34">CORSまとめ - Qiita</a></p><ul><li><a href="https://fetch.spec.whatwg.org/">Fetch Standard</a></li></ul><p>仕様は気になるところ (<a href="https://fetch.spec.whatwg.org/#cors-preflight-fetch">preflight</a> のロジックあたり) だけつまみ読みした感じ。多くの人はここだけ読んでおけば十分だろうと思う。</p><h2 id="CORS-Step-0"><a href="#CORS-Step-0" class="headerlink" title="CORS Step 0"></a>CORS Step 0</h2><p>CORS の制約は Origin が異なるときに発生する。<a href="https://html.spec.whatwg.org/multipage/origin.html#same-site">same site</a> とは異なり、same origin はスキーマとポート、ドメインがすべて一致する必要がある。<br><a href="http://google.com/">http://google.com</a> と <a href="https://www.google.com/">https://www.google.com</a> は same site だが same origin ではない。どうもスキーマが違う場合には schemelessly same site というらしいが…。</p><p>とにかく same origin ではないサイトへの XMLHttpRequest, fecth API を利用した通信が CROS でブロックされる。<br>F12 を押してブラウザーの DevTools を立ち上げ、コンソールに <code>fetch(&quot;https://google.com&quot;)</code> と打ってみる。</p><pre class="language-js" style="" tabindex="0"><code id="f17ee73d" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;f17ee73d&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;https://google.com\&quot;)\nPromise&nbsp;{\u003cpending\u003e}\n// cors.html:1 Access to fetch at \u0027https://google.com/' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;https://google.com\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span>\nPromise <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token operator\&quot;>\u0026lt;</span>pending<span class=\&quot;token operator\&quot;>></span><span class=\&quot;token punctuation\&quot;>}</span>\n<span class=\&quot;token comment\&quot;>// cors.html:1 Access to fetch at 'https://google.com/' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://google.com"</span><span class="token punctuation">)</span>Promise <span class="token punctuation">{</span><span class="token operator">&lt;</span>pending<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token comment">// cors.html:1 Access to fetch at 'https://google.com/' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</span></code></pre><p>CORS ポリシーによりブロックされたと出る。リクエスト モードを no-cros にすれば opaque response を得られるとあるが、これは通信はするが JavaScript に値を返さずに、エラーも抑制されるモードで、たいていの場合は役に立たない。<a href="https://blog.fullstacktraining.com/what-is-an-opaque-response/">opaque response でググると出てくるサイトによると</a> キャッシュ戦略に役立つらしいが今回は興味がないのでパス。</p><p>さて、CORS はサーバーの応答ヘッダーによりブラウザーが、通信を制御する仕様なので Google に通信を送ったって何も学べないので、適当なサーバーを立てる。</p><pre class="language-python" style="" tabindex="0"><code id="9fcf6e3f" class="language-python" data-prism-hydrate="{&quot;element&quot;:&quot;9fcf6e3f&quot;,&quot;language&quot;:&quot;python&quot;,&quot;code&quot;:&quot;\nfrom http.server import BaseHTTPRequestHandler, ThreadingHTTPServer\nimport logging\n\&quot;\&quot;\&quot;\nVery simple HTTP server in python for logging requests (for python 3.7 or later)\nUsage::\n    ./server.py [\u003cport\u003e]\n\&quot;\&quot;\&quot;\n\nclass S(BaseHTTPRequestHandler):\n    def _set_response(self, custom_headers = {}):\n        self.send_response(200)\n        self.end_headers()\n\n    def do_GET(self):\n        logging.info(\&quot;GET request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;,\n                     str(self.path), str(self.headers))\n        self._set_response()\n        self.wfile.write(\&quot;GET request for {},\\n\\nwith request headers: \\n{}\&quot;.format(\n            self.path, self.headers).encode(\u0027utf-8'))\n\ndef run(server_class=ThreadingHTTPServer, handler_class=S, port=8080):\n    logging.basicConfig(level=logging.INFO)\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    logging.info(\&quot;Starting httpd... port {}\\n\&quot;.format(str(port)))\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        pass\n    httpd.server_close()\n    logging.info('Stopping httpd...\\n')\n\n\nif __name__ == '__main__':\n    from sys import argv\n\n    if len(argv) == 2:\n        run(port=int(argv[1]))\n    else:\n        run()\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token keyword\&quot;>from</span> http<span class=\&quot;token punctuation\&quot;>.</span>server <span class=\&quot;token keyword\&quot;>import</span> BaseHTTPRequestHandler<span class=\&quot;token punctuation\&quot;>,</span> ThreadingHTTPServer\n<span class=\&quot;token keyword\&quot;>import</span> logging\n<span class=\&quot;token triple-quoted-string string\&quot;>\&quot;\&quot;\&quot;\nVery simple HTTP server in python for logging requests (for python 3.7 or later)\nUsage::\n    ./server.py [\u0026lt;port>]\n\&quot;\&quot;\&quot;</span>\n\n<span class=\&quot;token keyword\&quot;>class</span> <span class=\&quot;token class-name\&quot;>S</span><span class=\&quot;token punctuation\&quot;>(</span>BaseHTTPRequestHandler<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n    <span class=\&quot;token keyword\&quot;>def</span> <span class=\&quot;token function\&quot;>_set_response</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>,</span> custom_headers <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>send_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token number\&quot;>200</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>end_headers<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n    <span class=\&quot;token keyword\&quot;>def</span> <span class=\&quot;token function\&quot;>do_GET</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;GET request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n                     <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>_set_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>wfile<span class=\&quot;token punctuation\&quot;>.</span>write<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;GET request for {},\\n\\nwith request headers: \\n{}\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span>\n            self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>,</span> self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span>encode<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'utf-8'</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n<span class=\&quot;token keyword\&quot;>def</span> <span class=\&quot;token function\&quot;>run</span><span class=\&quot;token punctuation\&quot;>(</span>server_class<span class=\&quot;token operator\&quot;>=</span>ThreadingHTTPServer<span class=\&quot;token punctuation\&quot;>,</span> handler_class<span class=\&quot;token operator\&quot;>=</span>S<span class=\&quot;token punctuation\&quot;>,</span> port<span class=\&quot;token operator\&quot;>=</span><span class=\&quot;token number\&quot;>8080</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n    logging<span class=\&quot;token punctuation\&quot;>.</span>basicConfig<span class=\&quot;token punctuation\&quot;>(</span>level<span class=\&quot;token operator\&quot;>=</span>logging<span class=\&quot;token punctuation\&quot;>.</span>INFO<span class=\&quot;token punctuation\&quot;>)</span>\n    server_address <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>''</span><span class=\&quot;token punctuation\&quot;>,</span> port<span class=\&quot;token punctuation\&quot;>)</span>\n    httpd <span class=\&quot;token operator\&quot;>=</span> server_class<span class=\&quot;token punctuation\&quot;>(</span>server_address<span class=\&quot;token punctuation\&quot;>,</span> handler_class<span class=\&quot;token punctuation\&quot;>)</span>\n    logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;Starting httpd... port {}\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>port<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n    <span class=\&quot;token keyword\&quot;>try</span><span class=\&quot;token punctuation\&quot;>:</span>\n        httpd<span class=\&quot;token punctuation\&quot;>.</span>serve_forever<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n    <span class=\&quot;token keyword\&quot;>except</span> KeyboardInterrupt<span class=\&quot;token punctuation\&quot;>:</span>\n        <span class=\&quot;token keyword\&quot;>pass</span>\n    httpd<span class=\&quot;token punctuation\&quot;>.</span>server_close<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n    logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'Stopping httpd...\\n'</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n\n<span class=\&quot;token keyword\&quot;>if</span> __name__ <span class=\&quot;token operator\&quot;>==</span> <span class=\&quot;token string\&quot;>'__main__'</span><span class=\&quot;token punctuation\&quot;>:</span>\n    <span class=\&quot;token keyword\&quot;>from</span> sys <span class=\&quot;token keyword\&quot;>import</span> argv\n\n    <span class=\&quot;token keyword\&quot;>if</span> <span class=\&quot;token builtin\&quot;>len</span><span class=\&quot;token punctuation\&quot;>(</span>argv<span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>==</span> <span class=\&quot;token number\&quot;>2</span><span class=\&quot;token punctuation\&quot;>:</span>\n        run<span class=\&quot;token punctuation\&quot;>(</span>port<span class=\&quot;token operator\&quot;>=</span><span class=\&quot;token builtin\&quot;>int</span><span class=\&quot;token punctuation\&quot;>(</span>argv<span class=\&quot;token punctuation\&quot;>[</span><span class=\&quot;token number\&quot;>1</span><span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n    <span class=\&quot;token keyword\&quot;>else</span><span class=\&quot;token punctuation\&quot;>:</span>\n        run<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}"><span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> BaseHTTPRequestHandler<span class="token punctuation">,</span> ThreadingHTTPServer<span class="token keyword">import</span> logging<span class="token triple-quoted-string string">"""Very simple HTTP server in python for logging requests (for python 3.7 or later)Usage::    ./server.py [&lt;port&gt;]"""</span><span class="token keyword">class</span> <span class="token class-name">S</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_set_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> custom_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"GET request,\nPath: %s\nHeaders:\n%s\n"</span><span class="token punctuation">,</span>                     <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_set_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"GET request for {},\n\nwith request headers: \n{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            self<span class="token punctuation">.</span>path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>server_class<span class="token operator">=</span>ThreadingHTTPServer<span class="token punctuation">,</span> handler_class<span class="token operator">=</span>S<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>    server_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>    httpd <span class="token operator">=</span> server_class<span class="token punctuation">(</span>server_address<span class="token punctuation">,</span> handler_class<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Starting httpd... port {}\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    httpd<span class="token punctuation">.</span>server_close<span class="token punctuation">(</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Stopping httpd...\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> sys <span class="token keyword">import</span> argv    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>python server.py みたいにしたら動く。ThreadingHTTPServer は python 3.7 じゃないと動かないので、それ以上のバージョンを。あらためて、fetch を試して Python サーバーのログを見る。</p><pre class="language-javascript" style="" tabindex="0"><code id="0916043f" class="language-javascript" data-prism-hydrate="{&quot;element&quot;:&quot;0916043f&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api\&quot;)\nPromise&nbsp;{\u003cpending\u003e}\n//Access to fetch at \u0027http://localhost:8080/api' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span>\nPromise <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token operator\&quot;>\u0026lt;</span>pending<span class=\&quot;token operator\&quot;>></span><span class=\&quot;token punctuation\&quot;>}</span>\n<span class=\&quot;token comment\&quot;>//Access to fetch at 'http://localhost:8080/api' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api"</span><span class="token punctuation">)</span>Promise <span class="token punctuation">{</span><span class="token operator">&lt;</span>pending<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token comment">//Access to fetch at 'http://localhost:8080/api' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</span></code></pre><p>Google に送ったリクエストと同じく CORS のエラーが出ている。一方、Python サーバー側のログはこんなかんじで、リクエストが到達している。つまりレスポンスも返している。</p><pre class="language-log" style="" tabindex="0"><code id="0a574e3f" class="language-log" data-prism-hydrate="{&quot;element&quot;:&quot;0a574e3f&quot;,&quot;language&quot;:&quot;log&quot;,&quot;code&quot;:&quot;\nINFO:root:GET request,\nPath: /api\nHeaders:\nHost: localhost:8080\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.57\nAccept: */*\nOrigin: https://blog.haniyama.com\nSec-Fetch-Site: cross-site\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nAccept-Encoding: gzip, deflate, br\nAccept-Language: ja,en-US;q=0.9,en;q=0.8\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token level info keyword\&quot;\u003eINFO</span><span class=\&quot;token operator\&quot;>:</span>root<span class=\&quot;token operator\&quot;>:</span>GET request<span class=\&quot;token punctuation\&quot;>,</span>\n<span class=\&quot;token property\&quot;>Path:</span> <span class=\&quot;token file-path string\&quot;>/api</span>\n<span class=\&quot;token property\&quot;>Headers:</span>\n<span class=\&quot;token property\&quot;>Host:</span> localhost<span class=\&quot;token operator\&quot;>:</span><span class=\&quot;token number\&quot;>8080</span>\n<span class=\&quot;token property\&quot;>Connection:</span> keep<span class=\&quot;token operator\&quot;>-</span>alive\n<span class=\&quot;token property\&quot;>User-Agent:</span> Mozilla<span class=\&quot;token operator\&quot;>/</span><span class=\&quot;token number\&quot;>5.0</span> <span class=\&quot;token operator\&quot;>(</span>Windows NT <span class=\&quot;token number\&quot;>10.0</span><span class=\&quot;token operator\&quot;>;</span> Win64<span class=\&quot;token operator\&quot;>;</span> x64<span class=\&quot;token operator\&quot;>)</span> AppleWebKit<span class=\&quot;token operator\&quot;>/</span><span class=\&quot;token number\&quot;>537.36</span> <span class=\&quot;token operator\&quot;>(</span>KHTML<span class=\&quot;token punctuation\&quot;>,</span> like Gecko<span class=\&quot;token operator\&quot;>)</span> Chrome<span class=\&quot;token operator\&quot;>/</span><span class=\&quot;token number\&quot;>89.0.4389.90</span> Safari<span class=\&quot;token operator\&quot;>/</span><span class=\&quot;token number\&quot;>537.36</span> Edg<span class=\&quot;token operator\&quot;>/</span><span class=\&quot;token ip-address constant\&quot;>89.0.774.57</span>\n<span class=\&quot;token property\&quot;>Accept:</span> <span class=\&quot;token operator\&quot;>*</span><span class=\&quot;token operator\&quot;>/</span><span class=\&quot;token operator\&quot;>*</span>\n<span class=\&quot;token property\&quot;>Origin:</span> <span class=\&quot;token url\&quot;>https://blog.haniyama.com</span>\n<span class=\&quot;token property\&quot;>Sec-Fetch-Site:</span> cross<span class=\&quot;token operator\&quot;>-</span>site\n<span class=\&quot;token property\&quot;>Sec-Fetch-Mode:</span> cors\n<span class=\&quot;token property\&quot;>Sec-Fetch-Dest:</span> empty\n<span class=\&quot;token property\&quot;>Accept-Encoding:</span> gzip<span class=\&quot;token punctuation\&quot;>,</span> deflate<span class=\&quot;token punctuation\&quot;>,</span> br\n<span class=\&quot;token property\&quot;>Accept-Language:</span> ja<span class=\&quot;token punctuation\&quot;>,</span>en<span class=\&quot;token operator\&quot;>-</span>US<span class=\&quot;token operator\&quot;>;</span>q<span class=\&quot;token operator\&quot;>=</span><span class=\&quot;token number\&quot;>0.9</span><span class=\&quot;token punctuation\&quot;>,</span>en<span class=\&quot;token operator\&quot;>;</span>q<span class=\&quot;token operator\&quot;>=</span><span class=\&quot;token number\&quot;>0.8</span>\n&quot;}"><span class="token level info keyword">INFO</span><span class="token operator">:</span>root<span class="token operator">:</span>GET request<span class="token punctuation">,</span><span class="token property">Path:</span> <span class="token file-path string">/api</span><span class="token property">Headers:</span><span class="token property">Host:</span> localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token property">Connection:</span> keep<span class="token operator">-</span>alive<span class="token property">User-Agent:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token operator">(</span>Windows NT <span class="token number">10.0</span><span class="token operator">;</span> Win64<span class="token operator">;</span> x64<span class="token operator">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token operator">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token operator">)</span> Chrome<span class="token operator">/</span><span class="token number">89.0.4389.90</span> Safari<span class="token operator">/</span><span class="token number">537.36</span> Edg<span class="token operator">/</span><span class="token ip-address constant">89.0.774.57</span><span class="token property">Accept:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token property">Origin:</span> <span class="token url">https://blog.haniyama.com</span><span class="token property">Sec-Fetch-Site:</span> cross<span class="token operator">-</span>site<span class="token property">Sec-Fetch-Mode:</span> cors<span class="token property">Sec-Fetch-Dest:</span> empty<span class="token property">Accept-Encoding:</span> gzip<span class="token punctuation">,</span> deflate<span class="token punctuation">,</span> br<span class="token property">Accept-Language:</span> ja<span class="token punctuation">,</span>en<span class="token operator">-</span>US<span class="token operator">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>en<span class="token operator">;</span>q<span class="token operator">=</span><span class="token number">0.8</span></code></pre><p>ブラウザーの DevTools では、レスポンスの内容は見えない。</p><p><img src="/2021/04/24/cors/devtools01.png"></p><p>Fiddler (http なので WireShark でも) などの通信トレースを取得するツールで通信をみると、確かにブラウザーがレスポンスを受け取っていることがわかる。</p><pre class="language-http" style="" tabindex="0"><code id="456e913e" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;456e913e&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nHTTP/1.0 200 OK\nServer: BaseHTTP/0.6 Python/3.9.0\nDate: Mon, 22 Mar 2021 13:02:37 GMT\n\nGET request for /api,\n\nwith request headers: \nHost: localhost:8080\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.57\nAccept: */*\nOrigin: https://blog.haniyama.com\nSec-Fetch-Site: cross-site\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nAccept-Encoding: gzip, deflate, br\nAccept-Language: ja,en-US;q=0.9,en;q=0.8\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token response-status\&quot;\u003e<span class=\&quot;token http-version property\&quot;>HTTP/1.0</span> <span class=\&quot;token status-code number\&quot;>200</span> <span class=\&quot;token reason-phrase string\&quot;>OK</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Server</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>BaseHTTP/0.6 Python/3.9.0</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Date</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>Mon, 22 Mar 2021 13:02:37 GMT</span></span>\n\nGET request for /api,\n\nwith request headers: \n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Host</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>localhost:8080</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Connection</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>keep-alive</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>User-Agent</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.57</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>*/*</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Origin</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>https://blog.haniyama.com</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Site</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>cross-site</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Mode</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>cors</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Dest</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>empty</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept-Encoding</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>gzip, deflate, br</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept-Language</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>ja,en-US;q=0.9,en;q=0.8</span></span>\n&quot;}"><span class="token response-status"><span class="token http-version property">HTTP/1.0</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">BaseHTTP/0.6 Python/3.9.0</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Mon, 22 Mar 2021 13:02:37 GMT</span></span>GET request for /api,with request headers: <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">localhost:8080</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.57</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://blog.haniyama.com</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">cross-site</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">cors</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">empty</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">ja,en-US;q=0.9,en;q=0.8</span></span></code></pre><p>動かしてみればわかるが、ブラウザーはリクエストを送信し、レスポンスを受け取ったが、CORS を成功させるための条件を満たさなかったため、JavaScript へデータは渡さないことを選択した動作となっている。<br>CORS を判定するのは常にブラウザーであり、サーバー側でも JavaScript 側でもない。そのため、たとえば curl や Invoke-WebRequest など、ブラウザーではない API アクセスは問題なく成功する。</p><p>そして CORS を成功させるには、ブラウザーでも JavaScript でもなく、サーバー側を修正する必要がある。</p><p>※ ただし私の周りで起こる CORS の問題は、たいていサーバー側が何らかのエッジで、実際に修正ができないパターンのことが多い。というか仕組みを知っていれば当たり前なのだが、<a href="https://docs.microsoft.com/ja-jp/azure/active-directory/manage-apps/application-proxy-understand-cors-issues">事前認証が有効な Azure AD アプリケーション プロキシは CORS に対応していない。</a></p><h2 id="CORS-Step-1-Access-Control-Allow-Origin"><a href="#CORS-Step-1-Access-Control-Allow-Origin" class="headerlink" title="CORS Step 1 (Access-Control-Allow-Origin)"></a>CORS Step 1 (Access-Control-Allow-Origin)</h2><p>ということでサーバーサイドのコードを修正してみる。</p><pre class="language-python" style="" tabindex="0"><code id="39171e3f" class="language-python" data-prism-hydrate="{&quot;element&quot;:&quot;39171e3f&quot;,&quot;language&quot;:&quot;python&quot;,&quot;code&quot;:&quot;\nfrom http.server import BaseHTTPRequestHandler, ThreadingHTTPServer\nimport logging\n\&quot;\&quot;\&quot;\nVery simple HTTP server in python for logging requests (for python 3.7 or later)\nUsage::\n    ./server.py [\u003cport\u003e]\n\&quot;\&quot;\&quot;\n\nclass S(BaseHTTPRequestHandler):\n    def _set_response(self, custom_headers = {}):\n        self.send_response(200)\n        # add header\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;*\&quot;)\n        self.end_headers()\n\n    def do_GET(self):\n        logging.info(\&quot;GET request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;,\n                     str(self.path), str(self.headers))\n        self._set_response()\n        self.wfile.write(\&quot;GET request for {},\\n\\n with request headers: \\n {}\&quot;.format(\n            self.path, self.headers).encode(\u0027utf-8'))\n\ndef run(server_class=ThreadingHTTPServer, handler_class=S, port=8080):\n    logging.basicConfig(level=logging.INFO)\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    logging.info(\&quot;Starting httpd... port {}\\n\&quot;.format(str(port)))\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        pass\n    httpd.server_close()\n    logging.info('Stopping httpd...\\n')\n\n\nif __name__ == '__main__':\n    from sys import argv\n\n    if len(argv) == 2:\n        run(port=int(argv[1]))\n    else:\n        run()\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token keyword\&quot;>from</span> http<span class=\&quot;token punctuation\&quot;>.</span>server <span class=\&quot;token keyword\&quot;>import</span> BaseHTTPRequestHandler<span class=\&quot;token punctuation\&quot;>,</span> ThreadingHTTPServer\n<span class=\&quot;token keyword\&quot;>import</span> logging\n<span class=\&quot;token triple-quoted-string string\&quot;>\&quot;\&quot;\&quot;\nVery simple HTTP server in python for logging requests (for python 3.7 or later)\nUsage::\n    ./server.py [\u0026lt;port>]\n\&quot;\&quot;\&quot;</span>\n\n<span class=\&quot;token keyword\&quot;>class</span> <span class=\&quot;token class-name\&quot;>S</span><span class=\&quot;token punctuation\&quot;>(</span>BaseHTTPRequestHandler<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n    <span class=\&quot;token keyword\&quot;>def</span> <span class=\&quot;token function\&quot;>_set_response</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>,</span> custom_headers <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>send_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token number\&quot;>200</span><span class=\&quot;token punctuation\&quot;>)</span>\n        <span class=\&quot;token comment\&quot;># add header</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>send_header<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;Access-Control-Allow-Origin\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string\&quot;>\&quot;*\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>end_headers<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n    <span class=\&quot;token keyword\&quot;>def</span> <span class=\&quot;token function\&quot;>do_GET</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;GET request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n                     <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>_set_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>wfile<span class=\&quot;token punctuation\&quot;>.</span>write<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;GET request for {},\\n\\n with request headers: \\n {}\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span>\n            self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>,</span> self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span>encode<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'utf-8'</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n<span class=\&quot;token keyword\&quot;>def</span> <span class=\&quot;token function\&quot;>run</span><span class=\&quot;token punctuation\&quot;>(</span>server_class<span class=\&quot;token operator\&quot;>=</span>ThreadingHTTPServer<span class=\&quot;token punctuation\&quot;>,</span> handler_class<span class=\&quot;token operator\&quot;>=</span>S<span class=\&quot;token punctuation\&quot;>,</span> port<span class=\&quot;token operator\&quot;>=</span><span class=\&quot;token number\&quot;>8080</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n    logging<span class=\&quot;token punctuation\&quot;>.</span>basicConfig<span class=\&quot;token punctuation\&quot;>(</span>level<span class=\&quot;token operator\&quot;>=</span>logging<span class=\&quot;token punctuation\&quot;>.</span>INFO<span class=\&quot;token punctuation\&quot;>)</span>\n    server_address <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>''</span><span class=\&quot;token punctuation\&quot;>,</span> port<span class=\&quot;token punctuation\&quot;>)</span>\n    httpd <span class=\&quot;token operator\&quot;>=</span> server_class<span class=\&quot;token punctuation\&quot;>(</span>server_address<span class=\&quot;token punctuation\&quot;>,</span> handler_class<span class=\&quot;token punctuation\&quot;>)</span>\n    logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;Starting httpd... port {}\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>port<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n    <span class=\&quot;token keyword\&quot;>try</span><span class=\&quot;token punctuation\&quot;>:</span>\n        httpd<span class=\&quot;token punctuation\&quot;>.</span>serve_forever<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n    <span class=\&quot;token keyword\&quot;>except</span> KeyboardInterrupt<span class=\&quot;token punctuation\&quot;>:</span>\n        <span class=\&quot;token keyword\&quot;>pass</span>\n    httpd<span class=\&quot;token punctuation\&quot;>.</span>server_close<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n    logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'Stopping httpd...\\n'</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n\n<span class=\&quot;token keyword\&quot;>if</span> __name__ <span class=\&quot;token operator\&quot;>==</span> <span class=\&quot;token string\&quot;>'__main__'</span><span class=\&quot;token punctuation\&quot;>:</span>\n    <span class=\&quot;token keyword\&quot;>from</span> sys <span class=\&quot;token keyword\&quot;>import</span> argv\n\n    <span class=\&quot;token keyword\&quot;>if</span> <span class=\&quot;token builtin\&quot;>len</span><span class=\&quot;token punctuation\&quot;>(</span>argv<span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>==</span> <span class=\&quot;token number\&quot;>2</span><span class=\&quot;token punctuation\&quot;>:</span>\n        run<span class=\&quot;token punctuation\&quot;>(</span>port<span class=\&quot;token operator\&quot;>=</span><span class=\&quot;token builtin\&quot;>int</span><span class=\&quot;token punctuation\&quot;>(</span>argv<span class=\&quot;token punctuation\&quot;>[</span><span class=\&quot;token number\&quot;>1</span><span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n    <span class=\&quot;token keyword\&quot;>else</span><span class=\&quot;token punctuation\&quot;>:</span>\n        run<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}"><span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> BaseHTTPRequestHandler<span class="token punctuation">,</span> ThreadingHTTPServer<span class="token keyword">import</span> logging<span class="token triple-quoted-string string">"""Very simple HTTP server in python for logging requests (for python 3.7 or later)Usage::    ./server.py [&lt;port&gt;]"""</span><span class="token keyword">class</span> <span class="token class-name">S</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_set_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> custom_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token comment"># add header</span>        self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"GET request,\nPath: %s\nHeaders:\n%s\n"</span><span class="token punctuation">,</span>                     <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_set_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"GET request for {},\n\n with request headers: \n {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            self<span class="token punctuation">.</span>path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>server_class<span class="token operator">=</span>ThreadingHTTPServer<span class="token punctuation">,</span> handler_class<span class="token operator">=</span>S<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>    server_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>    httpd <span class="token operator">=</span> server_class<span class="token punctuation">(</span>server_address<span class="token punctuation">,</span> handler_class<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Starting httpd... port {}\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    httpd<span class="token punctuation">.</span>server_close<span class="token punctuation">(</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Stopping httpd...\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> sys <span class="token keyword">import</span> argv    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>これで先ほどと同じ fetch リクエストを送信してみる。</p><pre class="language-js" style="" tabindex="0"><code id="2072683d" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;2072683d&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step1\&quot;)\nPromise&nbsp;{\u003cpending\u003e}\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step1\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span>\nPromise <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token operator\&quot;>\u0026lt;</span>pending<span class=\&quot;token operator\&quot;>></span><span class=\&quot;token punctuation\&quot;>}</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step1"</span><span class="token punctuation">)</span>Promise <span class="token punctuation">{</span><span class="token operator">&lt;</span>pending<span class="token operator">&gt;</span><span class="token punctuation">}</span></code></pre><p>今度はエラーは起こらない。</p><pre class="language-js" style="" tabindex="0"><code id="5f9b743f" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;5f9b743f&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step1\&quot;).then(r =\u003e r.text()).then(data => console.log(data))\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step1\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>のようにすればレスポンスの内容が見えるはず。 <code>Access-Control-Allow-Origin: &quot;*&quot;</code> ヘッダーは CORS でのアクセスをサーバーがブラウザーに許可するヘッダーということ。</p><h2 id="CORS-Step-2-Access-Control-Allow-Headers"><a href="#CORS-Step-2-Access-Control-Allow-Headers" class="headerlink" title="CORS Step 2 (Access-Control-Allow-Headers)"></a>CORS Step 2 (Access-Control-Allow-Headers)</h2><p>無事に CORS の対応ができたので、次はデータの送信を行う API を作る。</p><pre class="language-python" style="" tabindex="0"><code id="50c0ad3d" class="language-python" data-prism-hydrate="{&quot;element&quot;:&quot;50c0ad3d&quot;,&quot;language&quot;:&quot;python&quot;,&quot;code&quot;:&quot;\n    def do_POST(self):\n        logging.info(\&quot;POST request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;,\n                     str(self.path), str(self.headers))\n\n        content_length = int(self.headers[\u0027Content-Length'])\n        post_data = self.rfile.read(content_length)\n        body = json.loads(post_data)\n\n        self._set_response()\n\n        res = json.dumps({\n            \&quot;status\&quot;: \&quot;ok\&quot;,\n            \&quot;message\&quot;: \&quot;hello {}\&quot;.format(body.get(\&quot;name\&quot;))\n        })\n        \n        self.wfile.write(res.encode('utf-8'))\n&quot;,&quot;highlightedCode&quot;:&quot;\n    \u003cspan class=\&quot;token keyword\&quot;\u003edef</span> <span class=\&quot;token function\&quot;>do_POST</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;POST request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n                     <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n        content_length <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token builtin\&quot;>int</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>[</span><span class=\&quot;token string\&quot;>'Content-Length'</span><span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>)</span>\n        post_data <span class=\&quot;token operator\&quot;>=</span> self<span class=\&quot;token punctuation\&quot;>.</span>rfile<span class=\&quot;token punctuation\&quot;>.</span>read<span class=\&quot;token punctuation\&quot;>(</span>content_length<span class=\&quot;token punctuation\&quot;>)</span>\n        body <span class=\&quot;token operator\&quot;>=</span> json<span class=\&quot;token punctuation\&quot;>.</span>loads<span class=\&quot;token punctuation\&quot;>(</span>post_data<span class=\&quot;token punctuation\&quot;>)</span>\n\n        self<span class=\&quot;token punctuation\&quot;>.</span>_set_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n        res <span class=\&quot;token operator\&quot;>=</span> json<span class=\&quot;token punctuation\&quot;>.</span>dumps<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span>\n            <span class=\&quot;token string\&quot;>\&quot;status\&quot;</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;ok\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n            <span class=\&quot;token string\&quot;>\&quot;message\&quot;</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;hello {}\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span>body<span class=\&quot;token punctuation\&quot;>.</span>get<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;name\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n        <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span>\n        \n        self<span class=\&quot;token punctuation\&quot;>.</span>wfile<span class=\&quot;token punctuation\&quot;>.</span>write<span class=\&quot;token punctuation\&quot;>(</span>res<span class=\&quot;token punctuation\&quot;>.</span>encode<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'utf-8'</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}">    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"POST request,\nPath: %s\nHeaders:\n%s\n"</span><span class="token punctuation">,</span>                     <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>        content_length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        post_data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span>content_length<span class="token punctuation">)</span>        body <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>post_data<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_set_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"hello {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>そして、POST するデータは JSON でこう送る。</p><pre class="language-js" style="" tabindex="0"><code id="81a7673f" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;81a7673f&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step2\&quot;, { method: \&quot;POST\&quot; , body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e r.text()).then(data => console.log(data))\n\n//{\&quot;status\&quot;: \&quot;ok\&quot;, \&quot;message\&quot;: \&quot;hello watahani\&quot;}\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step2\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n<span class=\&quot;token comment\&quot;>//{\&quot;status\&quot;: \&quot;ok\&quot;, \&quot;message\&quot;: \&quot;hello watahani\&quot;}</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//{"status": "ok", "message": "hello watahani"}</span></code></pre><p>すばらしい。Access-Control-Allow-Origin のおかげでうまく通信ができている。しかしながら、ここで Content-Type を “application&#x2F;json” で、Authorization ヘッダーにアクセストークンを含めて送ってほしいと要望があったため、以下のように追加するとまた謎のエラーが発生する。</p><pre class="language-js" style="" tabindex="0"><code id="c371b93e" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;c371b93e&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step2\&quot;, { method: \&quot;POST\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e r.text()).then(data => console.log(data))\n\n//Access to fetch at \u0027http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step2\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n<span class=\&quot;token comment\&quot;>//Access to fetch at 'http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Access to fetch at 'http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</span></code></pre><p>これは preflight request がパスしなかったというエラーだ。preflight request とは、単純リクエスト (simple request) ではない通信が発生する際に発生する “お伺い” であり、OPTIONS リクエストにより本来行うリクエストを送ってよい origin からの通信なのかを判別する機能、というのが私の理解。</p><p>一方で <a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS#simple_requests">単純リクエストの実際の条件</a> は MDN に纏まっているが、API 側に副作用を与えず認証を必要としない GET, HEAD リクエスト、ブラウザーに元来含まれている form post による通信が単純リクエスト、と私は理解している。</p><p>さて、これを解決するには Access-Control-Allow-Origin を <code>*</code> ではなく、fetch 元の Origin と一致させる必要がある。</p><pre class="language-diff" style="" tabindex="0"><code id="4a45ca3c" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;4a45ca3c&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n-        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;*\&quot;)\n+        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token deleted-sign deleted\&quot;\u003e<span class=\&quot;token prefix deleted\&quot;>-</span><span class=\&quot;token line\&quot;>        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;*\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span></span>&quot;}"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">        self.send_header("Access-Control-Allow-Origin", "*")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span></span></code></pre><p>また、OPTIONS リクエストを受け取れるように以下も追加する。</p><pre class="language-python" style="" tabindex="0"><code id="b949be3e" class="language-python" data-prism-hydrate="{&quot;element&quot;:&quot;b949be3e&quot;,&quot;language&quot;:&quot;python&quot;,&quot;code&quot;:&quot;\n    def do_OPTIONS(self):\n        logging.info(\&quot;OPTIONS request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;,\n                     str(self.path), str(self.headers))\n        self._set_response()\n\n        self.wfile.write(\&quot;OPTIONS request for {},\\n\\n with request headers:\\n{}\&quot;.format(\n            self.path, self.headers).encode(\u0027utf-8'))\n&quot;,&quot;highlightedCode&quot;:&quot;\n    \u003cspan class=\&quot;token keyword\&quot;\u003edef</span> <span class=\&quot;token function\&quot;>do_OPTIONS</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;OPTIONS request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n                     <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n        self<span class=\&quot;token punctuation\&quot;>.</span>_set_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n        self<span class=\&quot;token punctuation\&quot;>.</span>wfile<span class=\&quot;token punctuation\&quot;>.</span>write<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;OPTIONS request for {},\\n\\n with request headers:\\n{}\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span>\n            self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>,</span> self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span>encode<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'utf-8'</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}">    <span class="token keyword">def</span> <span class="token function">do_OPTIONS</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"OPTIONS request,\nPath: %s\nHeaders:\n%s\n"</span><span class="token punctuation">,</span>                     <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_set_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"OPTIONS request for {},\n\n with request headers:\n{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            self<span class="token punctuation">.</span>path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>この状態でもエラーが出る。</p><pre class="language-js" style="" tabindex="0"><code id="2d6fc03e" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;2d6fc03e&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step2\&quot;, { method: \&quot;POST\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e r.text()).then(data => console.log(data))\n\nPromise&nbsp;{\u003cpending>}\n\nAccess to fetch at \u0027http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Request header field content-type is not allowed by Access-Control-Allow-Headers in preflight response.\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step2\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\nPromise <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token operator\&quot;>\u0026lt;</span>pending<span class=\&quot;token operator\&quot;>></span><span class=\&quot;token punctuation\&quot;>}</span>\n\nAccess to fetch at <span class=\&quot;token string\&quot;>'http://localhost:8080/api/step2'</span> from origin <span class=\&quot;token string\&quot;>'https://blog.haniyama.com'</span> has been blocked by <span class=\&quot;token constant\&quot;>CORS</span> <span class=\&quot;token literal-property property\&quot;>policy</span><span class=\&quot;token operator\&quot;>:</span> Request header field content<span class=\&quot;token operator\&quot;>-</span>type is not allowed by Access<span class=\&quot;token operator\&quot;>-</span>Control<span class=\&quot;token operator\&quot;>-</span>Allow<span class=\&quot;token operator\&quot;>-</span>Headers <span class=\&quot;token keyword\&quot;>in</span> preflight response<span class=\&quot;token punctuation\&quot;>.</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>Promise <span class="token punctuation">{</span><span class="token operator">&lt;</span>pending<span class="token operator">&gt;</span><span class="token punctuation">}</span>Access to fetch at <span class="token string">'http://localhost:8080/api/step2'</span> from origin <span class="token string">'https://blog.haniyama.com'</span> has been blocked by <span class="token constant">CORS</span> <span class="token literal-property property">policy</span><span class="token operator">:</span> Request header field content<span class="token operator">-</span>type is not allowed by Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Headers <span class="token keyword">in</span> preflight response<span class="token punctuation">.</span></code></pre><p>カスタム ヘッダーを送信するためには、Access-Control-Allow-Headers を追加しろといっている。</p><p>プリフライト リクエストのヘッダーを見てみると <code>Access-Control-Request-Headers: authorization,content-type</code> の記載があり、API 側がこれらのヘッダーを許可するのであれば <code>Access-Control-Allow-Headers: authorization, content-type</code> を返さなければならない。</p><pre class="language-http" style="" tabindex="0"><code id="b3ba813e" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;b3ba813e&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nHost: localhost:8080\nConnection: keep-alive\nAccept: */*\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: authorization,content-type\nOrigin: https://blog.haniyama.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63\nSec-Fetch-Mode: cors\nSec-Fetch-Site: cross-site\nSec-Fetch-Dest: empty\nAccept-Encoding: gzip, deflate, br\nAccept-Language: ja,en-US;q=0.9,en;q=0.8\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>Host</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>localhost:8080</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Connection</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>keep-alive</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>*/*</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Access-Control-Request-Method</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>POST</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Access-Control-Request-Headers</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>authorization,content-type</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Origin</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>https://blog.haniyama.com</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>User-Agent</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Mode</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>cors</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Site</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>cross-site</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Dest</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>empty</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept-Encoding</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>gzip, deflate, br</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept-Language</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>ja,en-US;q=0.9,en;q=0.8</span></span>\n&quot;}"><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">localhost:8080</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span><span class="token header"><span class="token header-name keyword">Access-Control-Request-Method</span><span class="token punctuation">:</span> <span class="token header-value">POST</span></span><span class="token header"><span class="token header-name keyword">Access-Control-Request-Headers</span><span class="token punctuation">:</span> <span class="token header-value">authorization,content-type</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://blog.haniyama.com</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Edg/89.0.774.63</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">cors</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">cross-site</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">empty</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">ja,en-US;q=0.9,en;q=0.8</span></span></code></pre><p>ということで、以下のコードを追加する。</p><pre class="language-diff" style="" tabindex="0"><code id="5b22513e" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;5b22513e&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span></span></code></pre><p>これで無事にリクエストが通るようになる。ちなみに現時点だとワイルドカードによる指定でも問題ない。</p><pre class="language-diff" style="" tabindex="0"><code id="09349c3e" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;09349c3e&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n-       self.send_header(\&quot;Access-Control-Allow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n+       self.send_header(\&quot;Access-Control-Allow-Headers\&quot;, \&quot;*\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span></span><span class=\&quot;token deleted-sign deleted\&quot;><span class=\&quot;token prefix deleted\&quot;>-</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Headers\&quot;, \&quot;*\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       self.send_header("Access-Control-Allow-Headers", "Authorization, Content-Type")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       self.send_header("Access-Control-Allow-Headers", "*")</span></span></code></pre><h2 id="CORS-Step-3-Access-Control-Allow-Headers"><a href="#CORS-Step-3-Access-Control-Allow-Headers" class="headerlink" title="CORS Step 3 (Access-Control-Allow-Headers)"></a>CORS Step 3 (Access-Control-Allow-Headers)</h2><p>さて、POST メソッドができたところで Delete メソッドを受け付ける API も構成したいとのことで、Delete 用のメソッドをサーバー側に追加した。</p><pre class="language-python" style="" tabindex="0"><code id="46a8f33e" class="language-python" data-prism-hydrate="{&quot;element&quot;:&quot;46a8f33e&quot;,&quot;language&quot;:&quot;python&quot;,&quot;code&quot;:&quot;\n    def do_DELETE(self):\n        logging.info(\&quot;DELETE request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;,\n                     str(self.path), str(self.headers))\n\n        content_length = int(self.headers[\u0027Content-Length'])\n        post_data = self.rfile.read(content_length)\n        body = json.loads(post_data)\n\n        self._set_response()\n\n        res = json.dumps({\n            \&quot;status\&quot;: \&quot;ok\&quot;,\n            \&quot;message\&quot;: \&quot;deleted {}\&quot;.format(body.get(\&quot;name\&quot;))\n        })\n        \n        self.wfile.write(res.encode('utf-8'))\n&quot;,&quot;highlightedCode&quot;:&quot;\n    \u003cspan class=\&quot;token keyword\&quot;\u003edef</span> <span class=\&quot;token function\&quot;>do_DELETE</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>:</span>\n        logging<span class=\&quot;token punctuation\&quot;>.</span>info<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;DELETE request,\\nPath: %s\\nHeaders:\\n%s\\n\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n                     <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>path<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token builtin\&quot;>str</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n        content_length <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token builtin\&quot;>int</span><span class=\&quot;token punctuation\&quot;>(</span>self<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>[</span><span class=\&quot;token string\&quot;>'Content-Length'</span><span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>)</span>\n        post_data <span class=\&quot;token operator\&quot;>=</span> self<span class=\&quot;token punctuation\&quot;>.</span>rfile<span class=\&quot;token punctuation\&quot;>.</span>read<span class=\&quot;token punctuation\&quot;>(</span>content_length<span class=\&quot;token punctuation\&quot;>)</span>\n        body <span class=\&quot;token operator\&quot;>=</span> json<span class=\&quot;token punctuation\&quot;>.</span>loads<span class=\&quot;token punctuation\&quot;>(</span>post_data<span class=\&quot;token punctuation\&quot;>)</span>\n\n        self<span class=\&quot;token punctuation\&quot;>.</span>_set_response<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n        res <span class=\&quot;token operator\&quot;>=</span> json<span class=\&quot;token punctuation\&quot;>.</span>dumps<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span>\n            <span class=\&quot;token string\&quot;>\&quot;status\&quot;</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;ok\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n            <span class=\&quot;token string\&quot;>\&quot;message\&quot;</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;deleted {}\&quot;</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token builtin\&quot;>format</span><span class=\&quot;token punctuation\&quot;>(</span>body<span class=\&quot;token punctuation\&quot;>.</span>get<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;name\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n        <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span>\n        \n        self<span class=\&quot;token punctuation\&quot;>.</span>wfile<span class=\&quot;token punctuation\&quot;>.</span>write<span class=\&quot;token punctuation\&quot;>(</span>res<span class=\&quot;token punctuation\&quot;>.</span>encode<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'utf-8'</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}">    <span class="token keyword">def</span> <span class="token function">do_DELETE</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"DELETE request,\nPath: %s\nHeaders:\n%s\n"</span><span class="token punctuation">,</span>                     <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>        content_length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        post_data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span>content_length<span class="token punctuation">)</span>        body <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>post_data<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_set_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"deleted {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Step 2 でヘッダーの構成はすんでいるので、単純に DELETE リクエストを投げる。</p><pre class="language-js" style="" tabindex="0"><code id="45a7023f" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;45a7023f&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step2\&quot;, { method: \&quot;DELETE\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e r.text()).then(data => console.log(data))\n\n//Access to fetch at \u0027http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Method DELETE is not allowed by Access-Control-Allow-Methods in preflight response.\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step2\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;DELETE\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n\n<span class=\&quot;token comment\&quot;>//Access to fetch at 'http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Method DELETE is not allowed by Access-Control-Allow-Methods in preflight response.</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"DELETE"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Access to fetch at 'http://localhost:8080/api/step2' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Method DELETE is not allowed by Access-Control-Allow-Methods in preflight response.</span></code></pre><p>なるほど、今度は Access-Control-Allow-Methods ヘッダーに DELETE が含まれないため失敗してしまった。<br>実は POST, GET, HEAD のリクエストは CORS-safelisted Methods のため、後に説明する credentials mode が included ではない場合は暗黙的に許可される。しかし CORS-safelisted Methods ではない場合は Access-Control-Allow-Methods の指定が必要となる。</p><pre class="language-diff" style="" tabindex="0"><code id="8b184a3f" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;8b184a3f&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n        self.send_header(\&quot;Access-Control-Allow-Headers\&quot;, \&quot;*\&quot;)\n+       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;*\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Headers\&quot;, \&quot;*\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;*\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Headers", "*")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       self.send_header("Access-Control-Allow-Methods", "*")</span></span></code></pre><p>なお、credentials mode が include の場合、より制約が厳しくなり Access-Control-Allow-Headers や Access-Control-Allow-Methods で “*” によるワイルドカード指定はできなくなるため、以下のような指定が必要になる。</p><pre class="language-diff" style="" tabindex="0"><code id="2c023a3e" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;2c023a3e&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n        self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n+       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Alltoiuow-Headers", "Authorization, Content-Type")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       self.send_header("Access-Control-Allow-Methods", "POST, DELETE")</span></span></code></pre><h2 id="CORS-Step-4-Access-Control-Allow-Credentials"><a href="#CORS-Step-4-Access-Control-Allow-Credentials" class="headerlink" title="CORS Step 4 (Access-Control-Allow-Credentials)"></a>CORS Step 4 (Access-Control-Allow-Credentials)</h2><p>ということで次はリクエストに Cookie を含めたい場合の話。fetch の credentials オプションを “include” にすると、レスポンス ヘッダーに <code>Access-Control-Allow-Credentials: true</code> が必要になる。</p><pre class="language-javascript" style="" tabindex="0"><code id="0430413f" class="language-javascript" data-prism-hydrate="{&quot;element&quot;:&quot;0430413f&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step3\&quot;, { method: \&quot;POST\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, credentials: \&quot;include\&quot;, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e r.text()).then(data => console.log(data))\n//Access to fetch at \u0027http://localhost:8080/api/step3' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The value of the 'Access-Control-Allow-Credentials' header in the response is '' which must be 'true' when the request's credentials mode is 'include'.\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step3\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>credentials</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;include\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n<span class=\&quot;token comment\&quot;>//Access to fetch at 'http://localhost:8080/api/step3' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The value of the 'Access-Control-Allow-Credentials' header in the response is '' which must be 'true' when the request's credentials mode is 'include'.</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step3"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Access to fetch at 'http://localhost:8080/api/step3' from origin 'https://blog.haniyama.com' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The value of the 'Access-Control-Allow-Credentials' header in the response is '' which must be 'true' when the request's credentials mode is 'include'.</span></code></pre><p>ということで、以下を追加する。</p><pre class="language-diff" style="" tabindex="0"><code id="a934453e" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;a934453e&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n        self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n        self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n+       self.send_header(\&quot;Access-Control-Allow-Credentials\&quot;, \&quot;true\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Credentials\&quot;, \&quot;true\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Alltoiuow-Headers", "Authorization, Content-Type")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Methods", "POST, DELETE")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       self.send_header("Access-Control-Allow-Credentials", "true")</span></span></code></pre><pre class="language-javascript" style="" tabindex="0"><code id="c24d173f" class="language-javascript" data-prism-hydrate="{&quot;element&quot;:&quot;c24d173f&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step4\&quot;, { method: \&quot;POST\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, credentials: \&quot;include\&quot;, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e r.text()).then(data => console.log(data))\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step4\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>credentials</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;include\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> r<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>text</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>data</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step4"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>CORS で Cookie 付けたいシチュエーションっていうのが正直よくわかってないのだけど、 <code>app.example.com</code> と <code>api.example.com</code> で Cookie 共有してて送りたいみたいな時に使うのかな？あとはトラッキング用とか。<br>たぶん API 側の Set-Cookie は 3rd Party Cookie になるので拒否されると認識している。<br>(手元で試してみた限り Set-Cookie は一切きかない動き？)</p><h2 id="CORS-Step-5-Access-Control-Expose-Headers"><a href="#CORS-Step-5-Access-Control-Expose-Headers" class="headerlink" title="CORS Step 5 (Access-Control-Expose-Headers)"></a>CORS Step 5 (Access-Control-Expose-Headers)</h2><p>あまり興味がないのでサクッと。JavaScript から触れるヘッダーを指定する。</p><pre class="language-diff" style="" tabindex="0"><code id="07dcf43d" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;07dcf43d&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n        self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n        self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n        self.send_header(\&quot;Access-Control-Allow-Credentials\&quot;, \&quot;true\&quot;)\n+       self.send_header(\&quot;Access-Control-Expose-Headers\&quot;, \&quot;X-Exportable\&quot;)\n+       self.send_header(\&quot;X-Exportable\&quot;, \&quot;hogehoge\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Credentials\&quot;, \&quot;true\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Expose-Headers\&quot;, \&quot;X-Exportable\&quot;)\n</span><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;X-Exportable\&quot;, \&quot;hogehoge\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Alltoiuow-Headers", "Authorization, Content-Type")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Methods", "POST, DELETE")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Credentials", "true")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       self.send_header("Access-Control-Expose-Headers", "X-Exportable")</span><span class="token prefix inserted">+</span><span class="token line">       self.send_header("X-Exportable", "hogehoge")</span></span></code></pre><p>すると <code>X-Exportable</code> が JavaScript で読み取り可能になる。</p><pre class="language-javascript" style="" tabindex="0"><code id="7f05743f" class="language-javascript" data-prism-hydrate="{&quot;element&quot;:&quot;7f05743f&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;code&quot;:&quot;\nfetch(\&quot;http://localhost:8080/api/step5\&quot;, { method: \&quot;POST\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, credentials: \&quot;include\&quot;, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r =\u003e console.log(r.headers.get(\&quot;X-Exportable\&quot;)))\n// hogehoge\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step5\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>credentials</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;include\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>r<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>get</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;X-Exportable\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n<span class=\&quot;token comment\&quot;>// hogehoge</span>\n&quot;}"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step5"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"X-Exportable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// hogehoge</span></code></pre><h2 id="CORS-Step-6-Access-Control-Max-Age"><a href="#CORS-Step-6-Access-Control-Max-Age" class="headerlink" title="CORS Step 6 (Access-Control-Max-Age)"></a>CORS Step 6 (Access-Control-Max-Age)</h2><p>プリフライトリクエストの結果をキャッシュする秒数を定義する。</p><pre class="language-diff" style="" tabindex="0"><code id="27a77c3f" class="language-diff" data-prism-hydrate="{&quot;element&quot;:&quot;27a77c3f&quot;,&quot;language&quot;:&quot;diff&quot;,&quot;code&quot;:&quot;\n        self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n        self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n        self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n        self.send_header(\&quot;Access-Control-Allow-Credentials\&quot;, \&quot;true\&quot;)\n        self.send_header(\&quot;Access-Control-Expose-Headers\&quot;, \&quot;X-Exportable\&quot;)\n        self.send_header(\&quot;X-Exportable\&quot;, \&quot;hogehoge\&quot;)\n+       self.send_header(\&quot;Access-Control-Max-Age\&quot;, \&quot;10\&quot;)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token unchanged\&quot;\u003e<span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Origin\&quot;, \&quot;https://blog.haniyama.com\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Alltoiuow-Headers\&quot;, \&quot;Authorization, Content-Type\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Methods\&quot;, \&quot;POST, DELETE\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Allow-Credentials\&quot;, \&quot;true\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Expose-Headers\&quot;, \&quot;X-Exportable\&quot;)\n</span><span class=\&quot;token prefix unchanged\&quot;> </span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;X-Exportable\&quot;, \&quot;hogehoge\&quot;)\n</span></span><span class=\&quot;token inserted-sign inserted\&quot;><span class=\&quot;token prefix inserted\&quot;>+</span><span class=\&quot;token line\&quot;>       self.send_header(\&quot;Access-Control-Max-Age\&quot;, \&quot;10\&quot;)\n</span></span>&quot;}"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Origin", "https://blog.haniyama.com")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Alltoiuow-Headers", "Authorization, Content-Type")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Methods", "POST, DELETE")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Allow-Credentials", "true")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("Access-Control-Expose-Headers", "X-Exportable")</span><span class="token prefix unchanged"> </span><span class="token line">       self.send_header("X-Exportable", "hogehoge")</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       self.send_header("Access-Control-Max-Age", "10")</span></span></code></pre><p>無ければ毎回プリフライトリクエストのための OPTIONS リクエストが飛んでしまうため、重要なキャッシュ戦略。今の仕事だと気にすることがないのでさらっと。</p><pre class="language-javascript" style="" tabindex="0"><code id="75a1c63d" class="language-javascript" data-prism-hydrate="{&quot;element&quot;:&quot;75a1c63d&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;code&quot;:&quot;\nvar f = () =\u003e fetch(\&quot;http://localhost:8080/api/step6\&quot;, { method: \&quot;POST\&quot; , headers: {\&quot;Content-Type\&quot;: \&quot;application/json\&quot;, \&quot;Authorization\&quot;: \&quot;xxxxx\&quot;}, credentials: \&quot;include\&quot;, body: JSON.stringify({\&quot;name\&quot;: \&quot;watahani\&quot;})}).then(r => console.log(r.headers.get(\&quot;X-Exportable\&quot;)))\nvar timer = setInterval(f, 1000);\n// clearInterval(timer)\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token keyword\&quot;>var</span> <span class=\&quot;token function-variable function\&quot;>f</span> <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>=></span> <span class=\&quot;token function\&quot;>fetch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;http://localhost:8080/api/step6\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>method</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span> <span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>headers</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;Content-Type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;application/json\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string-property property\&quot;>\&quot;Authorization\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxxxx\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>credentials</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;include\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>body</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token constant\&quot;>JSON</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>stringify</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>{</span><span class=\&quot;token string-property property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>r</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>r<span class=\&quot;token punctuation\&quot;>.</span>headers<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>get</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;X-Exportable\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n<span class=\&quot;token keyword\&quot;>var</span> timer <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token function\&quot;>setInterval</span><span class=\&quot;token punctuation\&quot;>(</span>f<span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token number\&quot;>1000</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token comment\&quot;>// clearInterval(timer)</span>\n&quot;}"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/step6"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"X-Exportable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// clearInterval(timer)</span></code></pre><p>10 秒間はプリフライトリクエストがキャッシュされるので、プリフライトリクエストが飛ぶのは 10 秒に一回ぐらいになる。<br>Edge の DevTool だとプリフライトリクエストがすごくわかりやすいのでお勧め。</p><p><img src="/2021/04/24/cors/devtools02.png"></p><p>ということで、CORS について一通り手を動かして勉強してみた。<br>CORS はわかったけど、今度はサードパーティ Cookie の動きが良くわからんとなって、1 カ月ほど放置していたが、その辺はまた分かったら書き足すということで。</p><p>コードは Gist に上げておいたのでもし興味があれば動かしてみてください。</p><script src="https://gist.github.com/watahani/6c026b6899b2897bb57e947d3b1432d5.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近 CORS を改めて勉強したけど、やっぱり知識があいまいな部分があるので、一旦アウトプットとしてまとめておく。&lt;/p&gt;
    
    </summary>
    
    
      <category term="雑記" scheme="http://blog.haniyama.com/tags/%E9%9B%91%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>2021-01-14 めも</title>
    <link href="http://blog.haniyama.com/2021/01/14/202101/"/>
    <id>http://blog.haniyama.com/2021/01/14/202101/</id>
    <published>2021-01-14T14:02:00.000Z</published>
    <updated>2022-05-18T13:45:28.974Z</updated>
    
    <content type="html"><![CDATA[<p>早いもので 2020 年も終わり、新年が明けて半月が過ぎようとしている。ふと気づいたら、転職してちょうど丸 2 年ということに気づいた。</p><p>2020 年の振り返りもできていなかったので、ここいらで 2 年でやったこと、やりたかったこと、できなかったことをまとめていこうと思う。</p><p>特に誰のためになるわけでもなく、いわゆるチラ裏。チラ裏って言葉も死語になったのか全然聞かないっすね。</p><span id="more"></span><h2 id="2019-2020-振り返り"><a href="#2019-2020-振り返り" class="headerlink" title="2019-2020 振り返り"></a>2019-2020 振り返り</h2><p>丸 2 年、サポート エンジニアとして働いた。Non Tech な内容については、業務にかかわるので書きづらかったり纏まってなかったりなので、ひとまずやってきた技術分野についてまとめる。</p><h3 id="WebAuthn"><a href="#WebAuthn" class="headerlink" title="WebAuthn"></a>WebAuthn</h3><p>2019 年は、前職でゴリゴリやってた WebAuthn 関連の活動も続けており、もくもく会を開いたり技術同人誌出したりしていた。WebAuthn のアカウントリカバリーとかについてまとめてたのが、<a href="https://eprint.iacr.org/2020/1004">Cryptology ePrint</a> になってた。Cryptology ePrint っていうのがイマイチ位置づけがわかってないんだけど、暗号分野におけるそれなりに権威のある論文になってるって感じなんですかね。最近は全然手を付けておらず、停滞気味…。</p><h3 id="Azure-の機能と周辺技術"><a href="#Azure-の機能と周辺技術" class="headerlink" title="Azure の機能と周辺技術"></a>Azure の機能と周辺技術</h3><p>2019 年 1 月時点では、Azure AD について右も左もわからないままだったなあ…。Azure の機能としてメインでゴリゴリやってたのはこのあたり。</p><ul><li>条件付きアクセス ポリシー</li><li>AD FS</li><li>Azure AD アプリケーション プロキシ</li><li>OAuth, OIDC, サービス プリンシパル</li><li>MSAL (.Net&#x2F;Core&#x2F;Android&#x2F;js)</li><li>Azure AD B2C</li></ul><h4 id="条件付きアクセスの動作"><a href="#条件付きアクセスの動作" class="headerlink" title="条件付きアクセスの動作"></a>条件付きアクセスの動作</h4><p>Azure AD の中でもとっつきやすく、検証もしやすい条件付きアクセス ポリシーは現職のチームの中では、入門コンテンツとして存在する感がある。</p><p>しかし、条件付きアクセス ポリシーは Azure AD のコンポーネントのなかで中心となる機能の一つであるため、入門コンテンツとしても、より深い Azure AD の理解のためにもよいコンテンツ (?) だと思う。具体的には、検証を行う中で、テナントやユーザー、グループ、ゲスト ユーザーといった Azure AD の基礎知識を習得していける。また、 Azure AD で保護されたリソース、サービス プリンシパル、OAuth, OpenID Connect といった技術領域まで発展して学習ができるし、興味があれば Office 365 のアクセス制御と連携した学習も可能だと思う。</p><p>泥臭いポリシーの検証や動作確認は辛いこともあるが、条件付きアクセス ポリシーを極めるに当たり、Azure AD のさまざまなコンポーネントを理解できる。</p><p>ということで、Azure AD 勉強する人はぜひ条件付きアクセスから勉強しましょう？</p><h4 id="AD-FS-SAML-WS-Fed-WS-Trust-の基本とログ解析"><a href="#AD-FS-SAML-WS-Fed-WS-Trust-の基本とログ解析" class="headerlink" title="AD FS, SAML, WS-Fed, WS-Trust の基本とログ解析"></a>AD FS, SAML, WS-Fed, WS-Trust の基本とログ解析</h4><p>これはあまり語ることはないが、Windows サーバーをあまり触ったことのなかった私には、オンプレの Active Directory を立てることから勉強だった。いまだにオンプレの AD については知らないことだらけだが、まあ最低限 Kerberos などの認証系の基本的なコンポーネントについては理解ができているつもり。</p><p>SAML については AD FS や Azure AD の動作ベースでプロトコルの概要は理解した。たまーに OASIS の仕様を見に行くことがあったが、枯れた技術なので現状の動作が理解できれば十分だろうと思ってる。WS-Fed, WS-Trust ってのも元気に動いてることを知った。</p><p>AD FS については基礎動作や、基本的なログ解析については学習したが、最近あんまやってないのでほとんど忘れた。</p><h4 id="Azure-AD-Application-Proxy"><a href="#Azure-AD-Application-Proxy" class="headerlink" title="Azure AD Application Proxy"></a>Azure AD Application Proxy</h4><p>意外と厄介なやつで、なんかいろいろ苦労した覚えがある。AD FS とこいつのトラブル シューティングのためにパケット解析の基礎を習得した。あと意外と Web 標準系の RFC などを見る必要があり、その辺の技術が身についた気がする。</p><h3 id="OAuth-OIDC-サービス-プリンシパル"><a href="#OAuth-OIDC-サービス-プリンシパル" class="headerlink" title="OAuth, OIDC, サービス プリンシパル"></a>OAuth, OIDC, サービス プリンシパル</h3><p>2019 年の後半から、2020 年はほとんどこの辺の技術領域ばかり調べてた記憶がある。実際のところは RFC とかは斜め読みしかしておらず、Azure AD の実装しか見ていないのがイマイチなところ。Azure AD の実装にだけはやたら詳しくなったので、<a href="https://qiita.com/watahani/items/1f3f533097b7a15d6698">Qiita</a> とかチームのブログにポチポチアウトプットしてた。</p><h3 id="Azure-AD-B2C"><a href="#Azure-AD-B2C" class="headerlink" title="Azure AD B2C"></a>Azure AD B2C</h3><p>とにかく苦労したおもひで。とにかく当時はドキュメントが少なく、何をするにしてもエンジニアに聞くみたいな感じだったように思う。(私が始めた時より前はもっと無かったらしいのだが)</p><p>実は Stack Overflow を MS の開発陣がうろついてて、技術的なことは Stack Overflow で纏まってたりする。今はドキュメントも充実してきたので本当にうれしいし、ドキュメント作ってる人にマジ感謝である。とはいえ取っつきづらいところもあるので、その辺はまとめた記事をチームブログに書いたりした。</p><p>カスタム ポリシーは相変わらず非常に難しく、また、実際に要望がないと作ってみようとならないので、最近はさぼり気味。なんか個人宛に仕事くださいw</p><h4 id="MSAL-Net-x2F-Core-x2F-Android-x2F-js-x2F-Java"><a href="#MSAL-Net-x2F-Core-x2F-Android-x2F-js-x2F-Java" class="headerlink" title="MSAL (.Net&#x2F;Core&#x2F;Android&#x2F;js&#x2F;Java)"></a>MSAL (.Net&#x2F;Core&#x2F;Android&#x2F;js&#x2F;Java)</h4><p>MSAL は .Net, .Net Core, Android, msal.js (1.0&#x2F;2.0), Java なんかを動かした。OIDC のオプションや各種パラメータがどのように実装されているかについては大まかに理解したし、Android の Broker アプリの動作についても大体動作を舐めているが、このあたりは正直各言語やプラットフォームについて理解していないと厳しい部分があり、どこまで極めるかについては要検討。</p><h3 id="英語"><a href="#英語" class="headerlink" title="英語"></a>英語</h3><p>外資系企業に入れば多少はできるようになるやろうと思ったけど、半分は正解。ヒアリングはできるようになったけど、一方で全く喋れん。現職だと喋る機会も少ないので、その辺は自己投資でやっていかないとと思いながらまあ大してできてない。困らないと動かない。</p><p>公式ドキュメントは (個人の観測範囲では) よくなっていると思うが、フィードバックが必要な部分はまだまだあるので英語でゴリゴリ PR 書けるようになりたい。けど、ちょっと英語の公式ドキュメントを書くレベルの英語力が無いのが困ってるところ。日本語ならいいんですけどね…。<br>ちょっと英語とは話がそれるが、これは「やらなくても良い」仕事なんだけど、トータルなリターンを考えると「絶対やった方がいい」仕事なので、ドキュメントを直すことによるインセンティブが働くようになればなーと空想してる。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>個人的な興味の範囲で、暗号技術のすべて、プロフェッショナルSSL&#x2F;TLS あたりを読んだが、実装レベルで理解していない。暗号技術のすべてを読みながら .Net の勉強がてら実装してみようかなと思っている。ECDSA の周りももう一度再入門したいのだが、全然勉強が進んでおらず、ちょっと独学以外の勉強しようと輪読会なんかもやってたけど、あんまり思い通りにはならなかった。DID とかもそうだけど、実務で直接扱わない分野の勉強が全然進まないのがちょっと課題。強引に実務にする機会がないかは虎視眈々と狙っている。</p><p>あと、チームブログの立ち上げと運用をしているが、コミュニティ活動って建付けなので、ちょっとバランスが難しい。</p><h2 id="2021-年の豊富"><a href="#2021-年の豊富" class="headerlink" title="2021 年の豊富"></a>2021 年の豊富</h2><p>娘が生まれたのでワークライフバランス大事にいきたい。</p><p>真面目な話をすると、サポートの仕事を丸 2 年経験した感想としてもっとプロアクティブに動かないと業務過多で死ぬということ。ブログでのアウトプット以外の情報発信とか共有について、もうちっとロジカルに考えていかないと娘との時間を取れない気がしているので、その辺ますます注力したい。</p><p>しかし、子育ては本当に大変で、世の中のお父さんお母さんには頭が上がらない。たまたま育児休暇とリモートワークで妻と長く過ごすことができて、非常にいい経験になったのでその辺の話もまとめておきたいが、また別の機会に。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早いもので 2020 年も終わり、新年が明けて半月が過ぎようとしている。ふと気づいたら、転職してちょうど丸 2 年ということに気づいた。&lt;/p&gt;
&lt;p&gt;2020 年の振り返りもできていなかったので、ここいらで 2 年でやったこと、やりたかったこと、できなかったことをまとめていこうと思う。&lt;/p&gt;
&lt;p&gt;特に誰のためになるわけでもなく、いわゆるチラ裏。チラ裏って言葉も死語になったのか全然聞かないっすね。&lt;/p&gt;
    
    </summary>
    
    
      <category term="雑記" scheme="http://blog.haniyama.com/tags/%E9%9B%91%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>OpenID Connect の Shared Signals and Events</title>
    <link href="http://blog.haniyama.com/2020/12/09/oidc-sse-cape-risc/"/>
    <id>http://blog.haniyama.com/2020/12/09/oidc-sse-cape-risc/</id>
    <published>2020-12-09T10:38:29.000Z</published>
    <updated>2022-05-18T13:45:29.114Z</updated>
    
    <content type="html"><![CDATA[<p>本記事は <a href="https://qiita.com/advent-calendar/2020/iddance">Digital Identity技術勉強会 #iddance Advent Calendar 2020</a> 9日めの記事です。<br>最近プレビューとして実装された Azure AD の CAE という機能がある。</p><ul><li><a href="https://jpazureid.github.io/blog/azure-active-directory/moving-towards-real-time-policy-and-security-enforcement/">ポリシーとセキュリティのリアル タイムな適用に向けて | Japan Azure Identity Support Blog</a></li></ul><h2 id="何のための機能か"><a href="#何のための機能か" class="headerlink" title="何のための機能か"></a>何のための機能か</h2><p>もともと Azure AD で発行されるアクセス トークンは内包型トークンで、Azure AD の秘密鍵で署名されている。そのため RP はユーザーが提示したトークンについて、Azure AD に通信を行うことなく署名とクレームを検証することで正当性を確認できる。これは逆に言うとクライアントがトークンを一度取得すれば有効期限切れ (既定では 1 時間) まではリソースにアクセスし続けられる。</p><p>多くの場合この設計で問題となることは少ないが、以下のようなケースで問題となることがある。</p><span id="more"></span><ul><li><p>A. ユーザ状態の変化</p><ol><li>ある時点で有効なユーザーが、アクセス トークンを取得する。</li><li>次の時点で何らかの要因でユーザーが無効化されたが、発行されたトークンは無効化されないため RP へのアクセスが行える。</li></ol></li><li><p>B. 条件付きアクセスの判定</p><ol><li>条件付きアクセス (IdP 側のアクセス制御) で課せられた IP アドレス制御やデバイス状態の制御を突破する。</li><li>アクセス トークンの有効期限内であれば上記条件下以外の場所から、RP にアクセスできる。 </li></ol></li></ul><blockquote><p>その他にアクセス トークンが奪取されるシチュエーションなどもあるが、その場合 “それどころではない” パターンが多かろうなので特に考慮しない</p></blockquote><p>今までは Azure AD の仕組み上この動作を完全に防ぐことはできず、たとえ IdP 側で IP 制御をしていたとしても「認証済みのトークン」を機器ごと持ちだすことによる、外部ネットワークからのアクセスを許容するしかなかった。</p><p><strong>そもそも論として IP ベースのアクセスのみにすべてを任しており、社内アクセスが絶対に安全であるという境界ネットワークをベースとしたセキュリティを構成していることが問題</strong> でありデバイス ベースのアクセス許可や AIP (Azure Identity Protection) によるリスクベースのアクセスを構成すべきであるという話もある。</p><p>また、結局 RP への通知などが即時に行われるかというと技術的にも難しいし、<strong>完全に即時判定されるようになるかというとそうではないと思われる。</strong></p><p><strong>とはいえリスクを判断する材料/頻度が多いに越したことはなく、</strong> 継続的に RP 側でもアクセスを評価しよう、というのが Continuous Access Evaluation という機能である。</p><h2 id="CAE-の動作"><a href="#CAE-の動作" class="headerlink" title="CAE の動作"></a>CAE の動作</h2><p>現状、Azure AD に実装されている A, B の機能はおよそ以下のとおりである。</p><ul><li><a href="https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-continuous-access-evaluation">Continuous access evaluation in Azure AD | Microsoft Docs</a></li></ul><h3 id="A-ユーザ状態の変化"><a href="#A-ユーザ状態の変化" class="headerlink" title="A. ユーザ状態の変化"></a>A. ユーザ状態の変化</h3><p><img src="https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/media/concept-continuous-access-evaluation/user-revocation-event-flow.png" alt=""></p><ol><li>CAE に対応したクライアントがリフレッシュトークンを提示しアクセス トークンの取得を試みる。</li><li>Azure AD はリフレッシュトークンの有効性を検証し、アクセス トークンを発行する。</li><li>管理者がユーザーのセッションとリフレッシュトークンを無効化すると、その情報がイベントとして RP に配信される。</li><li>その後ユーザーは アクセス トークンを RP に提示する。</li><li>RP はイベントを基にトークンの有効性を検証し、リジェクトする。</li></ol><p>こちらのケースではユーザーの状態 (現時点では以下) が RP に配信される。</p><ul><li>ユーザー アカウントが削除または無効化される</li><li>ユーザーのパスワードが変更またはリセットされる</li><li>ユーザーの MFA が有効になる</li><li>管理者がユーザーのすべてのリフレッシュ トークンを明示的に無効にする</li><li>Azure AD Identity Protection によってユーザー リスクの上昇が検知される</li></ul><h3 id="B-条件付きアクセスの判定"><a href="#B-条件付きアクセスの判定" class="headerlink" title="B. 条件付きアクセスの判定"></a>B. 条件付きアクセスの判定</h3><p><img src="https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/media/concept-continuous-access-evaluation/user-condition-change-flow.png" alt=""></p><ol><li>CAE に対応したクライアントがリフレッシュトークンを提示し、アクセストークンを取得する。</li><li>Azure AD では条件付きアクセスの判定を行い、ブロックされなければアクセス トークンを発行する。</li><li>ユーザーは条件付きアクセスでブロックされるべき場所に移動する。この際アクセストークンの有効期限は切れていない。</li><li>クライアントは条件付きアクセスで許可されていない場所から、アクセストークンを RP に提示する。</li><li>RP はアクセストークンの有効性を検証し、さらに Azure AD から通知された条件付きアクセス アクセスで許可される IP アドレスからの通信かを判定する。この場合、条件付きアクセスでブロックされるべき場所からのアクセスなのでアクセストークンはリジェクトされる。</li></ol><p>こちらのケースでは、条件付きアクセスで対象の RP が許可される/ブロックされる IP アドレスとユーザーの組み合わせが配信されるものと考えられる。</p><h2 id="Shared-Signal-and-Events-Working-Group"><a href="#Shared-Signal-and-Events-Working-Group" class="headerlink" title="Shared Signal and Events Working Group"></a>Shared Signal and Events Working Group</h2><p>ブログからはこれらの機能が <a href="https://openid.net/wg/sse/">Shared Signal and Events Working Group</a> で CAEP (Continuous Access Evaluation Protocol) として標準化を進めていると公表されている。</p><p>B は明らかに独自の仕様っぽいが、標準化の範囲なのだろうか。残念ながら公開されている情報からはよくわからなかった。<br>というのも Azure AD の CAE は対応 RP が Exchange Online や SharePoint Online などの 1st Party 製アプリに限られており、IdP と RP がどのようなプロトコルで会話をしているかについては、外から見えないためだ。</p><h3 id="RISC"><a href="#RISC" class="headerlink" title="RISC"></a>RISC</h3><p>同様の機能として Mitigating Catastrophic Account Compromise (RISC) というのも提案されており、内容的には全く同じような感じで RP が IdP からのユーザーが Compromise されたなどの情報をサブスクライブして、通知された情報を基に RP 側のセッションを切断するなどのアクションが行える。</p><p>どうやら Google の実装がすでにあるようで、<a href="https://developers.google.com/identity/protocols/risc">Cross-Account Protection</a> に詳細なドキュメントがある。</p><p>通知は jwt の形で送信され、以下のように RP に対してアクセスしているユーザーの sub が通知されるようだ。</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"https://accounts.google.com/"</span><span class="token punctuation">,</span>  <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token string">"123456789-abcedfgh.apps.googleusercontent.com"</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1508184845</span><span class="token punctuation">,</span>  <span class="token property">"jti"</span><span class="token operator">:</span> <span class="token string">"756E69717565206964656E746966696572"</span><span class="token punctuation">,</span>  <span class="token property">"events"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"https://schemas.openid.net/secevent/risc/event-type/account-disabled"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"subject"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"subject_type"</span><span class="token operator">:</span> <span class="token string">"iss-sub"</span><span class="token punctuation">,</span>        <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"https://accounts.google.com/"</span><span class="token punctuation">,</span>        <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"7375626A656374"</span>      &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"hijacking"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>え、CAEP (A のパターン) と全く同じやん… とも思ったが、<a href="https://openid.net/2018/07/09/three-risc-implementers-drafts-approved/">RISC のほうがドラフトも出ており</a> なんとなく進んでいるような感じ。</p><p>events のタイプも<a href="https://openid.net/specs/openid-risc-event-types-1_0-ID1.htm">ドラフト</a> が出ており、以下のようなイベントが規定されている。</p><ul><li>2.1. Account Credential Change Required</li><li>2.2. Account Purged</li><li>2.3. Account Disabled</li><li>2.4. Account Enabled</li><li>2.5. Identifier Changed</li><li>2.6. Identifier Recycled</li><li>2.7. Opt Out<ul><li>2.7.1. Opt In</li><li>2.7.2. Opt Out Initiated</li><li>2.7.3. Opt Out Cancelled</li><li>2.7.4. Opt Out Effective</li></ul></li><li>2.8. Recovery Activated</li><li>2.9. Recovery Information Changed</li><li>2.10. Sessions Revoked</li></ul><p>このうち Google では、以下の events types に対応しているようであった。</p><ul><li>sessions-revoked</li><li>tokens-revoked</li><li>account-disabled</li><li>account-enabled</li><li>account-purged</li><li>account-credential-change-required</li><li>verification //RP との疎通確認用?</li></ul><p>それぞれのイベントの受信時に RP がとるべき <a href="https://developers.google.com/identity/protocols/risc#supported_event_types">アクションについてもまとめられている。</a></p><h3 id="RISC-と-CAEP-の違い"><a href="#RISC-と-CAEP-の違い" class="headerlink" title="RISC と CAEP の違い"></a>RISC と CAEP の違い</h3><p>ドラフトなどを眺めてみるとどちらかというと RISC は id_token によるユーザー認証の結果発行される RP のセッションを主眼に置いているように見える。<br>一方 CAEP はドラフトなどはないので Microsoft のドキュメントからの判断になるが RP のリソースへのアクセス (access_token) を主眼においているように書かれているように見える。</p><p>また、CAEP は名前の通り、継続的なアクセス評価で RISC は侵害された資格情報を利用した横方向の侵害の連鎖の阻止を主目的としているようだ。<br>目的が違うのはその通りなのだが、ユーザーの無効化、トークンの破棄、リスクイベントなどは、CAEP と RISC どちらも共通のような気がしておりなんで分かれているのかはイマイチ理解できなかった。</p><p>B の機能も CAEP に含むのであればずいぶん話が変わってくるが、公開されている情報からは CAEP の標準化活動については追うことができず、引き続きウォッチしていきたい。このあたり詳しい人いたら Twitter で教えてください。</p><p>細かい動作はそのうち試したらまたまとめようと思います。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本記事は &lt;a href=&quot;https://qiita.com/advent-calendar/2020/iddance&quot;&gt;Digital Identity技術勉強会 #iddance Advent Calendar 2020&lt;/a&gt; 9日めの記事です。&lt;br&gt;最近プレビューとして実装された Azure AD の CAE という機能がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jpazureid.github.io/blog/azure-active-directory/moving-towards-real-time-policy-and-security-enforcement/&quot;&gt;ポリシーとセキュリティのリアル タイムな適用に向けて | Japan Azure Identity Support Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;何のための機能か&quot;&gt;&lt;a href=&quot;#何のための機能か&quot; class=&quot;headerlink&quot; title=&quot;何のための機能か&quot;&gt;&lt;/a&gt;何のための機能か&lt;/h2&gt;&lt;p&gt;もともと Azure AD で発行されるアクセス トークンは内包型トークンで、Azure AD の秘密鍵で署名されている。そのため RP はユーザーが提示したトークンについて、Azure AD に通信を行うことなく署名とクレームを検証することで正当性を確認できる。これは逆に言うとクライアントがトークンを一度取得すれば有効期限切れ (既定では 1 時間) まではリソースにアクセスし続けられる。&lt;/p&gt;
&lt;p&gt;多くの場合この設計で問題となることは少ないが、以下のようなケースで問題となることがある。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OAuth" scheme="http://blog.haniyama.com/tags/OAuth/"/>
    
      <category term="OpenID Connect" scheme="http://blog.haniyama.com/tags/OpenID-Connect/"/>
    
  </entry>
  
  <entry>
    <title>YubiKey 5 シリーズで Azure AD のサービス プリンシパルの証明書認証する</title>
    <link href="http://blog.haniyama.com/2020/10/17/serviceprincipal-certauth-using-yubikey5/"/>
    <id>http://blog.haniyama.com/2020/10/17/serviceprincipal-certauth-using-yubikey5/</id>
    <published>2020-10-17T12:40:24.000Z</published>
    <updated>2022-05-18T13:45:29.116Z</updated>
    
    <content type="html"><![CDATA[<p>YubiKey 5 シリーズで Azure AD のサービス プリンシパルの証明書認証を試したのでメモ。</p><span id="more"></span><h2 id="元ネタ"><a href="#元ネタ" class="headerlink" title="元ネタ"></a>元ネタ</h2><p>土曜の昼におきたら EMS 勉強会なるもの TL で盛り上がっているので見ていたら、条件付きアクセスで管理者がロックアウトされて困ったという話があり、こういうのあればいいなーと思ったので作ってみる。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">条件付きアクセス Microsoft Graph API で叩けるようになったし、緊急解除ボタンとか作るの楽しそう。<a href="https://twitter.com/hashtag/jpemsug?src=hash&amp;ref_src=twsrc%5Etfw">#jpemsug</a> <a href="https://t.co/WvVDsaLkLu">pic.twitter.com/WvVDsaLkLu</a></p>&mdash; 82@はに (@watahani) <a href="https://twitter.com/watahani/status/1317353605867790336?ref_src=twsrc%5Etfw">October 17, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>緊急解除ボタンを作る。</p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/pose_button_osu.png" alt="いらすとや"></p><h2 id="問題点"><a href="#問題点" class="headerlink" title="問題点"></a>問題点</h2><p>Microsoft Graph API で <a href="https://docs.microsoft.com/ja-jp/graph/api/resources/conditionalaccesspolicy?view=graph-rest-1.0">条件付きアクセスが操作</a> できるようになったので、 緊急解除ボタンを作ること自体は簡単なのですが誰でも押せてしまうと困りますね。</p><p>うーん、資格情報を安全に保管できる素敵なデバイスはないかなぁ～？</p><p>証明書を保存できて、手ごろで丈夫なデバイス無いかな～？<br>.<br>.<br>.<br>.</p><p>はい、ありました。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=82p-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B07HBD71HL&linkId=f2bf005f94ac048773128cc9c094d7fb"></iframe><blockquote><p>宣伝したので指紋認証のできる YubiKey ください🤤🤤</p></blockquote><h2 id="YubiKey-に保存した証明書で、証明書認証がしたい"><a href="#YubiKey-に保存した証明書で、証明書認証がしたい" class="headerlink" title="YubiKey に保存した証明書で、証明書認証がしたい"></a>YubiKey に保存した証明書で、証明書認証がしたい</h2><p>YubiKey4, YubiKey5 シリーズは、Windows 上でスマートカードとして働く。Windows 10 の場合、minidriver も初めから入っているので、Service Principal の認証もできるんじゃない？と思ってやってみたら簡単にできたので、メモ。</p><h2 id="Azure-AD-に条件付きアクセス解除用のサービスプリンシパル-アプリ-を作る"><a href="#Azure-AD-に条件付きアクセス解除用のサービスプリンシパル-アプリ-を作る" class="headerlink" title="Azure AD に条件付きアクセス解除用のサービスプリンシパル (アプリ) を作る"></a>Azure AD に条件付きアクセス解除用のサービスプリンシパル (アプリ) を作る</h2><p>まずは、条件付きアクセス解除用のサービス プリンシパルを作る。サービスプリンシパルについては<a href="https://qiita.com/watahani/items/1f3f533097b7a15d6698">以前 Qiita で書いたので</a>さっくりと。</p><h3 id="アプリの作成"><a href="#アプリの作成" class="headerlink" title="アプリの作成"></a>アプリの作成</h3><p><code>Azure Active Directory</code> &gt; <code>アプリの登録</code> &gt; <code>新しいアプリ</code></p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/newapp.png"></p><p>全てデフォルトで登録。</p><h3 id="API-のアクセス許可"><a href="#API-のアクセス許可" class="headerlink" title="API のアクセス許可"></a>API のアクセス許可</h3><p>サービス プリンシパルで条件付きアクセスを操作するには、アプリケーション権限の <code>Policy.Read.All</code>, <code>Policy.ReadWrite.ConditionalAccess</code>, <code>Application.Read.All</code> が必要。</p><p><code>アクセス許可の追加</code> から Microsoft Graph API を選び、「アプリケーション権限」で、上記 3 つの権限を追加する。その後、「&lt;テナント名&gt;にアクセス許可を追加します」をクリックし、Admin Consent を実施する。</p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/api-permissions.png"></p><h2 id="YubiKey-のセットアップ"><a href="#YubiKey-のセットアップ" class="headerlink" title="YubiKey のセットアップ"></a>YubiKey のセットアップ</h2><p>その後、おもむろに YubiKey 5 を PC に刺して、以下のコマンドを実行する。</p><pre class="language-powershell" style="" tabindex="0"><code id="3a92693f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;3a92693f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\n$currentDate = Get-Date\n$notAfter  = $currentDate.AddYears(10)\n$selfCert = New-SelfSignedCertificate -CertStoreLocation cert:\\CurrentUser\\my -Subject \&quot;CN=d22351ce-beb5-4e41-8346-3a7d99db934,OU=ConditionalAccessUnlocker\&quot;  -Provider \&quot;Microsoft Base Smart Card Crypto Provider\&quot; -KeySpec Signature -NotAfter $notAfter\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token variable\&quot;\u003e$currentDate</span> = <span class=\&quot;token function\&quot;>Get-Date</span>\n<span class=\&quot;token variable\&quot;>$notAfter</span>  = <span class=\&quot;token variable\&quot;>$currentDate</span><span class=\&quot;token punctuation\&quot;>.</span>AddYears<span class=\&quot;token punctuation\&quot;>(</span>10<span class=\&quot;token punctuation\&quot;>)</span>\n<span class=\&quot;token variable\&quot;>$selfCert</span> = <span class=\&quot;token function\&quot;>New-SelfSignedCertificate</span> <span class=\&quot;token operator\&quot;>-</span>CertStoreLocation cert:\\CurrentUser\\my <span class=\&quot;token operator\&quot;>-</span>Subject <span class=\&quot;token string\&quot;>\&quot;CN=d22351ce-beb5-4e41-8346-3a7d99db934,OU=ConditionalAccessUnlocker\&quot;</span>  <span class=\&quot;token operator\&quot;>-</span>Provider <span class=\&quot;token string\&quot;>\&quot;Microsoft Base Smart Card Crypto Provider\&quot;</span> <span class=\&quot;token operator\&quot;>-</span>KeySpec Signature <span class=\&quot;token operator\&quot;>-</span>NotAfter <span class=\&quot;token variable\&quot;>$notAfter</span>\n&quot;}"><span class="token variable">$currentDate</span> = <span class="token function">Get-Date</span><span class="token variable">$notAfter</span>  = <span class="token variable">$currentDate</span><span class="token punctuation">.</span>AddYears<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token variable">$selfCert</span> = <span class="token function">New-SelfSignedCertificate</span> <span class="token operator">-</span>CertStoreLocation cert:\CurrentUser\my <span class="token operator">-</span>Subject <span class="token string">"CN=d22351ce-beb5-4e41-8346-3a7d99db934,OU=ConditionalAccessUnlocker"</span>  <span class="token operator">-</span>Provider <span class="token string">"Microsoft Base Smart Card Crypto Provider"</span> <span class="token operator">-</span>KeySpec Signature <span class="token operator">-</span>NotAfter <span class="token variable">$notAfter</span></code></pre><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/new-selfsigncertificate.png" alt="PIN"></p><blockquote><p>証明書の作法はあまり分からないけど、AppId を Subject に入れとけば便利そう。<br>スクリーンショットはテスト中のなので、DNS で設定してる。</p></blockquote><p>PIN を要求されるので、YubiKey 5 の PIN を入れる。Azure AD などで FIDO2 で使っている場合は共通なので、それを入れる。初めて使う場合は好きな PIN を入れる。</p><p>上記コマンドで YubiKey 上に自己証明書が保存される。YubiKey Manager で見るとこんな感じで 9a スロットに証明書が保存されているのが分かる。</p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/yubikey-manager.png"></p><p><code>certutil</code> でも確認できる。</p><pre class="language-powershell" style="" tabindex="0"><code id="f947843e" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;f947843e&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\ncertutil -scinfo\n&quot;,&quot;highlightedCode&quot;:&quot;\ncertutil \u003cspan class=\&quot;token operator\&quot;\u003e-</span>scinfo\n&quot;}">certutil <span class="token operator">-</span>scinfo</code></pre><p>削除するコマンドもメモっておく。</p><pre class="language-powershell" style="" tabindex="0"><code id="4af8693f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;4af8693f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\n certutil -delkey -csp \&quot;Microsoft Base Smart Card Crypto Provider\&quot; \&quot;te-4d4c1e9d-2c00-4995-9396-4014ef5a281d\&quot; #キーコンテナ名は -scinfo で出てきたやつ\n&quot;,&quot;highlightedCode&quot;:&quot;\n certutil \u003cspan class=\&quot;token operator\&quot;\u003e-</span>delkey <span class=\&quot;token operator\&quot;>-</span>csp <span class=\&quot;token string\&quot;>\&quot;Microsoft Base Smart Card Crypto Provider\&quot;</span> <span class=\&quot;token string\&quot;>\&quot;te-4d4c1e9d-2c00-4995-9396-4014ef5a281d\&quot;</span> <span class=\&quot;token comment\&quot;>#キーコンテナ名は -scinfo で出てきたやつ</span>\n&quot;}"> certutil <span class="token operator">-</span>delkey <span class="token operator">-</span>csp <span class="token string">"Microsoft Base Smart Card Crypto Provider"</span> <span class="token string">"te-4d4c1e9d-2c00-4995-9396-4014ef5a281d"</span> <span class="token comment">#キーコンテナ名は -scinfo で出てきたやつ</span></code></pre><p>以下のコマンドで証明書を出力する。</p><pre class="language-powershell" style="" tabindex="0"><code id="87b04a3f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;87b04a3f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\n$cerfile = \&quot;.\\ConditionalAccessUnlocker.cer\&quot;\nExport-Certificate -Cert $cert -FilePath $cerfile\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token variable\&quot;\u003e$cerfile</span> = <span class=\&quot;token string\&quot;>\&quot;.\\ConditionalAccessUnlocker.cer\&quot;</span>\n<span class=\&quot;token function\&quot;>Export-Certificate</span> <span class=\&quot;token operator\&quot;>-</span>Cert <span class=\&quot;token variable\&quot;>$cert</span> <span class=\&quot;token operator\&quot;>-</span>FilePath <span class=\&quot;token variable\&quot;>$cerfile</span>\n&quot;}"><span class="token variable">$cerfile</span> = <span class="token string">".\ConditionalAccessUnlocker.cer"</span><span class="token function">Export-Certificate</span> <span class="token operator">-</span>Cert <span class="token variable">$cert</span> <span class="token operator">-</span>FilePath <span class="token variable">$cerfile</span></code></pre><blockquote><p>Note:<br> この辺動かないときは、もしかするとこの辺のレジストリが設定されているかもしれない。<br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/ff404287(v=ws.10)">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/ff404287(v=ws.10)</a></p></blockquote><h3 id="証明書のアップロード"><a href="#証明書のアップロード" class="headerlink" title="証明書のアップロード"></a>証明書のアップロード</h3><p>Azure ポータルに戻って、作ったアプリの <code>証明書とシークレット</code> を選択し、先ほどエクスポートした証明書、 <code>ConditionalAccessUnlocker.cer</code> をアップロードする。</p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/cert.png"></p><h2 id="Azure-AD-PowerShell-Module-で条件付きアクセスを操作"><a href="#Azure-AD-PowerShell-Module-で条件付きアクセスを操作" class="headerlink" title="Azure AD PowerShell Module で条件付きアクセスを操作"></a>Azure AD PowerShell Module で条件付きアクセスを操作</h2><h3 id="PowerShell-Module-のインストール"><a href="#PowerShell-Module-のインストール" class="headerlink" title="PowerShell Module のインストール"></a>PowerShell Module のインストール</h3><p>Azure AD PowerShell Module v2 の Version <code>2.0.2.106</code> 以上をインストールする。</p><pre class="language-powershell" style="" tabindex="0"><code id="d685373f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;d685373f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\nInstall-Module -Name AzureAD -Force\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;\u003eInstall-Module</span> <span class=\&quot;token operator\&quot;>-</span>Name AzureAD <span class=\&quot;token operator\&quot;>-</span>Force\n&quot;}"><span class="token function">Install-Module</span> <span class="token operator">-</span>Name AzureAD <span class="token operator">-</span>Force</code></pre><h3 id="作成したサービス-プリンシパルの権限でサインイン"><a href="#作成したサービス-プリンシパルの権限でサインイン" class="headerlink" title="作成したサービス プリンシパルの権限でサインイン"></a>作成したサービス プリンシパルの権限でサインイン</h3><p>さっき作成した証明書を読み込んで、作成したサービス プリンシパルの権限でサインインする。</p><pre class="language-powershell" style="" tabindex="0"><code id="0a3f213f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;0a3f213f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\n$cert = Get-ChildItem Cert:\\CurrentUser\\My\\ | ?{ $_.Subject -like \&quot;*OU=ConditionalAccessUnlocker*\&quot;} ; $cert\n$appId = $cert.Subject.Split(\&quot;,\&quot;)[0].Split(\&quot;=\&quot;)[1]\n\nConnect-AzureAD -TenantId $tenantId -ApplicationId $appId -CertificateThumbprint $cert.Thumbprint\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token variable\&quot;\u003e$cert</span> = <span class=\&quot;token function\&quot;>Get-ChildItem</span> Cert:\\CurrentUser\\My\\ <span class=\&quot;token punctuation\&quot;>|</span> ?<span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token variable\&quot;>$_</span><span class=\&quot;token punctuation\&quot;>.</span>Subject <span class=\&quot;token operator\&quot;>-like</span> <span class=\&quot;token string\&quot;>\&quot;*OU=ConditionalAccessUnlocker*\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span> <span class=\&quot;token punctuation\&quot;>;</span> <span class=\&quot;token variable\&quot;>$cert</span>\n<span class=\&quot;token variable\&quot;>$appId</span> = <span class=\&quot;token variable\&quot;>$cert</span><span class=\&quot;token punctuation\&quot;>.</span>Subject<span class=\&quot;token punctuation\&quot;>.</span>Split<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;,\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>[</span>0<span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>.</span>Split<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;=\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>[</span>1<span class=\&quot;token punctuation\&quot;>]</span>\n\n<span class=\&quot;token function\&quot;>Connect-AzureAD</span> <span class=\&quot;token operator\&quot;>-</span>TenantId <span class=\&quot;token variable\&quot;>$tenantId</span> <span class=\&quot;token operator\&quot;>-</span>ApplicationId <span class=\&quot;token variable\&quot;>$appId</span> <span class=\&quot;token operator\&quot;>-</span>CertificateThumbprint <span class=\&quot;token variable\&quot;>$cert</span><span class=\&quot;token punctuation\&quot;>.</span>Thumbprint\n&quot;}"><span class="token variable">$cert</span> = <span class="token function">Get-ChildItem</span> Cert:\CurrentUser\My\ <span class="token punctuation">|</span> ?<span class="token punctuation">{</span> <span class="token variable">$_</span><span class="token punctuation">.</span>Subject <span class="token operator">-like</span> <span class="token string">"*OU=ConditionalAccessUnlocker*"</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token variable">$cert</span><span class="token variable">$appId</span> = <span class="token variable">$cert</span><span class="token punctuation">.</span>Subject<span class="token punctuation">.</span>Split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">.</span>Split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token function">Connect-AzureAD</span> <span class="token operator">-</span>TenantId <span class="token variable">$tenantId</span> <span class="token operator">-</span>ApplicationId <span class="token variable">$appId</span> <span class="token operator">-</span>CertificateThumbprint <span class="token variable">$cert</span><span class="token punctuation">.</span>Thumbprint</code></pre><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/connect-azuread.png"></p><p>PIN を聞かれるので、YubiKey の PIN を入力する。</p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/get-policy.png"></p><p>サインインできるので、後はポリシーを操作するコマンドをポチポチ叩いて解除すれば…</p><p><img src="/2020/10/17/serviceprincipal-certauth-using-yubikey5/disable-policy.png"></p><p><strong>あれ… うまく動かない…。</strong> 😅</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p><del>削除は上手く動いたので、緊急時は Remove-AzureADMSConditionalAccessPolicy でブロックされてるポリシーを削除するなりしてください。</del></p><p>いつの間にか治ってました。</p><pre class="language-powershell" style="" tabindex="0"><code id="6776693f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;6776693f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\nGet-AzureADMSConditionalAccessPolicy | %{ Set-AzureADMSConditionalAccessPolicy -PolicyId $_.Id -State \&quot;disabled\&quot;}\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;\u003eGet-AzureADMSConditionalAccessPolicy</span> <span class=\&quot;token punctuation\&quot;>|</span> <span class=\&quot;token operator\&quot;>%</span><span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token function\&quot;>Set-AzureADMSConditionalAccessPolicy</span> <span class=\&quot;token operator\&quot;>-</span>PolicyId <span class=\&quot;token variable\&quot;>$_</span><span class=\&quot;token punctuation\&quot;>.</span>Id <span class=\&quot;token operator\&quot;>-</span>State <span class=\&quot;token string\&quot;>\&quot;disabled\&quot;</span><span class=\&quot;token punctuation\&quot;>}</span>\n&quot;}"><span class="token function">Get-AzureADMSConditionalAccessPolicy</span> <span class="token punctuation">|</span> <span class="token operator">%</span><span class="token punctuation">{</span> <span class="token function">Set-AzureADMSConditionalAccessPolicy</span> <span class="token operator">-</span>PolicyId <span class="token variable">$_</span><span class="token punctuation">.</span>Id <span class="token operator">-</span>State <span class="token string">"disabled"</span><span class="token punctuation">}</span></code></pre><p>これで、緊急時に YubiKey があれば条件付きアクセスを削除してテナントに入れるようになったので、安心して条件付きアクセスの実験が出来ますね。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Azure-Samples/azure-ad-conditional-access-apis/tree/main/01-configure/powershell">azure-ad-conditional-access-apis&#x2F;01-configure&#x2F;powershell at main · Azure-Samples&#x2F;azure-ad-conditional-access-apis</a></li><li><a href="https://docs.microsoft.com/en-us/graph/api/resources/conditionalaccesspolicy?view=graph-rest-1.0">Use query parameters to customize responses - Microsoft Graph | Microsoft Docs</a></li><li><a href="https://pivkey.zendesk.com/hc/en-us/articles/204519855-Deleting-a-Certificate-and-Keys-using-Certutil">Deleting a Certificate and Keys using Certutil – Taglio PIVKey</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;YubiKey 5 シリーズで Azure AD のサービス プリンシパルの証明書認証を試したのでメモ。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure AD" scheme="http://blog.haniyama.com/tags/Azure-AD/"/>
    
      <category term="YubiKey" scheme="http://blog.haniyama.com/tags/YubiKey/"/>
    
  </entry>
  
  <entry>
    <title>OneNote から Markdown に変換メモ</title>
    <link href="http://blog.haniyama.com/2020/10/09/onenote-to-markdown/"/>
    <id>http://blog.haniyama.com/2020/10/09/onenote-to-markdown/</id>
    <published>2020-10-09T13:05:24.000Z</published>
    <updated>2022-05-18T13:45:29.115Z</updated>
    
    <content type="html"><![CDATA[<p>OneNote から Markdown に変換する必要があったので手順をメモ。</p><p>もともとは @azu さんの <a href="https://efcl.info/2020/05/23/onenote-to-markdown/">OneNoteのデータを画像付きのMarkdownにexportする | Web Scratch</a> を試そうと思ったけど、企業の OneNote では上手く動かなかったので、以下の gist を参考に pandoc で変換した。</p><p>参考: <a href="https://gist.github.com/heardk/ded40b72056cee33abb18f3724e0a580">https://gist.github.com/heardk/ded40b72056cee33abb18f3724e0a580</a></p><p>数ページを変換するだけだったので、これで済んだけど、大量にするときは、別の方法のほうがいいかもしれない。</p><span id="more"></span><ol><li>OneNote 2016 で、OneNote のページから Word に変換する。 (Store 版でどうやるかは知らない)</li><li>pandoc をインストール</li></ol><pre class=" language-sh"><code class="language-sh">scoop install pandoc</code></pre><ol start="3"><li>以下コマンドで変換</li></ol><pre class=" language-sh"><code class="language-sh">pandoc.exe -f docx -t markdown_strict -i word.docx -o "word.md" --wrap=none --atx-headers</code></pre><ol start="4"><li>Word ファイルから画像ファイルを取り出し</li></ol><pre class=" language-ps1"><code class="language-ps1">7z x .\seo.docx -otmpmv tmp\word\media .\mediarm -Recurse -Force .\tmp</code></pre><ol start="5"><li>画像タグを変換</li></ol><p><code>&lt;img src=&quot;media/(.+?)&quot; .+? /&gt;</code> =&gt; <code>![$1](./media/$1)</code></p><p>後は体裁を整えて完了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OneNote から Markdown に変換する必要があったので手順をメモ。&lt;/p&gt;
&lt;p&gt;もともとは @azu さんの &lt;a href=&quot;https://efcl.info/2020/05/23/onenote-to-markdown/&quot;&gt;OneNoteのデータを画像付きのMarkdownにexportする | Web Scratch&lt;/a&gt; を試そうと思ったけど、企業の OneNote では上手く動かなかったので、以下の gist を参考に pandoc で変換した。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://gist.github.com/heardk/ded40b72056cee33abb18f3724e0a580&quot;&gt;https://gist.github.com/heardk/ded40b72056cee33abb18f3724e0a580&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数ページを変換するだけだったので、これで済んだけど、大量にするときは、別の方法のほうがいいかもしれない。&lt;/p&gt;
    
    </summary>
    
    
      <category term="雑記" scheme="http://blog.haniyama.com/tags/%E9%9B%91%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD External Identity のセルフ サインアップと API コネクター</title>
    <link href="http://blog.haniyama.com/2020/09/27/aad-external-identity-api-connector/"/>
    <id>http://blog.haniyama.com/2020/09/27/aad-external-identity-api-connector/</id>
    <published>2020-09-27T13:17:58.000Z</published>
    <updated>2022-05-18T13:45:28.975Z</updated>
    
    <content type="html"><![CDATA[<p>Azure AD の B2B 機能、つまり、社外ユーザーとのコラボレーション機能がどんどん Azure AD B2C っぽくなっている。ということで、今回は Azure AD External Identity のセルフ サインアップ と API コネクターを触ってみたのでそのメモ。</p><!-- more  --><ul><li>公式ドキュメント: <a href="https://docs.microsoft.com/en-us/azure/active-directory/external-identities/self-service-sign-up-add-api-connector">Add API connectors to self-service sign-up flows - Azure AD | Microsoft Docs</a></li><li>公式ブログ: <a href="https://techcommunity.microsoft.com/t5/azure-active-directory-identity/evolving-azure-ad-for-every-user-and-any-identity-with-external/ba-p/1257361">Evolving Azure AD for every user and any identity with External Identities - Microsoft Tech Community</a></li></ul><h2 id="セルフサービス-サインアップ"><a href="#セルフサービス-サインアップ" class="headerlink" title="セルフサービス サインアップ"></a>セルフサービス サインアップ</h2><p>とりあえずどういう機能かというと、その名の通り会社のテナントにゲスト ユーザーが自分でサインアップできる機能で、ユーザーがサインアップするためのユーザーフローと、検証の為の API コネクターを組み合わせて構成されている。</p><p>同じ名前で呼ばれる Azure AD の機能で、Azure AD に未登録なドメインで Power BI などにサインアップすると自動で作成される <a href="https://qiita.com/Shinya-Yamaguchi/items/cb1942c51eda2dba31ff">“セルフサービス サインアップ テナント” と呼ばれる、一部のユーザーからは諸悪の根源のごとく嫌われるやつ</a>がいるが、それとは全く違う機能なので気を付けて欲しい。</p><p>大まかな流れはこんな感じ。通常は緑のフロー (メール招待) でゲストを招待するが、オレンジのフローがセルフ サインアップ フロー。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/b2b-flow.png"></p><h3 id="そもそも-B2B-って？"><a href="#そもそも-B2B-って？" class="headerlink" title="そもそも B2B って？"></a>そもそも B2B って？</h3><p>まず、Azure AD のゲストユーザー機能を知らない人のために、少しだけ説明する。そもそも Azure AD では外部テナントユーザー、Microsoft Account (MSA いわゆる個人アカウント) を “ゲスト ユーザー” として招待できる。<br>例えば協力会社のエンジニアをゲスト ユーザーとして招待させて作業をさせるだとか、外部ユーザーに Office 365 のリソースやら SharePoint やら連携アプリやらを使わせるために使える。</p><h3 id="B2B-のしくみ"><a href="#B2B-のしくみ" class="headerlink" title="B2B のしくみ"></a>B2B のしくみ</h3><p>実際企業がどのように使っているか、ってことは正直よくわからないが、要は外部の IdP とフェデレーションを構成する機能である。招待されたユーザーが、どのような形でフェデレーションを構成するかは少しややこしいが、基本は外部テナント、もしくは MSA との連携になる。Google, Facebook, Direct Federation はテナントで追加の設定が必要になってくるためだ。<br>ちなみに外部テナントや MSA, Google, Facebook は OIDC&#x2F;OAuth で、直接フェデレーション (Direct Federation) は SAML で連携する。</p><p>あ、OTP ユーザーのことを忘れてた。いずれのフェデレーション アカウントにも紐づいていないユーザーについては <a href="https://docs.microsoft.com/ja-jp/azure/active-directory/external-identities/one-time-passcode">B2B ゲスト ユーザーのワンタイム パスコード認証 - Azure AD | Microsoft Docs</a> が有効になっていれば、OTP でテナントにサインインすることになる。詳しい流れについては、以下のドキュメントに記載がある。</p><p><img src="https://docs.microsoft.com/ja-jp/azure/active-directory/external-identities/media/redemption-experience/invitation-redemption-flow.png"></p><p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory/external-identities/redemption-experience">B2B コラボレーションの招待の利用 - Azure AD | Microsoft Docs</a></p><blockquote><p>最近ゲストユーザーの既定の権限に<a href="https://docs.microsoft.com/en-us/azure/active-directory/users-groups-roles/users-restrict-guest-permissions">新しい権限が追加</a>されて、招待ユーザーがテナント内部のユーザー情報を見れないようにする、といったプレビュー機能が追加されたが、今日はゲストユーザーのセルフサインアップに関するお話。実際に触ったのは 7 月だけど、忙しすぎてブログ書かずにいたらもう 3 カ月がたってた…。</p></blockquote><p>ということで、早速本題のセルフ サインアップの話。さっきも言った通り、ざっくりユーザー フロー、API コネクターで構成されている。あと追加のカスタム属性についてチラッと解説する。</p><h3 id="ユーザー-フロー"><a href="#ユーザー-フロー" class="headerlink" title="ユーザー フロー"></a>ユーザー フロー</h3><p>ユーザー フロー…、はい、そうです Azure AD B2C のユーザー フローと全く同じ見た目してますね。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/b2x-user-flow.png"></p><p>設定内容も大体同じなので、Azure AD B2C を触っていれば困ることは無いでしょう。</p><p>ユーザー フローには、サインアップ時に要求する属性を構成できる。例えば、氏名や住所を追加で入力させたり、カスタム属性を追加で入力させたりできる。ユーザー フローを作成したら、Azure AD に登録したアプリを紐づける。</p><p>なぜアプリを紐づけるのか、という話なのだが、実際にアプリを紐づけてそのアプリに未サインインの状態出紐づけたアプリとして Authorize リクエストを送ると、以下のようにユーザーの作成ボタンが追加される。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/create-user-button.png"></p><blockquote><p>埼玉県民に媚びるために作ったフローなので、なんか変な属性の収集が追加されている</p></blockquote><p>ここで紐づけていないアプリには、このセルフ サインアップのためのボタンは表示されない。<br>現状こんな感じでちっちゃいボタンをクリックしないとセルフサインアップが出来ない。招待されていないユーザーのメールアドレスを Sign in 画面に入れると、ユーザーは見つかりませんと怒られる。</p><p>出来れば、クエリーパラメータを追加することで、サインアップに直接行けるほうが混乱が少なくて良いと思うけど、現状こんな動作。</p><h3 id="Custom-User-Attributes"><a href="#Custom-User-Attributes" class="headerlink" title="Custom User Attributes"></a>Custom User Attributes</h3><p>Create one! ボタンをクリックすることで、ゲスト ユーザーとしてのサインアップが行えるが、サインアップ時に属性を収集することが出来る。そこで組み込みの属性以外を集めたい場合は、カスタム属性を利用する。</p><p>カスタム属性は、カスタムのユーザー属性で事前に作成する。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/custom-attributes.png"></p><p>ここで属性を追加すると、<code>aad-extensions-app. Do not modify...</code> というアプリが出来上がり、属性はこのサービス プリンシパルに保存される。 </p><p><img src="/2020/09/27/aad-external-identity-api-connector/aad-extensions-app.png"></p><p>実際に保存された属性は <code>extension_&lt;appid&gt;_&lt;extension_name&gt;</code> でアクセスできる。<br>このあたりも B2C と大体同じなので、まあ違和感ないでしょう。</p><h3 id="API-Connector"><a href="#API-Connector" class="headerlink" title="API Connector"></a>API Connector</h3><p>ユーザーのサインアップ時に、属性情報の Validation や、変換などを API 経由で行える。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/api-connector.png"></p><p>例えば、メールアドレスのドメインをチェックする、外部システムと連携し、追加のクレームを入力するなど。<br>公式でもいくつかのサンプルが用意されており、メール ドメインの検証、承認システム、<a href="https://github.com/Azure-Samples/active-directory-dotnet-external-identities-idology-identity-verification">IDology</a> や <a href="https://github.com/Azure-Samples/active-directory-dotnet-external-identities-experian-identity-verification">Experian</a> といった外部 SaaS のユーザーの検証システムとつないで検証するといったサンプルもある。</p><p><a href="https://docs.microsoft.com/en-us/azure/active-directory/external-identities/code-samples-self-service-sign-up">API connector code samples for user flows - Azure AD | Microsoft Docs</a></p><p>Azure Function のサンプルもあるので、サクッとためしたいならデプロイしてみれば良いと思う。自分も 3 カ月ぐらい前に <a href="https://github.com/watahani/azure-ad-external-identity-api">サンプル</a> 作ったけど、解説作る前に公式サンプルが出来てしまった。</p><p>パッと考えただけでも、ゲスト ユーザーの名前に prefix を追加して見やすくするとか、追加の構成は必要だが、サインアップ日時を保存して特定日時がたったらユーザーを無効化させるといったフローなど、色々考えられていい機能だと思う。</p><h2 id="ざっくりまとめ"><a href="#ざっくりまとめ" class="headerlink" title="ざっくりまとめ"></a>ざっくりまとめ</h2><p>企業間で B2B コラボレーションを行う際には、特に制限は行わず一般ユーザーが招待可能にする、あるいは招待を制限し、管理者のみが招待権限を持つよう構成する、というどちらかの方法しかなかった。しかしセルフ サインアップ機能を利用することで、より柔軟な招待方法の構成ができるようになった。</p><p>たとえば、外部 ID の設定としては、こんな感じで招待を禁止しておいて、特定のサインアップページから API の検証の結果 OK ならセルフ サインアップできるのような構成も取れる。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/external-identities-settings.png"></p><p>API Connector も B2C と違って、カスタム ポリシーを弄ったりせずに簡単に構成できる。B2C にも早く逆輸入されて欲しい。というか、B2X があれば、今まで B2C で構成していたいくつかのユース ケースはこちらで対応できる可能性もある。<br>Azure AD Premium の条件付きアクセスポリシーと組み合わせれば、招待時に利用規約への同意なんかも行える。</p><p>ところで、外部 ID については、もう一つ大きなアップデートがあり、<a href="https://azure.microsoft.com/ja-jp/pricing/details/active-directory/external-identities/">ライセンスがサブスクリプションで払えるように</a> なってる。<br>今までは Azure AD Premium のライセンスは、テナントで有効なライセンスの 5 倍までのゲスト ユーザーが利用できるとか、ある意味曖昧な料金体系だったが、サブスクリプション形式に切り替えれば 50,000 ユーザーまでは無料 (!?) になるので、多くの企業では切り替えたほうがオトクになりそう。</p><p><img src="/2020/09/27/aad-external-identity-api-connector/external-identities-pricing.png"></p><p><a href="https://azure.microsoft.com/ja-jp/pricing/details/active-directory/external-identities/">https://azure.microsoft.com/ja-jp/pricing/details/active-directory/external-identities/</a></p><p>とはいえ、パブリック プレビューなので、実際に GA されるときどんな動作になるかは分からないので悪しからず。</p><p>今日はこの辺で。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Azure AD の B2B 機能、つまり、社外ユーザーとのコラボレーション機能がどんどん Azure AD B2C っぽくなっている。ということで、今回は Azure AD External Identity のセルフ サインアップ と API コネクターを触ってみたので
      
    
    </summary>
    
    
      <category term="Azure AD" scheme="http://blog.haniyama.com/tags/Azure-AD/"/>
    
      <category term="B2B" scheme="http://blog.haniyama.com/tags/B2B/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD の SPA 向け Authorize Code Flow with PKCE (MSAL.js 2.x)</title>
    <link href="http://blog.haniyama.com/2020/06/02/aad-spa-auth-code-grant-with-pkce/"/>
    <id>http://blog.haniyama.com/2020/06/02/aad-spa-auth-code-grant-with-pkce/</id>
    <published>2020-06-02T09:23:00.000Z</published>
    <updated>2022-05-18T13:45:28.985Z</updated>
    
    <content type="html"><![CDATA[<p>Authorization Code Flow with PKCE に対応した MSAL.js 2.x がプレビューでリリースされていたので、触ってみたメモ。</p><h2 id="Azure-ポータルのアプリの登録画面"><a href="#Azure-ポータルのアプリの登録画面" class="headerlink" title="Azure ポータルのアプリの登録画面"></a>Azure ポータルのアプリの登録画面</h2><p>Azure AD のアプリ登録の画面がアップデートしており、リダイレクト URI の登録に SPA が追加されていた。</p><span id="more"></span><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-new-redirect-uri.png"></p><p>クリックするとこんな表示が。</p><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-spa.png"></p><blockquote><p>最新バージョンの MSAL.js では、PKCE と CORS で認証コード フローが使用されます。</p></blockquote><blockquote><p>リダイレクト URI は、PKCE での承認コード フローの対象となります。</p></blockquote><p>少しわかり辛いが、既定では MSAL.js 2.0 を利用した承認コード フロー (Authorize Code Flow) with <a href="https://tools.ietf.org/html/rfc7636">PKCE</a> を利用する設定になったとのことらしい。</p><p>もちろん暗黙の付与にチェックを入れることで、引き続き Implicit Flow も利用できる。</p><h2 id="MSAL-js-2-0"><a href="#MSAL-js-2-0" class="headerlink" title="MSAL.js 2.0"></a>MSAL.js 2.0</h2><p>Microsoft が SPA 向けに提供している JavaScript 向けの認証ライブラリとしては以下の 3 つがある。なお ADAL は、古いエンドポイントを利用しているため、新規で開発する場合には選択肢から外そう。</p><ul><li>Authorize Code Grant を利用する <a href="https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser">MSAL.js 2.x</a></li><li>Implicit Flow を利用する <a href="https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-core">MSAL.js 1.x</a>  </li><li>Implicit Flow (v1 エンドポイント) を利用する ADAL.js</li></ul><p>今出ている MSAL.js 関連の記事は 1.x 系のものがほとんどだが、今後は 1.x 系なのか、2.x 系なのかしっかり見極めて読む必要がある。</p><h2 id="サンプルを動かす"><a href="#サンプルを動かす" class="headerlink" title="サンプルを動かす"></a>サンプルを動かす</h2><p>アプリ登録画面が更新され、サンプル コードを自動生成してくれるようになった。めっちゃ楽に動く。すごい便利。</p><p>クイックスタートからサンプルを作る。</p><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-quick-start.png"></p><blockquote><p>シングルページ アプリケーション (SPA) &gt; JavaScript (認証コード フロー) を選択</p></blockquote><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-quick-start-spa.png"></p><blockquote><p>既定で Code Grant を推してはいるけど、あくまで MSAL.js 2.x はプレビュー</p></blockquote><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-quick-start-notice.png"></p><p>あとは手順通りにボタンをポチポチしていくと、アプリ登録の設定変更を行い、client_id などを埋め込んだサンプルがダウンロードできる。</p><p> <code>これらの変更を行います</code> をクリックして、アプリの設定を更新したのち、コードサンプルをダウンロードする。</p><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-quick-start-download-sample.png"></p><p>自動で設定される内容はこんな感じ</p><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-settings-auth.png"></p><p>マニフェストには、<code>type: &quot;spa&quot;</code> として登録されている。</p><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/app-registration-settings-manifest.png"></p><p>ダウンロードしたサンプルを解凍して、npm install &amp;&amp; npm start を実行すると <a href="http://localhost:3000/">http://localhost:3000</a> でサンプルが動く。</p><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/sample-top.png"></p><h2 id="認証の流れ"><a href="#認証の流れ" class="headerlink" title="認証の流れ"></a>認証の流れ</h2><p>Sign In をクリックすることで、Authorize Endpoint にリクエストが飛ぶ。</p><p>サンプルはマルチ テナントアプリなので、organizations エンドポイントに対し認証リクエストを送信する。</p><pre class="language-http" style="" tabindex="0"><code id="a6781e3f" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;a6781e3f&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nhttps://login.microsoftonline.com/organizations/oauth2/v2.0/authorize?\n\nresponse_type=code\u0026\nscope=openid%20profile%20user.read%20offline_access&amp;\nclient_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;\nredirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;\nstate=d57b6054-1930-422d-b707-fe840584790c&amp;\nnonce=2babda35-58fd-4d5c-9381-ed174e9214d3&amp;\nclient_info=1&amp;\nx-client-SKU=MSAL.JS&amp;\nx-client-Ver=1.0.0-beta.0&amp;\ncode_challenge=ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w&amp;\ncode_challenge_method=S256&amp;\nclient-request-id=303fc61d-7bbe-4f25-8430-5d11b7b5240f&amp;\nresponse_mode=fragment&amp;\nsso_reload=true\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>https</span><span class=\&quot;token punctuation\&quot;>:</span><span class=\&quot;token header-value\&quot;>//login.microsoftonline.com/organizations/oauth2/v2.0/authorize?</span></span>\n\nresponse_type=code&amp;amp;\nscope=openid%20profile%20user.read%20offline_access&amp;amp;\nclient_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;amp;\nredirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;amp;\nstate=d57b6054-1930-422d-b707-fe840584790c&amp;amp;\nnonce=2babda35-58fd-4d5c-9381-ed174e9214d3&amp;amp;\nclient_info=1&amp;amp;\nx-client-SKU=MSAL.JS&amp;amp;\nx-client-Ver=1.0.0-beta.0&amp;amp;\ncode_challenge=ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w&amp;amp;\ncode_challenge_method=S256&amp;amp;\nclient-request-id=303fc61d-7bbe-4f25-8430-5d11b7b5240f&amp;amp;\nresponse_mode=fragment&amp;amp;\nsso_reload=true\n&quot;}"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//login.microsoftonline.com/organizations/oauth2/v2.0/authorize?</span></span>response_type=code&amp;scope=openid%20profile%20user.read%20offline_access&amp;client_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;state=d57b6054-1930-422d-b707-fe840584790c&amp;nonce=2babda35-58fd-4d5c-9381-ed174e9214d3&amp;client_info=1&amp;x-client-SKU=MSAL.JS&amp;x-client-Ver=1.0.0-beta.0&amp;code_challenge=ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w&amp;code_challenge_method=S256&amp;client-request-id=303fc61d-7bbe-4f25-8430-5d11b7b5240f&amp;response_mode=fragment&amp;sso_reload=true</code></pre><p>ポイントは、code_challenge と code_challenge_method が含まれていること。</p><blockquote><p>code_challenge&#x3D;ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w</p></blockquote><p>サインイン &amp; Consent 後、code が返却される</p><pre class="language-http" style="" tabindex="0"><code id="89243d3f" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;89243d3f&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nhttp://localhost:3000/#\n\ncode=0.ASsArFzjubin3UihAruhjq...\u0026\nclient_info=eyJ1aWQiOiIxMTc1MGFiZS1kOWE2LTQ3MTYtOTdiNS03N2I0MzBjOGFmNjUiLCJ1dGlkIjoiYjllMzVjYWMtYTdiOC00OGRkLWExMDItYmJhMThlYWNhNTI0In0&amp;\nstate=0bf48805-be5d-404f-9f9a-c31fc321a292&amp;\nsession_state=c1f74a08-8442-486c-bb75-107298d6dc7e\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>http</span><span class=\&quot;token punctuation\&quot;>:</span><span class=\&quot;token header-value\&quot;>//localhost:3000/#</span></span>\n\ncode=0.ASsArFzjubin3UihAruhjq...&amp;amp;\nclient_info=eyJ1aWQiOiIxMTc1MGFiZS1kOWE2LTQ3MTYtOTdiNS03N2I0MzBjOGFmNjUiLCJ1dGlkIjoiYjllMzVjYWMtYTdiOC00OGRkLWExMDItYmJhMThlYWNhNTI0In0&amp;amp;\nstate=0bf48805-be5d-404f-9f9a-c31fc321a292&amp;amp;\nsession_state=c1f74a08-8442-486c-bb75-107298d6dc7e\n&quot;}"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:3000/#</span></span>code=0.ASsArFzjubin3UihAruhjq...&amp;client_info=eyJ1aWQiOiIxMTc1MGFiZS1kOWE2LTQ3MTYtOTdiNS03N2I0MzBjOGFmNjUiLCJ1dGlkIjoiYjllMzVjYWMtYTdiOC00OGRkLWExMDItYmJhMThlYWNhNTI0In0&amp;state=0bf48805-be5d-404f-9f9a-c31fc321a292&amp;session_state=c1f74a08-8442-486c-bb75-107298d6dc7e</code></pre><p>token エンドポイントへの POST リクエストには code_verifier を付与する。</p><pre class="language-http" style="" tabindex="0"><code id="9ab3c13e" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;9ab3c13e&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nPOST https://login.microsoftonline.com/organizations/oauth2/v2.0/token HTTP/1.1\nHost: login.microsoftonline.com\nConnection: keep-alive\nContent-Length: 1052\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\ncontent-type: application/x-www-form-urlencoded\nAccept: */*\nOrigin: http://localhost:3000\nSec-Fetch-Site: cross-site\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: http://localhost:3000/\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-US,en;q=0.9,ja-CA;q=0.8,ja;q=0.7\n\nclient_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039\u0026\nscope=openid%20profile%20user.read%20offline_access&amp;\nredirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;\ncode=0.ASsArFzjubin3UihAruhjqylJG...&amp;\ncode_verifier=NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI&amp;\ngrant_type=authorization_code\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token request-line\&quot;\u003e<span class=\&quot;token method property\&quot;>POST</span> <span class=\&quot;token request-target url\&quot;>https://login.microsoftonline.com/organizations/oauth2/v2.0/token</span> <span class=\&quot;token http-version property\&quot;>HTTP/1.1</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Host</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>login.microsoftonline.com</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Connection</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>keep-alive</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Content-Length</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>1052</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>User-Agent</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>content-type</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>application/x-www-form-urlencoded</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>*/*</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Origin</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>http://localhost:3000</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Site</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>cross-site</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Mode</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>cors</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Sec-Fetch-Dest</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>empty</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Referer</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>http://localhost:3000/</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept-Encoding</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>gzip, deflate, br</span></span>\n<span class=\&quot;token header\&quot;><span class=\&quot;token header-name keyword\&quot;>Accept-Language</span><span class=\&quot;token punctuation\&quot;>:</span> <span class=\&quot;token header-value\&quot;>en-US,en;q=0.9,ja-CA;q=0.8,ja;q=0.7</span></span>\n\nclient_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;amp;\nscope=openid%20profile%20user.read%20offline_access&amp;amp;\nredirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;amp;\ncode=0.ASsArFzjubin3UihAruhjqylJG...&amp;amp;\ncode_verifier=NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI&amp;amp;\ngrant_type=authorization_code\n&quot;}"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">https://login.microsoftonline.com/organizations/oauth2/v2.0/token</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">login.microsoftonline.com</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">1052</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">content-type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://localhost:3000</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">cross-site</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">cors</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">empty</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://localhost:3000/</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en-US,en;q=0.9,ja-CA;q=0.8,ja;q=0.7</span></span>client_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;scope=openid%20profile%20user.read%20offline_access&amp;redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;code=0.ASsArFzjubin3UihAruhjqylJG...&amp;code_verifier=NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI&amp;grant_type=authorization_code</code></pre><p>code_verifier の値を、SHA256 でハッシュを取ると、code_challenge の値と一致するはず。</p><pre class="language-powershell" style="" tabindex="0"><code id="19cf1b3e" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;19cf1b3e&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\n ConvertFrom-CodeVerifier - \u0027NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI'\n# ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w\n&quot;,&quot;highlightedCode&quot;:&quot;\n \u003cspan class=\&quot;token function\&quot;\u003eConvertFrom-CodeVerifier</span> <span class=\&quot;token operator\&quot;>-</span> <span class=\&quot;token string\&quot;>'NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI'</span>\n<span class=\&quot;token comment\&quot;># ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w</span>\n&quot;}"> <span class="token function">ConvertFrom-CodeVerifier</span> <span class="token operator">-</span> <span class="token string">'NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI'</span><span class="token comment"># ZhDtcgD2hU8bRjD1Qpvhcrvm-J38iUvkovNdbbc3o0w</span></code></pre><p>code_verifier から code_challenge を計算する関数はこんな感じ。</p><script src="https://gist.github.com/watahani/57b91116335d4738e23918f5996d7553.js"></script><h2 id="エラーを発生させてみたメモ"><a href="#エラーを発生させてみたメモ" class="headerlink" title="エラーを発生させてみたメモ"></a>エラーを発生させてみたメモ</h2><h3 id="AADSTS50148-エラー"><a href="#AADSTS50148-エラー" class="headerlink" title="AADSTS50148 エラー"></a>AADSTS50148 エラー</h3><p>トークン リクエストを code_verifier を消したり、間違えたりして送ってみる。怒られる。</p><pre class="language-js" style="" tabindex="0"><code id="88760d3f" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;88760d3f&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nu=\u0027https://login.microsoftonline.com/organizations/oauth2/v2.0/token'\ndata = {\n    \&quot;client_id\&quot;: \&quot;47a5a26f-13c5-4f59-84f8-6a57b8ede039\&quot;,\n    \&quot;scope\&quot;: \&quot;openid\&quot;,\n    \&quot;grant_type\&quot;: \&quot;authorization_code\&quot;,\n    \&quot;redirect_uri\&quot;: \&quot;http://localhost:3000/\&quot;,\n    \&quot;code\&quot;: code\n  }\n\nlet urlEncodedDataPairs = [];\nfor(let name in data ) {\n    urlEncodedDataPairs.push( encodeURIComponent( name ) + '=' + encodeURIComponent( data[name] ) );\n}\nurlEncodedData = urlEncodedDataPairs.join( '\u0026' ).replace( /%20/g, '+' );\n\nvar request = new XMLHttpRequest()\nrequest.addEventListener( 'load', function(event) {\n  console.log(event.target.response);\n});\nrequest.open(\&quot;POST\&quot;,u)\nrequest.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' )\n\nrequest.send(urlEncodedData)\n\n//{\&quot;error\&quot;:\&quot;invalid_grant\&quot;,\&quot;error_description\&quot;:\&quot;AADSTS50148: The code_verifier does not match the code_challenge supplied in the authorization request for PKCE.\\r\\nTrace ID: 5c4218e1-fa34-4609-bdb6-f3a63a918200\\r\\nCorrelation ID: 6957aeea-d8fd-43b7-bf3f-79c2a3654bde\\r\\nTimestamp: 2020-06-02 08:00:46Z\&quot;,\&quot;error_codes\&quot;:[50148],\&quot;timestamp\&quot;:\&quot;2020-06-02 08:00:46Z\&quot;,\&quot;trace_id\&quot;:\&quot;5c4218e1-fa34-4609-bdb6-f3a63a918200\&quot;,\&quot;correlation_id\&quot;:\&quot;6957aeea-d8fd-43b7-bf3f-79c2a3654bde\&quot;,\&quot;error_uri\&quot;:\&quot;https://login.microsoftonline.com/error?code=50148\&quot;}\n&quot;,&quot;highlightedCode&quot;:&quot;\nu\u003cspan class=\&quot;token operator\&quot;\u003e=</span><span class=\&quot;token string\&quot;>'https://login.microsoftonline.com/organizations/oauth2/v2.0/token'</span>\ndata <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>{</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;client_id\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;47a5a26f-13c5-4f59-84f8-6a57b8ede039\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;scope\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;openid\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;grant_type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;authorization_code\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;redirect_uri\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;http://localhost:3000/\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;code\&quot;</span><span class=\&quot;token operator\&quot;>:</span> code\n  <span class=\&quot;token punctuation\&quot;>}</span>\n\n<span class=\&quot;token keyword\&quot;>let</span> urlEncodedDataPairs <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>[</span><span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token keyword\&quot;>for</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token keyword\&quot;>let</span> name <span class=\&quot;token keyword\&quot;>in</span> data <span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>{</span>\n    urlEncodedDataPairs<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>push</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token function\&quot;>encodeURIComponent</span><span class=\&quot;token punctuation\&quot;>(</span> name <span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>+</span> <span class=\&quot;token string\&quot;>'='</span> <span class=\&quot;token operator\&quot;>+</span> <span class=\&quot;token function\&quot;>encodeURIComponent</span><span class=\&quot;token punctuation\&quot;>(</span> data<span class=\&quot;token punctuation\&quot;>[</span>name<span class=\&quot;token punctuation\&quot;>]</span> <span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\nurlEncodedData <span class=\&quot;token operator\&quot;>=</span> urlEncodedDataPairs<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>join</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token string\&quot;>'&amp;amp;'</span> <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>replace</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token regex\&quot;><span class=\&quot;token regex-delimiter\&quot;>/</span><span class=\&quot;token regex-source language-regex\&quot;>%20</span><span class=\&quot;token regex-delimiter\&quot;>/</span><span class=\&quot;token regex-flags\&quot;>g</span></span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string\&quot;>'+'</span> <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n<span class=\&quot;token keyword\&quot;>var</span> request <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token keyword\&quot;>new</span> <span class=\&quot;token class-name\&quot;>XMLHttpRequest</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>addEventListener</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token string\&quot;>'load'</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token keyword\&quot;>function</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>event</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>{</span>\n  console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>event<span class=\&quot;token punctuation\&quot;>.</span>target<span class=\&quot;token punctuation\&quot;>.</span>response<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>open</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>u<span class=\&quot;token punctuation\&quot;>)</span>\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>setRequestHeader</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token string\&quot;>'Content-Type'</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string\&quot;>'application/x-www-form-urlencoded'</span> <span class=\&quot;token punctuation\&quot;>)</span>\n\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>send</span><span class=\&quot;token punctuation\&quot;>(</span>urlEncodedData<span class=\&quot;token punctuation\&quot;>)</span>\n\n<span class=\&quot;token comment\&quot;>//{\&quot;error\&quot;:\&quot;invalid_grant\&quot;,\&quot;error_description\&quot;:\&quot;AADSTS50148: The code_verifier does not match the code_challenge supplied in the authorization request for PKCE.\\r\\nTrace ID: 5c4218e1-fa34-4609-bdb6-f3a63a918200\\r\\nCorrelation ID: 6957aeea-d8fd-43b7-bf3f-79c2a3654bde\\r\\nTimestamp: 2020-06-02 08:00:46Z\&quot;,\&quot;error_codes\&quot;:[50148],\&quot;timestamp\&quot;:\&quot;2020-06-02 08:00:46Z\&quot;,\&quot;trace_id\&quot;:\&quot;5c4218e1-fa34-4609-bdb6-f3a63a918200\&quot;,\&quot;correlation_id\&quot;:\&quot;6957aeea-d8fd-43b7-bf3f-79c2a3654bde\&quot;,\&quot;error_uri\&quot;:\&quot;https://login.microsoftonline.com/error?code=50148\&quot;}</span>\n&quot;}">u<span class="token operator">=</span><span class="token string">'https://login.microsoftonline.com/organizations/oauth2/v2.0/token'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string-property property">"client_id"</span><span class="token operator">:</span> <span class="token string">"47a5a26f-13c5-4f59-84f8-6a57b8ede039"</span><span class="token punctuation">,</span>    <span class="token string-property property">"scope"</span><span class="token operator">:</span> <span class="token string">"openid"</span><span class="token punctuation">,</span>    <span class="token string-property property">"grant_type"</span><span class="token operator">:</span> <span class="token string">"authorization_code"</span><span class="token punctuation">,</span>    <span class="token string-property property">"redirect_uri"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/"</span><span class="token punctuation">,</span>    <span class="token string-property property">"code"</span><span class="token operator">:</span> code  <span class="token punctuation">}</span><span class="token keyword">let</span> urlEncodedDataPairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> data <span class="token punctuation">)</span> <span class="token punctuation">{</span>    urlEncodedDataPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>urlEncodedData <span class="token operator">=</span> urlEncodedDataPairs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">'&amp;'</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%20</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'+'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span> <span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span> <span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>urlEncodedData<span class="token punctuation">)</span><span class="token comment">//{"error":"invalid_grant","error_description":"AADSTS50148: The code_verifier does not match the code_challenge supplied in the authorization request for PKCE.\r\nTrace ID: 5c4218e1-fa34-4609-bdb6-f3a63a918200\r\nCorrelation ID: 6957aeea-d8fd-43b7-bf3f-79c2a3654bde\r\nTimestamp: 2020-06-02 08:00:46Z","error_codes":[50148],"timestamp":"2020-06-02 08:00:46Z","trace_id":"5c4218e1-fa34-4609-bdb6-f3a63a918200","correlation_id":"6957aeea-d8fd-43b7-bf3f-79c2a3654bde","error_uri":"https://login.microsoftonline.com/error?code=50148"}</span></code></pre><h3 id="AADSTS900144-エラー"><a href="#AADSTS900144-エラー" class="headerlink" title="AADSTS900144 エラー"></a>AADSTS900144 エラー</h3><p>code_challenge がない AuthZ リクエストを送ってみると AADSTS900144 エラーが発生する。</p><pre class="language-http" style="" tabindex="0"><code id="8ccce53e" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;8ccce53e&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nhttps://login.microsoftonline.com/organizations/oauth2/v2.0/authorize?\n\nresponse_type=code\u0026\nscope=openid%20profile%20user.read%20offline_access&amp;\nclient_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;\nredirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;\nstate=d57b6054-1930-422d-b707-fe840584790c&amp;\nnonce=2babda35-58fd-4d5c-9381-ed174e9214d3&amp;\nresponse_mode=fragment\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>https</span><span class=\&quot;token punctuation\&quot;>:</span><span class=\&quot;token header-value\&quot;>//login.microsoftonline.com/organizations/oauth2/v2.0/authorize?</span></span>\n\nresponse_type=code&amp;amp;\nscope=openid%20profile%20user.read%20offline_access&amp;amp;\nclient_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;amp;\nredirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;amp;\nstate=d57b6054-1930-422d-b707-fe840584790c&amp;amp;\nnonce=2babda35-58fd-4d5c-9381-ed174e9214d3&amp;amp;\nresponse_mode=fragment\n&quot;}"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//login.microsoftonline.com/organizations/oauth2/v2.0/authorize?</span></span>response_type=code&amp;scope=openid%20profile%20user.read%20offline_access&amp;client_id=47a5a26f-13c5-4f59-84f8-6a57b8ede039&amp;redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&amp;state=d57b6054-1930-422d-b707-fe840584790c&amp;nonce=2babda35-58fd-4d5c-9381-ed174e9214d3&amp;response_mode=fragment</code></pre><p><img src="/2020/06/02/aad-spa-auth-code-grant-with-pkce/AADSTS900144.png"></p><h3 id="AADSTS9002327-エラー"><a href="#AADSTS9002327-エラー" class="headerlink" title="AADSTS9002327 エラー"></a>AADSTS9002327 エラー</h3><p>Code を取得して、ブラウザーの XHR リクエストではなく、PowerShell などでリクエストを送信してみると、AADSTS9002327 エラーが発生する。どこ見てるんだろ、あんま検証してない。</p><pre class="language-powershell" style="" tabindex="0"><code id="cbb0b63d" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;cbb0b63d&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\n$clientId = \u002747a5a26f-13c5-4f59-84f8-6a57b8ede039'\n$redirectUri='https://localhost:3000/'\n$tenantId = \&quot;organization\&quot;\n$tokenEndpont = \&quot;https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token\&quot;\n$scope = \&quot;openid profile user.read offline_access\&quot;\n\n$code='0.ASsArFzjubin3Ui...'\n$codeVerifier = 'NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI'\n\n$postParams = @{\n    client_id = $clientId;\n    redirect_uri=$redirectUri;\n    grant_type = 'authorization_code';\n    scope = $scope;\n    code=$code;\n    code_verifier=$codeVerifier;\n}\n\n$body = (Invoke-WebRequest -Uri $tokenEndpont -Method POST -Body $postParams) | ConvertFrom-Json\n\n#Invoke-WebRequest : {\&quot;error\&quot;:\&quot;invalid_request\&quot;,\&quot;error_description\&quot;:\&quot;AADSTS9002327: Tokens issued for the 'Single-Page Application' client-type may only be redeemed via cross-origin requests.\\r\\nTrace ID: c739...\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token variable\&quot;\u003e$clientId</span> = <span class=\&quot;token string\&quot;>'47a5a26f-13c5-4f59-84f8-6a57b8ede039'</span>\n<span class=\&quot;token variable\&quot;>$redirectUri</span>=<span class=\&quot;token string\&quot;>'https://localhost:3000/'</span>\n<span class=\&quot;token variable\&quot;>$tenantId</span> = <span class=\&quot;token string\&quot;>\&quot;organization\&quot;</span>\n<span class=\&quot;token variable\&quot;>$tokenEndpont</span> = <span class=\&quot;token string\&quot;>\&quot;https://login.microsoftonline.com/<span class=\&quot;token variable\&quot;>$tenantId</span>/oauth2/v2.0/token\&quot;</span>\n<span class=\&quot;token variable\&quot;>$scope</span> = <span class=\&quot;token string\&quot;>\&quot;openid profile user.read offline_access\&quot;</span>\n\n<span class=\&quot;token variable\&quot;>$code</span>=<span class=\&quot;token string\&quot;>'0.ASsArFzjubin3Ui...'</span>\n<span class=\&quot;token variable\&quot;>$codeVerifier</span> = <span class=\&quot;token string\&quot;>'NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI'</span>\n\n<span class=\&quot;token variable\&quot;>$postParams</span> = @<span class=\&quot;token punctuation\&quot;>{</span>\n    client_id = <span class=\&quot;token variable\&quot;>$clientId</span><span class=\&quot;token punctuation\&quot;>;</span>\n    redirect_uri=<span class=\&quot;token variable\&quot;>$redirectUri</span><span class=\&quot;token punctuation\&quot;>;</span>\n    grant_type = <span class=\&quot;token string\&quot;>'authorization_code'</span><span class=\&quot;token punctuation\&quot;>;</span>\n    scope = <span class=\&quot;token variable\&quot;>$scope</span><span class=\&quot;token punctuation\&quot;>;</span>\n    code=<span class=\&quot;token variable\&quot;>$code</span><span class=\&quot;token punctuation\&quot;>;</span>\n    code_verifier=<span class=\&quot;token variable\&quot;>$codeVerifier</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n\n<span class=\&quot;token variable\&quot;>$body</span> = <span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token function\&quot;>Invoke-WebRequest</span> <span class=\&quot;token operator\&quot;>-</span>Uri <span class=\&quot;token variable\&quot;>$tokenEndpont</span> <span class=\&quot;token operator\&quot;>-</span>Method POST <span class=\&quot;token operator\&quot;>-</span>Body <span class=\&quot;token variable\&quot;>$postParams</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>|</span> <span class=\&quot;token function\&quot;>ConvertFrom-Json</span>\n\n<span class=\&quot;token comment\&quot;>#Invoke-WebRequest : {\&quot;error\&quot;:\&quot;invalid_request\&quot;,\&quot;error_description\&quot;:\&quot;AADSTS9002327: Tokens issued for the 'Single-Page Application' client-type may only be redeemed via cross-origin requests.\\r\\nTrace ID: c739...</span>\n&quot;}"><span class="token variable">$clientId</span> = <span class="token string">'47a5a26f-13c5-4f59-84f8-6a57b8ede039'</span><span class="token variable">$redirectUri</span>=<span class="token string">'https://localhost:3000/'</span><span class="token variable">$tenantId</span> = <span class="token string">"organization"</span><span class="token variable">$tokenEndpont</span> = <span class="token string">"https://login.microsoftonline.com/<span class="token variable">$tenantId</span>/oauth2/v2.0/token"</span><span class="token variable">$scope</span> = <span class="token string">"openid profile user.read offline_access"</span><span class="token variable">$code</span>=<span class="token string">'0.ASsArFzjubin3Ui...'</span><span class="token variable">$codeVerifier</span> = <span class="token string">'NUJGSXpNM1VEazlHVW9vYXRWb0o5RDJSTXI2Q1l3WGI'</span><span class="token variable">$postParams</span> = @<span class="token punctuation">{</span>    client_id = <span class="token variable">$clientId</span><span class="token punctuation">;</span>    redirect_uri=<span class="token variable">$redirectUri</span><span class="token punctuation">;</span>    grant_type = <span class="token string">'authorization_code'</span><span class="token punctuation">;</span>    scope = <span class="token variable">$scope</span><span class="token punctuation">;</span>    code=<span class="token variable">$code</span><span class="token punctuation">;</span>    code_verifier=<span class="token variable">$codeVerifier</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$body</span> = <span class="token punctuation">(</span><span class="token function">Invoke-WebRequest</span> <span class="token operator">-</span>Uri <span class="token variable">$tokenEndpont</span> <span class="token operator">-</span>Method POST <span class="token operator">-</span>Body <span class="token variable">$postParams</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> <span class="token function">ConvertFrom-Json</span><span class="token comment">#Invoke-WebRequest : {"error":"invalid_request","error_description":"AADSTS9002327: Tokens issued for the 'Single-Page Application' client-type may only be redeemed via cross-origin requests.\r\nTrace ID: c739...</span></code></pre><h3 id="おまけ-AADSTS50076-エラー"><a href="#おまけ-AADSTS50076-エラー" class="headerlink" title="(おまけ) AADSTS50076 エラー"></a>(おまけ) AADSTS50076 エラー</h3><p>IP アドレスがっつり違うとこからリフレッシュトークン使ってみると、AADSTS50076 エラーが発生した。AIP が有効じゃないと出ないっぽい。</p><pre class="language-js" style="" tabindex="0"><code id="0f304a3f" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;0f304a3f&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nu=\u0027https://login.microsoftonline.com/organizations/oauth2/v2.0/token'\ndata = {\n    \&quot;scope\&quot;: \&quot;openid\&quot;,\n    \&quot;grant_type\&quot;: \&quot;refresh_token\&quot;,\n    \&quot;redirect_uri\&quot;: \&quot;http://localhost:3000/\&quot;,\n    \&quot;refresh_token\&quot;: refresh_token\n  }\n\nlet urlEncodedDataPairs = [];\nfor(let name in data ) {\n    urlEncodedDataPairs.push( encodeURIComponent( name ) + '=' + encodeURIComponent( data[name] ) );\n}\nurlEncodedData = urlEncodedDataPairs.join( '\u0026' ).replace( /%20/g, '+' );\n\nvar request = new XMLHttpRequest()\nrequest.addEventListener( 'load', function(event) {\n  console.log(event.target.response);\n});\nrequest.open(\&quot;POST\&quot;,u)\nrequest.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' )\n\nrequest.send(urlEncodedData)\n// {\&quot;error\&quot;:\&quot;invalid_grant\&quot;,\&quot;error_description\&quot;:\&quot;AADSTS50076: Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access '00000003-0000-0000-c000-000000000000'.\\r\\nTrace ID: 4fa9c1ce...\n&quot;,&quot;highlightedCode&quot;:&quot;\nu\u003cspan class=\&quot;token operator\&quot;\u003e=</span><span class=\&quot;token string\&quot;>'https://login.microsoftonline.com/organizations/oauth2/v2.0/token'</span>\ndata <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>{</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;scope\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;openid\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;grant_type\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;refresh_token\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;redirect_uri\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;http://localhost:3000/\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token string-property property\&quot;>\&quot;refresh_token\&quot;</span><span class=\&quot;token operator\&quot;>:</span> refresh_token\n  <span class=\&quot;token punctuation\&quot;>}</span>\n\n<span class=\&quot;token keyword\&quot;>let</span> urlEncodedDataPairs <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>[</span><span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token keyword\&quot;>for</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token keyword\&quot;>let</span> name <span class=\&quot;token keyword\&quot;>in</span> data <span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>{</span>\n    urlEncodedDataPairs<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>push</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token function\&quot;>encodeURIComponent</span><span class=\&quot;token punctuation\&quot;>(</span> name <span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>+</span> <span class=\&quot;token string\&quot;>'='</span> <span class=\&quot;token operator\&quot;>+</span> <span class=\&quot;token function\&quot;>encodeURIComponent</span><span class=\&quot;token punctuation\&quot;>(</span> data<span class=\&quot;token punctuation\&quot;>[</span>name<span class=\&quot;token punctuation\&quot;>]</span> <span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\nurlEncodedData <span class=\&quot;token operator\&quot;>=</span> urlEncodedDataPairs<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>join</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token string\&quot;>'&amp;amp;'</span> <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>replace</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token regex\&quot;><span class=\&quot;token regex-delimiter\&quot;>/</span><span class=\&quot;token regex-source language-regex\&quot;>%20</span><span class=\&quot;token regex-delimiter\&quot;>/</span><span class=\&quot;token regex-flags\&quot;>g</span></span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string\&quot;>'+'</span> <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n<span class=\&quot;token keyword\&quot;>var</span> request <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token keyword\&quot;>new</span> <span class=\&quot;token class-name\&quot;>XMLHttpRequest</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>addEventListener</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token string\&quot;>'load'</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token keyword\&quot;>function</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>event</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>{</span>\n  console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>event<span class=\&quot;token punctuation\&quot;>.</span>target<span class=\&quot;token punctuation\&quot;>.</span>response<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>open</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;POST\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>u<span class=\&quot;token punctuation\&quot;>)</span>\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>setRequestHeader</span><span class=\&quot;token punctuation\&quot;>(</span> <span class=\&quot;token string\&quot;>'Content-Type'</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token string\&quot;>'application/x-www-form-urlencoded'</span> <span class=\&quot;token punctuation\&quot;>)</span>\n\nrequest<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>send</span><span class=\&quot;token punctuation\&quot;>(</span>urlEncodedData<span class=\&quot;token punctuation\&quot;>)</span>\n<span class=\&quot;token comment\&quot;>// {\&quot;error\&quot;:\&quot;invalid_grant\&quot;,\&quot;error_description\&quot;:\&quot;AADSTS50076: Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access '00000003-0000-0000-c000-000000000000'.\\r\\nTrace ID: 4fa9c1ce...</span>\n&quot;}">u<span class="token operator">=</span><span class="token string">'https://login.microsoftonline.com/organizations/oauth2/v2.0/token'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string-property property">"scope"</span><span class="token operator">:</span> <span class="token string">"openid"</span><span class="token punctuation">,</span>    <span class="token string-property property">"grant_type"</span><span class="token operator">:</span> <span class="token string">"refresh_token"</span><span class="token punctuation">,</span>    <span class="token string-property property">"redirect_uri"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/"</span><span class="token punctuation">,</span>    <span class="token string-property property">"refresh_token"</span><span class="token operator">:</span> refresh_token  <span class="token punctuation">}</span><span class="token keyword">let</span> urlEncodedDataPairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> data <span class="token punctuation">)</span> <span class="token punctuation">{</span>    urlEncodedDataPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span> data<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>urlEncodedData <span class="token operator">=</span> urlEncodedDataPairs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">'&amp;'</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%20</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'+'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span> <span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span> <span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>urlEncodedData<span class="token punctuation">)</span><span class="token comment">// {"error":"invalid_grant","error_description":"AADSTS50076: Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access '00000003-0000-0000-c000-000000000000'.\r\nTrace ID: 4fa9c1ce...</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Authorization Code Flow with PKCE に対応した MSAL.js 2.x がプレビューでリリースされていたので、触ってみたメモ。&lt;/p&gt;
&lt;h2 id=&quot;Azure-ポータルのアプリの登録画面&quot;&gt;&lt;a href=&quot;#Azure-ポータルのアプリの登録画面&quot; class=&quot;headerlink&quot; title=&quot;Azure ポータルのアプリの登録画面&quot;&gt;&lt;/a&gt;Azure ポータルのアプリの登録画面&lt;/h2&gt;&lt;p&gt;Azure AD のアプリ登録の画面がアップデートしており、リダイレクト URI の登録に SPA が追加されていた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="OAuth" scheme="http://blog.haniyama.com/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>Azure Storage Blob に Content-Type 付きでアップロードする</title>
    <link href="http://blog.haniyama.com/2020/04/30/azure-storage-blob-content-type-nodejs/"/>
    <id>http://blog.haniyama.com/2020/04/30/azure-storage-blob-content-type-nodejs/</id>
    <published>2020-04-30T13:15:38.000Z</published>
    <updated>2022-05-18T13:45:28.994Z</updated>
    
    <content type="html"><![CDATA[<p>半年に 1 回ぐらい Azure Storage Blob を触るんだけど、毎回 Content-Type をセットするのを忘れてハマっている。<br>今回は nodejs で書いたので、忘れないようにメモ。</p><p>パッケージとして <code>@azure/storage-blob</code> を使う。あとファイル検索のために <code>glob</code> もつかう。</p><span id="more"></span><pre class="language-js" style="" tabindex="0"><code id="eed0213e" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;eed0213e&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nnpm install -S @azure/storage-blob glob\n&quot;,&quot;highlightedCode&quot;:&quot;\nnpm install \u003cspan class=\&quot;token operator\&quot;\u003e-</span><span class=\&quot;token constant\&quot;>S</span> @azure<span class=\&quot;token operator\&quot;>/</span>storage<span class=\&quot;token operator\&quot;>-</span>blob glob\n&quot;}">npm install <span class="token operator">-</span><span class="token constant">S</span> @azure<span class="token operator">/</span>storage<span class="token operator">-</span>blob glob</code></pre><p>とりあえずファイルをアップロードするサンプル。</p><pre class="language-js" style="" tabindex="0"><code id="caa8d63e" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;caa8d63e&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nconst mime = require(\&quot;mime\&quot;);\nconst { BlobServiceClient } = require(\&quot;@azure/storage-blob\&quot;);\n\nconst AZURE_STORAGE_CONNECTION_STRING = \&quot;DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxxx;EndpointSuffix=core.windows.net\&quot;;\nconst fileName = \&quot;./file.html\&quot;;\nconst containerName = \&quot;$web\&quot;;\n\nasync function uploadToBlob(fileName) {\n  const blobServiceClient = await BlobServiceClient.fromConnectionString(\n    AZURE_STORAGE_CONNECTION_STRING\n  );\n\n  const containerClient = await blobServiceClient.getContainerClient(\n    containerName\n  );\n\n  const blockBlobClient = containerClient.getBlockBlobClient(\&quot;file.html\&quot;);\n  const data = fs.readFileSync(fileName);\n  const contentType = mime.getType(fileName);\n  const options = {\n    blobHTTPHeaders: {\n      blobContentType: contentType,\n    },\n  };\n\n  return await blockBlobClient.upload(data, data.length, options);\n}\n\nuploadToBlob(fileName)\n  .then((result) =\u003e console.log(result))\n  .catch((e) => console.error(e));\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token keyword\&quot;>const</span> mime <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token function\&quot;>require</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;mime\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token keyword\&quot;>const</span> <span class=\&quot;token punctuation\&quot;>{</span> BlobServiceClient <span class=\&quot;token punctuation\&quot;>}</span> <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token function\&quot;>require</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;@azure/storage-blob\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n<span class=\&quot;token keyword\&quot;>const</span> <span class=\&quot;token constant\&quot;>AZURE_STORAGE_CONNECTION_STRING</span> <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token string\&quot;>\&quot;DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxxx;EndpointSuffix=core.windows.net\&quot;</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token keyword\&quot;>const</span> fileName <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token string\&quot;>\&quot;./file.html\&quot;</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token keyword\&quot;>const</span> containerName <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token string\&quot;>\&quot;$web\&quot;</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n<span class=\&quot;token keyword\&quot;>async</span> <span class=\&quot;token keyword\&quot;>function</span> <span class=\&quot;token function\&quot;>uploadToBlob</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>fileName</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>{</span>\n  <span class=\&quot;token keyword\&quot;>const</span> blobServiceClient <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token keyword\&quot;>await</span> BlobServiceClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>fromConnectionString</span><span class=\&quot;token punctuation\&quot;>(</span>\n    <span class=\&quot;token constant\&quot;>AZURE_STORAGE_CONNECTION_STRING</span>\n  <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n  <span class=\&quot;token keyword\&quot;>const</span> containerClient <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token keyword\&quot;>await</span> blobServiceClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>getContainerClient</span><span class=\&quot;token punctuation\&quot;>(</span>\n    containerName\n  <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n  <span class=\&quot;token keyword\&quot;>const</span> blockBlobClient <span class=\&quot;token operator\&quot;>=</span> containerClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>getBlockBlobClient</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;file.html\&quot;</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n  <span class=\&quot;token keyword\&quot;>const</span> data <span class=\&quot;token operator\&quot;>=</span> fs<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>readFileSync</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n  <span class=\&quot;token keyword\&quot;>const</span> contentType <span class=\&quot;token operator\&quot;>=</span> mime<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>getType</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n  <span class=\&quot;token keyword\&quot;>const</span> options <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>{</span>\n    <span class=\&quot;token literal-property property\&quot;>blobHTTPHeaders</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span>\n      <span class=\&quot;token literal-property property\&quot;>blobContentType</span><span class=\&quot;token operator\&quot;>:</span> contentType<span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n  <span class=\&quot;token keyword\&quot;>return</span> <span class=\&quot;token keyword\&quot;>await</span> blockBlobClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>upload</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>,</span> data<span class=\&quot;token punctuation\&quot;>.</span>length<span class=\&quot;token punctuation\&quot;>,</span> options<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n\n<span class=\&quot;token function\&quot;>uploadToBlob</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span>\n  <span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>result</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>result<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n  <span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>catch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>e</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>error</span><span class=\&quot;token punctuation\&quot;>(</span>e<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n&quot;}"><span class="token keyword">const</span> mime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> BlobServiceClient <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@azure/storage-blob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">AZURE_STORAGE_CONNECTION_STRING</span> <span class="token operator">=</span> <span class="token string">"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxxx;EndpointSuffix=core.windows.net"</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token string">"./file.html"</span><span class="token punctuation">;</span><span class="token keyword">const</span> containerName <span class="token operator">=</span> <span class="token string">"$web"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">uploadToBlob</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> blobServiceClient <span class="token operator">=</span> <span class="token keyword">await</span> BlobServiceClient<span class="token punctuation">.</span><span class="token function">fromConnectionString</span><span class="token punctuation">(</span>    <span class="token constant">AZURE_STORAGE_CONNECTION_STRING</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> containerClient <span class="token operator">=</span> <span class="token keyword">await</span> blobServiceClient<span class="token punctuation">.</span><span class="token function">getContainerClient</span><span class="token punctuation">(</span>    containerName  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> blockBlobClient <span class="token operator">=</span> containerClient<span class="token punctuation">.</span><span class="token function">getBlockBlobClient</span><span class="token punctuation">(</span><span class="token string">"file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> contentType <span class="token operator">=</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">blobHTTPHeaders</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">blobContentType</span><span class="token operator">:</span> contentType<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> blockBlobClient<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">uploadToBlob</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ポイントは mime で Content-Type を判別して、blobContentType に突っ込む、ってこれ普通に node やってる人からしたあたりまえなのかな。公式サンプル無いのなんでなんだろ… すごい悩んだ。</p><p>まとめてアップロードする時は glob 使ってこんな感じ。</p><pre class="language-js" style="" tabindex="0"><code id="ed008e3d" class="language-js" data-prism-hydrate="{&quot;element&quot;:&quot;ed008e3d&quot;,&quot;language&quot;:&quot;js&quot;,&quot;code&quot;:&quot;\nasync function uploadFolderToBlob() {\n  const blobServiceClient = await BlobServiceClient.fromConnectionString(\n    AZURE_STORAGE_CONNECTION_STRING\n  );\n\n  const containerClient = await blobServiceClient.getContainerClient(\n    containerName\n  );\n\n  return Promise.all(\n    glob(\&quot;./public/**/*.*\&quot;, { nodir: true, sync: true }).map(async (fileName) =\u003e {\n      console.log(fileName);\n      const blockBlobClient = containerClient.getBlockBlobClient(fileName);\n      const data = fs.readFileSync(fileName);\n      const contentType = mime.getType(fileName);\n      const options = {\n        blobHTTPHeaders: {\n          blobContentType: contentType,\n        },\n      };\n      return await blockBlobClient.upload(data, data.length, options);\n    })\n  );\n}\n\nuploadFolderToBlob()\n  .then((results) => console.log(results))\n  .catch((e) => console.error(e));\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token keyword\&quot;>async</span> <span class=\&quot;token keyword\&quot;>function</span> <span class=\&quot;token function\&quot;>uploadFolderToBlob</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token punctuation\&quot;>{</span>\n  <span class=\&quot;token keyword\&quot;>const</span> blobServiceClient <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token keyword\&quot;>await</span> BlobServiceClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>fromConnectionString</span><span class=\&quot;token punctuation\&quot;>(</span>\n    <span class=\&quot;token constant\&quot;>AZURE_STORAGE_CONNECTION_STRING</span>\n  <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n  <span class=\&quot;token keyword\&quot;>const</span> containerClient <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token keyword\&quot;>await</span> blobServiceClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>getContainerClient</span><span class=\&quot;token punctuation\&quot;>(</span>\n    containerName\n  <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n  <span class=\&quot;token keyword\&quot;>return</span> Promise<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>all</span><span class=\&quot;token punctuation\&quot;>(</span>\n    <span class=\&quot;token function\&quot;>glob</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>\&quot;./public/**/*.*\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token punctuation\&quot;>{</span> <span class=\&quot;token literal-property property\&quot;>nodir</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token boolean\&quot;>true</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token literal-property property\&quot;>sync</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token boolean\&quot;>true</span> <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>map</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token keyword\&quot;>async</span> <span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>fileName</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>=></span> <span class=\&quot;token punctuation\&quot;>{</span>\n      console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n      <span class=\&quot;token keyword\&quot;>const</span> blockBlobClient <span class=\&quot;token operator\&quot;>=</span> containerClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>getBlockBlobClient</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n      <span class=\&quot;token keyword\&quot;>const</span> data <span class=\&quot;token operator\&quot;>=</span> fs<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>readFileSync</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n      <span class=\&quot;token keyword\&quot;>const</span> contentType <span class=\&quot;token operator\&quot;>=</span> mime<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>getType</span><span class=\&quot;token punctuation\&quot;>(</span>fileName<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n      <span class=\&quot;token keyword\&quot;>const</span> options <span class=\&quot;token operator\&quot;>=</span> <span class=\&quot;token punctuation\&quot;>{</span>\n        <span class=\&quot;token literal-property property\&quot;>blobHTTPHeaders</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>{</span>\n          <span class=\&quot;token literal-property property\&quot;>blobContentType</span><span class=\&quot;token operator\&quot;>:</span> contentType<span class=\&quot;token punctuation\&quot;>,</span>\n        <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span>\n      <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>;</span>\n      <span class=\&quot;token keyword\&quot;>return</span> <span class=\&quot;token keyword\&quot;>await</span> blockBlobClient<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>upload</span><span class=\&quot;token punctuation\&quot;>(</span>data<span class=\&quot;token punctuation\&quot;>,</span> data<span class=\&quot;token punctuation\&quot;>.</span>length<span class=\&quot;token punctuation\&quot;>,</span> options<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n    <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>)</span>\n  <span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n\n<span class=\&quot;token function\&quot;>uploadFolderToBlob</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>)</span>\n  <span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>then</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>results</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>log</span><span class=\&quot;token punctuation\&quot;>(</span>results<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span>\n  <span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>catch</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token parameter\&quot;>e</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>=></span> console<span class=\&quot;token punctuation\&quot;>.</span><span class=\&quot;token function\&quot;>error</span><span class=\&quot;token punctuation\&quot;>(</span>e<span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>)</span><span class=\&quot;token punctuation\&quot;>;</span>\n&quot;}"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">uploadFolderToBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> blobServiceClient <span class="token operator">=</span> <span class="token keyword">await</span> BlobServiceClient<span class="token punctuation">.</span><span class="token function">fromConnectionString</span><span class="token punctuation">(</span>    <span class="token constant">AZURE_STORAGE_CONNECTION_STRING</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> containerClient <span class="token operator">=</span> <span class="token keyword">await</span> blobServiceClient<span class="token punctuation">.</span><span class="token function">getContainerClient</span><span class="token punctuation">(</span>    containerName  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>    <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.*"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">nodir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">sync</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> blockBlobClient <span class="token operator">=</span> containerClient<span class="token punctuation">.</span><span class="token function">getBlockBlobClient</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> contentType <span class="token operator">=</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">blobHTTPHeaders</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">blobContentType</span><span class="token operator">:</span> contentType<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">await</span> blockBlobClient<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">uploadFolderToBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise.all()</code> で Promise のリストを包んでやるのがポイント。相変わらず非同期処理の書き方が分かってないので、いつもググりながら書いてる。<br>試した感じ fileName が <code>./path/to/file</code> みたくなっても、いい感じにアップロードしてくれるらしい。<br>(上記の例だと <code>$web/path/to/file</code> にアップロードされる)</p><p>今年も 1&#x2F;3 が終わってしまった。そろそろ Azure AD B2C のカスタム ポリシーのまとめネタを書きたいけど、相変わらず全然わからんのでちょいネタでブログ更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半年に 1 回ぐらい Azure Storage Blob を触るんだけど、毎回 Content-Type をセットするのを忘れてハマっている。&lt;br&gt;今回は nodejs で書いたので、忘れないようにメモ。&lt;/p&gt;
&lt;p&gt;パッケージとして &lt;code&gt;@azure/storage-blob&lt;/code&gt; を使う。あとファイル検索のために &lt;code&gt;glob&lt;/code&gt; もつかう。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="javascript" scheme="http://blog.haniyama.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD で OAuth/OIDC トークンのクレームをカスタマイズする</title>
    <link href="http://blog.haniyama.com/2020/02/16/customize-aad-token-claims/"/>
    <id>http://blog.haniyama.com/2020/02/16/customize-aad-token-claims/</id>
    <published>2020-02-16T09:24:36.000Z</published>
    <updated>2022-05-18T13:45:29.042Z</updated>
    
    <content type="html"><![CDATA[<p>Azure AD が発行するトークンをカスタマイズする方法を少し調べたのでメモ。</p><h2 id="トークンのカスタマイズ"><a href="#トークンのカスタマイズ" class="headerlink" title="トークンのカスタマイズ"></a>トークンのカスタマイズ</h2><p>そもそも Azure AD のトークンのカスタマイズをする理由としては大きく分けると以下の 2 つだと思う。</p><ol><li>連携アプリに対して発行する <strong>ID トークン</strong> の属性を追加・既存の属性をカスタマイズする。</li><li>Azure AD に登録した Web API を利用する用に <strong>アクセス トークン</strong> をカスタマイズする。</li></ol><p>前者はアプリ側で Azure AD の属性を使いたい場合に利用する。</p><span id="more"></span><h3 id="ID-トークンのカスタマイズ"><a href="#ID-トークンのカスタマイズ" class="headerlink" title="ID トークンのカスタマイズ"></a>ID トークンのカスタマイズ</h3><p>たとえば所属しているグループや、ゲストユーザーか否か、特定の Role を持っているかなどといった情報を、連携アプリに渡すために ID トークンを利用する。<br>MS Graph で取得できる情報もあると思うが、アプリ側で Graph を叩く必要がないのと、認証時の状態を取得できるので必要に応じて使いわければいいのかと思う。</p><h3 id="アクセス-トークンのカスタマイズ"><a href="#アクセス-トークンのカスタマイズ" class="headerlink" title="アクセス トークンのカスタマイズ"></a>アクセス トークンのカスタマイズ</h3><p>後者は RBAC なアクセス許可を Azure AD がもつ属性をベースに行いたいときに利用できる。<br>サインインのみのアプリであれば ID トークンに含めた値を使えば良いし、スコープを指定してアクセス トークンに含めることもできる。</p><p>あまりに情報を詰め込みすぎると、query で送る場合は URL クエリーの長さ制限に引っかかるのでその点は気を付けたほうが良さそう。<br>設定の仕方自体は ID トークン、アクセス トークン共に大きく差はないはずだけど、すべて検証したわけじゃないのでどっかに罠があるかも。</p><h2 id="トークン-の属性を追加・既存の属性をカスタマイズする"><a href="#トークン-の属性を追加・既存の属性をカスタマイズする" class="headerlink" title="トークン の属性を追加・既存の属性をカスタマイズする"></a>トークン の属性を追加・既存の属性をカスタマイズする</h2><h3 id="属性を追加する"><a href="#属性を追加する" class="headerlink" title="属性を追加する"></a>属性を追加する</h3><p>参考: <a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/active-directory-optional-claims">Azure AD アプリに省略可能な要求を提供する - Microsoft identity platform | Microsoft Docs</a></p><p>トークンに属性を追加するにはアプリのマニフェストを編集する必要があったが、最近 Azure ポータル上の GUI でできるようになった。<br>具体的には <code>Azure Active Directory</code> &gt; <code>アプリの登録</code> &gt; 対象アプリの <code>トークン構成 (プレビュー)</code> から、追加のクレームを選択する。</p><p><img src="/2020/02/16/customize-aad-token-claims/optional-claims.png"></p><p>とりあえず、全部選択して ID トークンを発行してみたが、デバイス登録しなければ取得できない属性やオンプレからの同期属性もあり、クラウド ユーザーで取得できたのはこれだけ。</p><pre class="language-json" style="" tabindex="0"><code id="8378933e" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;8378933e&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n{\n  \&quot;aud\&quot;: \&quot;815680bb-ebc9-4e5f-a594-f2c55b83bb27\&quot;,\n  \&quot;iss\&quot;: \&quot;https://login.microsoftonline.com/b9e35cac-a7b8-48dd-a102-bba18eaca524/v2.0\&quot;,\n  \&quot;iat\&quot;: 1581832899,\n  \&quot;nbf\&quot;: 1581832899,\n  \&quot;exp\&quot;: 1581836799,\n  \&quot;family_name\&quot;: \&quot;example\&quot;,\n  \&quot;given_name\&quot;: \&quot;watahani\&quot;,\n  \&quot;auth_time\&quot;: 1581833193,//認証時刻\n  \&quot;acct\&quot;: 0,//アカウントの種類 ゲストの場合 1\n  \&quot;ipaddr\&quot;: \&quot;xxx.249.32.yyy\&quot;, //IP アドレス\n  \&quot;platf\&quot;: \&quot;3\&quot;, //プラットフォーム、Win/macOS など入るっぽい。3 は無し？\n  \&quot;xms_tpl\&quot;: \&quot;ja\&quot;,//Tenant Preferred Language\n  \&quot;tenant_ctry\&quot;: \&quot;JP\&quot;, //テナントデフォルトの country code\n  \&quot;tenant_region_scope\&quot;: \&quot;AS\&quot;, //リージョン\n  \&quot;sid\&quot;: \&quot;f18a735d-0753-4de7-b038-fa1f84fc3751\&quot;,//セッション ID\n  //いつもの\n  \&quot;name\&quot;: \&quot;example watahani\&quot;,\n  \&quot;nonce\&quot;: \&quot;defaultNonce\&quot;,\n  \&quot;oid\&quot;: \&quot;992f309f-2fab-45fa-9e56-f02216d2e0a7\&quot;,\n  \&quot;preferred_username\&quot;: \&quot;example@watahani.com\&quot;,\n  \&quot;sub\&quot;: \&quot;TDuey17YS4iCKyTxdnT-sx5P6juRfTbiiN4FrnaYqn4\&quot;,\n  \&quot;tid\&quot;: \&quot;b9e35cac-a7b8-48dd-a102-bba18eaca524\&quot;, \n  \&quot;upn\&quot;: \&quot;example@watahani.com\&quot;, \n  \&quot;ver\&quot;: \&quot;2.0\&quot;\n}\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token punctuation\&quot;\u003e{</span>\n  <span class=\&quot;token property\&quot;>\&quot;aud\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;815680bb-ebc9-4e5f-a594-f2c55b83bb27\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;iss\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;https://login.microsoftonline.com/b9e35cac-a7b8-48dd-a102-bba18eaca524/v2.0\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;iat\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581832899</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;nbf\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581832899</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;exp\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581836799</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;family_name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;given_name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;auth_time\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581833193</span><span class=\&quot;token punctuation\&quot;>,</span><span class=\&quot;token comment\&quot;>//認証時刻</span>\n  <span class=\&quot;token property\&quot;>\&quot;acct\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>0</span><span class=\&quot;token punctuation\&quot;>,</span><span class=\&quot;token comment\&quot;>//アカウントの種類 ゲストの場合 1</span>\n  <span class=\&quot;token property\&quot;>\&quot;ipaddr\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;xxx.249.32.yyy\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token comment\&quot;>//IP アドレス</span>\n  <span class=\&quot;token property\&quot;>\&quot;platf\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;3\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token comment\&quot;>//プラットフォーム、Win/macOS など入るっぽい。3 は無し？</span>\n  <span class=\&quot;token property\&quot;>\&quot;xms_tpl\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;ja\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span><span class=\&quot;token comment\&quot;>//Tenant Preferred Language</span>\n  <span class=\&quot;token property\&quot;>\&quot;tenant_ctry\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;JP\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token comment\&quot;>//テナントデフォルトの country code</span>\n  <span class=\&quot;token property\&quot;>\&quot;tenant_region_scope\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;AS\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> <span class=\&quot;token comment\&quot;>//リージョン</span>\n  <span class=\&quot;token property\&quot;>\&quot;sid\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;f18a735d-0753-4de7-b038-fa1f84fc3751\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span><span class=\&quot;token comment\&quot;>//セッション ID</span>\n  <span class=\&quot;token comment\&quot;>//いつもの</span>\n  <span class=\&quot;token property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;nonce\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;defaultNonce\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;oid\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;992f309f-2fab-45fa-9e56-f02216d2e0a7\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;preferred_username\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example@watahani.com\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;sub\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;TDuey17YS4iCKyTxdnT-sx5P6juRfTbiiN4FrnaYqn4\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;tid\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;b9e35cac-a7b8-48dd-a102-bba18eaca524\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> \n  <span class=\&quot;token property\&quot;>\&quot;upn\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example@watahani.com\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span> \n  <span class=\&quot;token property\&quot;>\&quot;ver\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;2.0\&quot;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n&quot;}"><span class="token punctuation">{</span>  <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token string">"815680bb-ebc9-4e5f-a594-f2c55b83bb27"</span><span class="token punctuation">,</span>  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"https://login.microsoftonline.com/b9e35cac-a7b8-48dd-a102-bba18eaca524/v2.0"</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1581832899</span><span class="token punctuation">,</span>  <span class="token property">"nbf"</span><span class="token operator">:</span> <span class="token number">1581832899</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1581836799</span><span class="token punctuation">,</span>  <span class="token property">"family_name"</span><span class="token operator">:</span> <span class="token string">"example"</span><span class="token punctuation">,</span>  <span class="token property">"given_name"</span><span class="token operator">:</span> <span class="token string">"watahani"</span><span class="token punctuation">,</span>  <span class="token property">"auth_time"</span><span class="token operator">:</span> <span class="token number">1581833193</span><span class="token punctuation">,</span><span class="token comment">//認証時刻</span>  <span class="token property">"acct"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//アカウントの種類 ゲストの場合 1</span>  <span class="token property">"ipaddr"</span><span class="token operator">:</span> <span class="token string">"xxx.249.32.yyy"</span><span class="token punctuation">,</span> <span class="token comment">//IP アドレス</span>  <span class="token property">"platf"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token comment">//プラットフォーム、Win/macOS など入るっぽい。3 は無し？</span>  <span class="token property">"xms_tpl"</span><span class="token operator">:</span> <span class="token string">"ja"</span><span class="token punctuation">,</span><span class="token comment">//Tenant Preferred Language</span>  <span class="token property">"tenant_ctry"</span><span class="token operator">:</span> <span class="token string">"JP"</span><span class="token punctuation">,</span> <span class="token comment">//テナントデフォルトの country code</span>  <span class="token property">"tenant_region_scope"</span><span class="token operator">:</span> <span class="token string">"AS"</span><span class="token punctuation">,</span> <span class="token comment">//リージョン</span>  <span class="token property">"sid"</span><span class="token operator">:</span> <span class="token string">"f18a735d-0753-4de7-b038-fa1f84fc3751"</span><span class="token punctuation">,</span><span class="token comment">//セッション ID</span>  <span class="token comment">//いつもの</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"example watahani"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"defaultNonce"</span><span class="token punctuation">,</span>  <span class="token property">"oid"</span><span class="token operator">:</span> <span class="token string">"992f309f-2fab-45fa-9e56-f02216d2e0a7"</span><span class="token punctuation">,</span>  <span class="token property">"preferred_username"</span><span class="token operator">:</span> <span class="token string">"example@watahani.com"</span><span class="token punctuation">,</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"TDuey17YS4iCKyTxdnT-sx5P6juRfTbiiN4FrnaYqn4"</span><span class="token punctuation">,</span>  <span class="token property">"tid"</span><span class="token operator">:</span> <span class="token string">"b9e35cac-a7b8-48dd-a102-bba18eaca524"</span><span class="token punctuation">,</span>   <span class="token property">"upn"</span><span class="token operator">:</span> <span class="token string">"example@watahani.com"</span><span class="token punctuation">,</span>   <span class="token property">"ver"</span><span class="token operator">:</span> <span class="token string">"2.0"</span><span class="token punctuation">}</span></code></pre><p>簡単ですね。</p><h3 id="グループをクレームに含める"><a href="#グループをクレームに含める" class="headerlink" title="グループをクレームに含める"></a>グループをクレームに含める</h3><p>Azure AD で所属しているセキュリティ グループを追加することもできる。</p><p><img src="/2020/02/16/customize-aad-token-claims/groups-claims.png"></p><p>ID トークンに出力されるグループはこんな感じ。</p><pre class="language-json" style="" tabindex="0"><code id="94e2173f" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;94e2173f&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n{\n    \&quot;groups\&quot;: [\n    \&quot;ebeac31c-d21e-40bd-8cac-06ce217b2bcc\&quot; //group の objectId\n  ],\n} \n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token punctuation\&quot;\u003e{</span>\n    <span class=\&quot;token property\&quot;>\&quot;groups\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>[</span>\n    <span class=\&quot;token string\&quot;>\&quot;ebeac31c-d21e-40bd-8cac-06ce217b2bcc\&quot;</span> <span class=\&quot;token comment\&quot;>//group の objectId</span>\n  <span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>,</span>\n<span class=\&quot;token punctuation\&quot;>}</span> \n&quot;}"><span class="token punctuation">{</span>    <span class="token property">"groups"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"ebeac31c-d21e-40bd-8cac-06ce217b2bcc"</span> <span class="token comment">//group の objectId</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span> </code></pre><p>ただし、グループは Object ID で出力されるので Group 名とか引っ張ってくるには Graph を叩く必要がある。<br><code>グループをロール要求として生成する</code> を有効にすると、groups ではなく roles として出力される。</p><pre class="language-json" style="" tabindex="0"><code id="3d5c483e" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;3d5c483e&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n{\n  \&quot;roles\&quot;: [\n    \&quot;ebeac31c-d21e-40bd-8cac-06ce217b2bcc\&quot;\n  ],\n}\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token punctuation\&quot;\u003e{</span>\n  <span class=\&quot;token property\&quot;>\&quot;roles\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>[</span>\n    <span class=\&quot;token string\&quot;>\&quot;ebeac31c-d21e-40bd-8cac-06ce217b2bcc\&quot;</span>\n  <span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>,</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n&quot;}"><span class="token punctuation">{</span>  <span class="token property">"roles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"ebeac31c-d21e-40bd-8cac-06ce217b2bcc"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>これ、グループがほんとに大量にある組織で使ったらトークンドエライことになりそうですね。</p><h3 id="属性をカスタマイズする"><a href="#属性をカスタマイズする" class="headerlink" title="属性をカスタマイズする"></a>属性をカスタマイズする</h3><p>あまり機会はないかもしれないが、既存の属性を上書きしたいこともあるかもしれない。<br>Azure AD のトークンを使う以上、デフォルトの属性を使うのが良いと思うが、やんごとなき理由により既存の属性を上書きするには Claim Mapping Policy を利用する。</p><pre class="language-powershell" style="" tabindex="0"><code id="ada2683f" class="language-powershell" data-prism-hydrate="{&quot;element&quot;:&quot;ada2683f&quot;,&quot;language&quot;:&quot;powershell&quot;,&quot;code&quot;:&quot;\nInstall-Module AzureADPreview\nConnect-AzureAD\n\n# name 属性に UPN をセットするポリシーを作成\n$policy = New-AzureADPolicy -Definition @(\u0027{\&quot;ClaimsMappingPolicy\&quot;:{\&quot;Version\&quot;:1,\&quot;IncludeBasicClaimSet\&quot;:\&quot;true\&quot;, \&quot;ClaimsSchema\&quot;: [{\&quot;Source\&quot;:\&quot;user\&quot;,\&quot;ID\&quot;:\&quot;userprincipalname\&quot;,\&quot;JwtClaimType\&quot;:\&quot;name\&quot;}]}}') -DisplayName \&quot;JwtClaimMappingUPNAsName\&quot; -Type \&quot;ClaimsMappingPolicy\&quot;;\n\n$sp = Get-AzureADServicePrincipal -Filter \&quot;DisplayName eq 'Optional Claims'\&quot;;\n\nAdd-AzureADServicePrincipalPolicy -Id $sp.ObjectId -RefObjectId  $policy.Id\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token function\&quot;\u003eInstall-Module</span> AzureADPreview\n<span class=\&quot;token function\&quot;>Connect-AzureAD</span>\n\n<span class=\&quot;token comment\&quot;># name 属性に UPN をセットするポリシーを作成</span>\n<span class=\&quot;token variable\&quot;>$policy</span> = <span class=\&quot;token function\&quot;>New-AzureADPolicy</span> <span class=\&quot;token operator\&quot;>-</span>Definition @<span class=\&quot;token punctuation\&quot;>(</span><span class=\&quot;token string\&quot;>'{\&quot;ClaimsMappingPolicy\&quot;:{\&quot;Version\&quot;:1,\&quot;IncludeBasicClaimSet\&quot;:\&quot;true\&quot;, \&quot;ClaimsSchema\&quot;: [{\&quot;Source\&quot;:\&quot;user\&quot;,\&quot;ID\&quot;:\&quot;userprincipalname\&quot;,\&quot;JwtClaimType\&quot;:\&quot;name\&quot;}]}}'</span><span class=\&quot;token punctuation\&quot;>)</span> <span class=\&quot;token operator\&quot;>-</span>DisplayName <span class=\&quot;token string\&quot;>\&quot;JwtClaimMappingUPNAsName\&quot;</span> <span class=\&quot;token operator\&quot;>-</span><span class=\&quot;token function\&quot;>Type</span> <span class=\&quot;token string\&quot;>\&quot;ClaimsMappingPolicy\&quot;</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n<span class=\&quot;token variable\&quot;>$sp</span> = <span class=\&quot;token function\&quot;>Get-AzureADServicePrincipal</span> <span class=\&quot;token operator\&quot;>-</span><span class=\&quot;token keyword\&quot;>Filter</span> <span class=\&quot;token string\&quot;>\&quot;DisplayName eq 'Optional Claims'\&quot;</span><span class=\&quot;token punctuation\&quot;>;</span>\n\n<span class=\&quot;token function\&quot;>Add-AzureADServicePrincipalPolicy</span> <span class=\&quot;token operator\&quot;>-</span>Id <span class=\&quot;token variable\&quot;>$sp</span><span class=\&quot;token punctuation\&quot;>.</span>ObjectId <span class=\&quot;token operator\&quot;>-</span>RefObjectId  <span class=\&quot;token variable\&quot;>$policy</span><span class=\&quot;token punctuation\&quot;>.</span>Id\n&quot;}"><span class="token function">Install-Module</span> AzureADPreview<span class="token function">Connect-AzureAD</span><span class="token comment"># name 属性に UPN をセットするポリシーを作成</span><span class="token variable">$policy</span> = <span class="token function">New-AzureADPolicy</span> <span class="token operator">-</span>Definition @<span class="token punctuation">(</span><span class="token string">'{"ClaimsMappingPolicy":{"Version":1,"IncludeBasicClaimSet":"true", "ClaimsSchema": [{"Source":"user","ID":"userprincipalname","JwtClaimType":"name"}]}}'</span><span class="token punctuation">)</span> <span class="token operator">-</span>DisplayName <span class="token string">"JwtClaimMappingUPNAsName"</span> <span class="token operator">-</span><span class="token function">Type</span> <span class="token string">"ClaimsMappingPolicy"</span><span class="token punctuation">;</span><span class="token variable">$sp</span> = <span class="token function">Get-AzureADServicePrincipal</span> <span class="token operator">-</span><span class="token keyword">Filter</span> <span class="token string">"DisplayName eq 'Optional Claims'"</span><span class="token punctuation">;</span><span class="token function">Add-AzureADServicePrincipalPolicy</span> <span class="token operator">-</span>Id <span class="token variable">$sp</span><span class="token punctuation">.</span>ObjectId <span class="token operator">-</span>RefObjectId  <span class="token variable">$policy</span><span class="token punctuation">.</span>Id</code></pre><p>なんでもかんでもカスタマイズできるのではなく、基本要求セットと呼ばれるクレームのみ変更でき、必須クレームや、<a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/active-directory-claims-mapping#table-1-json-web-token-jwt-restricted-claim-set">制限付き要求セット</a>は変更できない。</p><p>上記コマンドサンプルの例を考えようと思ったが、オンプレの属性を name などの属性にいれるぐらいしか使いどころが思いつかなかった。</p><p>ポリシーを割り当てた状態で、ID トークンを取得しようとすると、AADSTS50146 エラーが発生する。</p><p><img src="/2020/02/16/customize-aad-token-claims/claim-mapping-error.png"></p><blockquote><p>AADSTS50146: This application is required to be configured with an application-specific signing key. It is either not configured with one, or the key has expired or is not yet valid.</p></blockquote><p>文字通りに読めば、アプリ独自の署名用キーをアップロードするひつようがある (し、アップロードすることで解消もできる) が、マニフェストに以下を追加することでも回避できる。</p><pre class="language-json" style="" tabindex="0"><code id="7fec6b3f" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;7fec6b3f&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n  \&quot;acceptMappedClaims\&quot;: true,\n&quot;,&quot;highlightedCode&quot;:&quot;\n  \u003cspan class=\&quot;token property\&quot;\u003e\&quot;acceptMappedClaims\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token boolean\&quot;>true</span><span class=\&quot;token punctuation\&quot;>,</span>\n&quot;}">  <span class="token property">"acceptMappedClaims"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></code></pre><p><img src="/2020/02/16/customize-aad-token-claims/acceptmappedclaims.png"></p><p>上記を設定を、ID トークンを発行すると、UPN が name 属性として出力された。</p><pre class="language-json" style="" tabindex="0"><code id="5ccd7c3f" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;5ccd7c3f&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n{\n  \&quot;name\&quot;: \&quot;example@watahani.com\&quot;\n}\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token punctuation\&quot;\u003e{</span>\n  <span class=\&quot;token property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example@watahani.com\&quot;</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n&quot;}"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"example@watahani.com"</span><span class="token punctuation">}</span></code></pre><h2 id="ロールをカスタマイズする"><a href="#ロールをカスタマイズする" class="headerlink" title="ロールをカスタマイズする"></a>ロールをカスタマイズする</h2><p>アプリ独自のロールを作成、管理することもできる。<br>グループを roles とすることで、セキュリティ グループや同期グループごとに権限を決定することも出来るので、そちらとの使い分けのをどのようにするのかはっきりと理解できてはいないが、手順は以下のとおり。</p><ul><li><a href="https://docs.microsoft.com/ja-jp/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps">アプリ ロールを追加してトークンから取得する - Microsoft identity platform | Microsoft Docs</a></li></ul><p>上記の記事の通りなのだが、アプリのマニフェスト、あるいはサービス プリンシパルにロールを定義し、ユーザーに割り当てることができる。<br>アプリ自身のロールに加え、Web API として公開したアプリケーションに対しても権限を設定でき、RBAC による API の管理にも利用できる。</p><p>今回はアプリから、Web API を叩く想定で、新しい Web API を登録して、ロールを作成した。</p><h3 id="Web-API-の作成"><a href="#Web-API-の作成" class="headerlink" title="Web API の作成"></a>Web API の作成</h3><p>適当に Web API (RBAC Web API) を作成し、スコープとして File.Write を作る。<br>ユーザーが Consent できるように、さっき作ったアプリを承認済みクライアントに登録する。</p><p><img src="/2020/02/16/customize-aad-token-claims/api-scope.png"></p><p>ロールは適当に管理者による書き込みと、一般ユーザーによる書き込みをイメージして Write_Ad_Admin と Write を設定。</p><p><img src="/2020/02/16/customize-aad-token-claims/api-manifest.png"></p><pre class="language-json" style="" tabindex="0"><code id="28a1733e" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;28a1733e&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n\&quot;appRoles\&quot;: [\n  {\n    \&quot;allowedMemberTypes\&quot;: [\n      \&quot;User\&quot;,\n      \&quot;Application\&quot;\n    ],\n    \&quot;description\&quot;: \&quot;Writer as Administrator\&quot;,\n    \&quot;displayName\&quot;: \&quot;Write_Ad_Admin\&quot;,\n    \&quot;id\&quot;: \&quot;5b2c669d-eee3-406d-8a9b-b98b74cd5018\&quot;,\n    \&quot;isEnabled\&quot;: true,\n    \&quot;lang\&quot;: null,\n    \&quot;origin\&quot;: \&quot;Application\&quot;,\n    \&quot;value\&quot;: \&quot;Write_Ad_Admin\&quot;\n  },\n  {\n    \&quot;allowedMemberTypes\&quot;: [\n      \&quot;User\&quot;\n    ],\n    \&quot;description\&quot;: \&quot;Writer as User\&quot;,\n    \&quot;displayName\&quot;: \&quot;Writer\&quot;,\n    \&quot;id\&quot;: \&quot;66482f6f-d935-4f17-bfcb-32f295d8024b\&quot;,\n    \&quot;isEnabled\&quot;: true,\n    \&quot;lang\&quot;: null,\n    \&quot;origin\&quot;: \&quot;Application\&quot;,\n    \&quot;value\&quot;: \&quot;Writer\&quot;\n  }\n],\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token property\&quot;\u003e\&quot;appRoles\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>[</span>\n  <span class=\&quot;token punctuation\&quot;>{</span>\n    <span class=\&quot;token property\&quot;>\&quot;allowedMemberTypes\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>[</span>\n      <span class=\&quot;token string\&quot;>\&quot;User\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n      <span class=\&quot;token string\&quot;>\&quot;Application\&quot;</span>\n    <span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;description\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Writer as Administrator\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;displayName\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Write_Ad_Admin\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;id\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;5b2c669d-eee3-406d-8a9b-b98b74cd5018\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;isEnabled\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token boolean\&quot;>true</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;lang\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token null keyword\&quot;>null</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;origin\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Application\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;value\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Write_Ad_Admin\&quot;</span>\n  <span class=\&quot;token punctuation\&quot;>}</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token punctuation\&quot;>{</span>\n    <span class=\&quot;token property\&quot;>\&quot;allowedMemberTypes\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>[</span>\n      <span class=\&quot;token string\&quot;>\&quot;User\&quot;</span>\n    <span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;description\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Writer as User\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;displayName\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Writer\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;id\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;66482f6f-d935-4f17-bfcb-32f295d8024b\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;isEnabled\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token boolean\&quot;>true</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;lang\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token null keyword\&quot;>null</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;origin\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Application\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n    <span class=\&quot;token property\&quot;>\&quot;value\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Writer\&quot;</span>\n  <span class=\&quot;token punctuation\&quot;>}</span>\n<span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>,</span>\n&quot;}"><span class="token property">"appRoles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"allowedMemberTypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"User"</span><span class="token punctuation">,</span>      <span class="token string">"Application"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Writer as Administrator"</span><span class="token punctuation">,</span>    <span class="token property">"displayName"</span><span class="token operator">:</span> <span class="token string">"Write_Ad_Admin"</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"5b2c669d-eee3-406d-8a9b-b98b74cd5018"</span><span class="token punctuation">,</span>    <span class="token property">"isEnabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"origin"</span><span class="token operator">:</span> <span class="token string">"Application"</span><span class="token punctuation">,</span>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Write_Ad_Admin"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"allowedMemberTypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"User"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Writer as User"</span><span class="token punctuation">,</span>    <span class="token property">"displayName"</span><span class="token operator">:</span> <span class="token string">"Writer"</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"66482f6f-d935-4f17-bfcb-32f295d8024b"</span><span class="token punctuation">,</span>    <span class="token property">"isEnabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"origin"</span><span class="token operator">:</span> <span class="token string">"Application"</span><span class="token punctuation">,</span>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Writer"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h3 id="ロールの割り当て"><a href="#ロールの割り当て" class="headerlink" title="ロールの割り当て"></a>ロールの割り当て</h3><p>そして、対象のアプリでユーザーを割り当てる。<br>エンタープライズ アプリケーションから <code>RBAC Web API</code> を選択し、ユーザーとグループからロールを割り当てる。</p><p><img src="/2020/02/16/customize-aad-token-claims/assign-group.png"></p><p><del>残念ながら、ロールを割り当てる MS Graph API は存在しない</del> ので、このあたりの制御をアプリで行う場合は特定のグループを割り当てておいて、それぞれのグループにユーザーを割り当てるなど工夫が必要そう。</p><blockquote><p>追記、いつの間にか API が生えていたのか、気づかなかったのか。<br><a href="https://docs.microsoft.com/ja-jp/graph/api/serviceprincipal-post-approleassignments?view=graph-rest-1.0&tabs=http">https://docs.microsoft.com/ja-jp/graph/api/serviceprincipal-post-approleassignments?view=graph-rest-1.0&amp;tabs=http</a></p></blockquote><blockquote><p><del>あれ、じゃあグループをそのままロールとして扱ってしまえば良いのでは…？</del><br>グループが 150 を超えるなど、トークンに含み切れない場合があるし、アプリ独自の Role を定義したい場合もあるだろう。</p></blockquote><p>実際にこの API に対するアクセス トークンを取得する。</p><p>設定したロールは当然、<strong>そのアプリに対する</strong> ロールである。<br>そのためスコープとしてロールが設定されているアプリケーションを指定する必要がある。</p><pre class="language-txt" style="" tabindex="0"><code id="f6c5203c" class="language-txt" data-prism-hydrate="{&quot;element&quot;:&quot;f6c5203c&quot;,&quot;language&quot;:&quot;txt&quot;,&quot;code&quot;:&quot;\nhttps://login.microsoftonline.com/b9e35cac-a7b8-48dd-a102-bba18eaca524/oauth2/v2.0/authorize?\nclient_id=815680bb-ebc9-4e5f-a594-f2c55b83bb27\n\u0026scope=api://d2213a10-046d-4e07-8643-095dbe5262b3/Files.Write \n&amp;redirect_uri=https%3A%2F%2Fjwt.ms\n&amp;response_type=token\n&quot;,&quot;highlightedCode&quot;:&quot;\nhttps://login.microsoftonline.com/b9e35cac-a7b8-48dd-a102-bba18eaca524/oauth2/v2.0/authorize?\nclient_id=815680bb-ebc9-4e5f-a594-f2c55b83bb27\n&amp;amp;scope=api://d2213a10-046d-4e07-8643-095dbe5262b3/Files.Write \n&amp;amp;redirect_uri=https%3A%2F%2Fjwt.ms\n&amp;amp;response_type=token\n&quot;}">https://login.microsoftonline.com/b9e35cac-a7b8-48dd-a102-bba18eaca524/oauth2/v2.0/authorize?client_id=815680bb-ebc9-4e5f-a594-f2c55b83bb27&amp;scope=api://d2213a10-046d-4e07-8643-095dbe5262b3/Files.Write &amp;redirect_uri=https%3A%2F%2Fjwt.ms&amp;response_type=token</code></pre><p>これ、試すとき、Web API とアプリを同じものとしていたため、スコープを指定し忘れてロールが取れなくてすごく悩んだ。<br>MS Graph API 叩くためのトークンには、当然 Roles は含まれない。</p><p>取得したアクセス トークンにはロールが入っている。</p><pre class="language-json" style="" tabindex="0"><code id="ff9f733f" class="language-json" data-prism-hydrate="{&quot;element&quot;:&quot;ff9f733f&quot;,&quot;language&quot;:&quot;json&quot;,&quot;code&quot;:&quot;\n{\n  \&quot;aud\&quot;: \&quot;api://d2213a10-046d-4e07-8643-095dbe5262b3\&quot;,\n  \&quot;iss\&quot;: \&quot;https://sts.windows.net/b9e35cac-a7b8-48dd-a102-bba18eaca524/\&quot;,\n  \&quot;iat\&quot;: 1581840878,\n  \&quot;nbf\&quot;: 1581840878,\n  \&quot;exp\&quot;: 1581844778,\n  \&quot;appid\&quot;: \&quot;815680bb-ebc9-4e5f-a594-f2c55b83bb27\&quot;,\n  \&quot;name\&quot;: \&quot;example watahani\&quot;,\n  \&quot;oid\&quot;: \&quot;992f309f-2fab-45fa-9e56-f02216d2e0a7\&quot;,\n  \&quot;roles\&quot;: [\n    \&quot;Writer\&quot;\n  ],\n  \&quot;scp\&quot;: \&quot;Files.Write\&quot;,\n  \&quot;upn\&quot;: \&quot;example@watahani.com\&quot;,\n  \&quot;uti\&quot;: \&quot;8lfnfIEUUES_MPqR-4okAA\&quot;,\n  \&quot;ver\&quot;: \&quot;1.0\&quot;\n  //略\n}\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token punctuation\&quot;\u003e{</span>\n  <span class=\&quot;token property\&quot;>\&quot;aud\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;api://d2213a10-046d-4e07-8643-095dbe5262b3\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;iss\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;https://sts.windows.net/b9e35cac-a7b8-48dd-a102-bba18eaca524/\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;iat\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581840878</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;nbf\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581840878</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;exp\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token number\&quot;>1581844778</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;appid\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;815680bb-ebc9-4e5f-a594-f2c55b83bb27\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;name\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example watahani\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;oid\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;992f309f-2fab-45fa-9e56-f02216d2e0a7\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;roles\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token punctuation\&quot;>[</span>\n    <span class=\&quot;token string\&quot;>\&quot;Writer\&quot;</span>\n  <span class=\&quot;token punctuation\&quot;>]</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;scp\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;Files.Write\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;upn\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;example@watahani.com\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;uti\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;8lfnfIEUUES_MPqR-4okAA\&quot;</span><span class=\&quot;token punctuation\&quot;>,</span>\n  <span class=\&quot;token property\&quot;>\&quot;ver\&quot;</span><span class=\&quot;token operator\&quot;>:</span> <span class=\&quot;token string\&quot;>\&quot;1.0\&quot;</span>\n  <span class=\&quot;token comment\&quot;>//略</span>\n<span class=\&quot;token punctuation\&quot;>}</span>\n&quot;}"><span class="token punctuation">{</span>  <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token string">"api://d2213a10-046d-4e07-8643-095dbe5262b3"</span><span class="token punctuation">,</span>  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"https://sts.windows.net/b9e35cac-a7b8-48dd-a102-bba18eaca524/"</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1581840878</span><span class="token punctuation">,</span>  <span class="token property">"nbf"</span><span class="token operator">:</span> <span class="token number">1581840878</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1581844778</span><span class="token punctuation">,</span>  <span class="token property">"appid"</span><span class="token operator">:</span> <span class="token string">"815680bb-ebc9-4e5f-a594-f2c55b83bb27"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"example watahani"</span><span class="token punctuation">,</span>  <span class="token property">"oid"</span><span class="token operator">:</span> <span class="token string">"992f309f-2fab-45fa-9e56-f02216d2e0a7"</span><span class="token punctuation">,</span>  <span class="token property">"roles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"Writer"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"scp"</span><span class="token operator">:</span> <span class="token string">"Files.Write"</span><span class="token punctuation">,</span>  <span class="token property">"upn"</span><span class="token operator">:</span> <span class="token string">"example@watahani.com"</span><span class="token punctuation">,</span>  <span class="token property">"uti"</span><span class="token operator">:</span> <span class="token string">"8lfnfIEUUES_MPqR-4okAA"</span><span class="token punctuation">,</span>  <span class="token property">"ver"</span><span class="token operator">:</span> <span class="token string">"1.0"</span>  <span class="token comment">//略</span><span class="token punctuation">}</span></code></pre><p>アクセス トークンを受け取った API 側では、含まれているロールによってふるまいを変えることで RBAC ベースのアクセス制御が可能になる。</p><p>トークンの検証は MSAL ライブラリを利用して適当にやってください。</p><h2 id="雑感"><a href="#雑感" class="headerlink" title="雑感"></a>雑感</h2><p>Azure AD のトークンのカスタマイズ方法を簡単に紹介した。Optional Claims は IP アドレスや言語など使えそうなクレームはあるものの、イマイチユースケースが思いつかなかった。</p><p>一方ロールについてはグループを利用する場合も、独自のロールを設定する場合にも RBAC によるアクセス制御を簡単に制御できそうだった。<br>どっちの方法で管理すべきかはたぶん組織規模やアプリの性質によって変わってきて来るのだろうと思う。<br>前述の通りロールの割り当てを MS Graph API で行う方法は今のところなく、どうせグループをロールに割り当てることになるとは思う。ただ<br>、グループが明確にロールと 1:1 の組織であればグループをそのままロールとして出力しても良さそうだが、普通はそう明確にグループ &#x3D; ロールとは出来ないように思う。</p><p>ということで、ベストプラクティスについてはちょっと誰かが教えてくれることを期待しつつ、ロールが明確になっている会社ほど、こういった RBAC な制御を利用しやすいのかなあと、組織論的なことも少し考えた。</p><p>以前 OpenID Summit に参加したときにも感じたが、ID厨の技術を追っていくには、現実世界の問題についても深く理解する必要もありそうなので、何か手を付けれるところから学習を始めたいところ。</p><p>でも今日はポケモンHOME で 6V メタモン輸送せないかんので、このへんで。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Azure AD が発行するトークンをカスタマイズする方法を少し調べたのでメモ。&lt;/p&gt;
&lt;h2 id=&quot;トークンのカスタマイズ&quot;&gt;&lt;a href=&quot;#トークンのカスタマイズ&quot; class=&quot;headerlink&quot; title=&quot;トークンのカスタマイズ&quot;&gt;&lt;/a&gt;トークンのカスタマイズ&lt;/h2&gt;&lt;p&gt;そもそも Azure AD のトークンのカスタマイズをする理由としては大きく分けると以下の 2 つだと思う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;連携アプリに対して発行する &lt;strong&gt;ID トークン&lt;/strong&gt; の属性を追加・既存の属性をカスタマイズする。&lt;/li&gt;
&lt;li&gt;Azure AD に登録した Web API を利用する用に &lt;strong&gt;アクセス トークン&lt;/strong&gt; をカスタマイズする。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前者はアプリ側で Azure AD の属性を使いたい場合に利用する。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OAuth" scheme="http://blog.haniyama.com/tags/OAuth/"/>
    
      <category term="OIDC" scheme="http://blog.haniyama.com/tags/OIDC/"/>
    
      <category term="Azure AD" scheme="http://blog.haniyama.com/tags/Azure-AD/"/>
    
  </entry>
  
  <entry>
    <title>Azure B2C の FIDO2 サンプルを動かす</title>
    <link href="http://blog.haniyama.com/2019/12/06/azuread-b2c-fido2-custompolicy/"/>
    <id>http://blog.haniyama.com/2019/12/06/azuread-b2c-fido2-custompolicy/</id>
    <published>2019-12-05T16:29:00.000Z</published>
    <updated>2022-05-18T13:45:28.998Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2019/identity">認証認可アドベントカレンダー</a> の6日目の記事です。</p><p>動機: やっぱ OIDC ネタと FIDO ネタが多いから、<strong>どっちも絡めたやつを書けばめっちゃウケるのでは？</strong><br>→ Azure AD B2C に WebAuthn によるパスワードレス サインインを実装するサンプルあったなあ…</p><p>と、苦し紛れにネタをひねり出した結果、くっそニッチな記事になってしまった。</p><span id="more"></span><p>改めて読み直してみても、テーマを Azure B2C にしてしまったことで B2C を触ったことある人で、かつ FIDO に興味ある人という、 <strong>読者 を狭めてしまっている</strong> が、頑張って書いたのでもし全部試したという酔狂な人が (ふじえさん以外で) 居たらフィードバックヨロ。</p><h2 id="Azure-AD-B2C"><a href="#Azure-AD-B2C" class="headerlink" title="Azure AD B2C"></a>Azure AD B2C</h2><p>Azure AD B2C とは、Twitter や Facebook, その他の OpenID Provider を統合し、Azure AD B2C 独自の Id Token, Access Token を発行することが出来る。要は Auth0 的なサービス。(本ブログ二度目)</p><p>組み込みポリシーと呼ばれる既定のプロファイルで、複数の IdP と接続して、サインインフローを作れる。<br>OIDC のプロバイダーを接続するときのクセが強かったりするのだが、カスタム プロバイダーを追加することで、外部の OP を接続できるし、デフォルトの機能も最低限必要なものはそろってる。</p><p>のだが、複雑なビジネスロジックを組み込もうとすると、カスタム ポリシーを弄ることになる。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>あらかじめ注意をしておくと、カスタム ポリシーを弄るのはかなりつらい作業で、メンテナンスも大変なのでできることなら組み込みのポリシーを利用することを <strong>強くオススメする</strong>。</p><p>B2C のカスタム ポリシーはマジでなんでも出来てしまうので、中身がわかってないとなぜ動かないのか全くわからなくなる。</p><p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/active-directory-b2c-overview-custom">公式ドキュメント</a> にも、こう書いてある。</p><blockquote><p>ID のプロフェッショナル、システム インテグレータ、コンサルタント、社内の ID チーム。 彼らは OpenID Connect のフローに慣れており、ID プロバイダーや要求ベースの認証を理解しています。</p></blockquote><blockquote><p>注: Azure Active Directory B2C で、カスタム ポリシーは、主に、複雑なシナリオに取り組む用途向けに設計されています。<br>ほとんどのシナリオで、組み込みユーザー フローを使用することをお勧めします。</p></blockquote><p><strong>意訳: ID のプロフェッショナル以外は使うな</strong></p><p>個人的な意見を追加するなら、ID だけでなく XML のプロフェッショナルである必要があると思う。</p><p>また、本記事ではカスタム ポリシーのチュートリアルについては解説しない。<br>各自公式ドキュメント等で確認してほしい。</p><h2 id="カスタム-ポリシー"><a href="#カスタム-ポリシー" class="headerlink" title="カスタム ポリシー"></a>カスタム ポリシー</h2><p>カスタム ポリシーとは何ぞや。<br>Azure AD B2C は、ソーシャルアカウントと連携し、Azure AD B2C 独自の Id Token, Access Token を発行することが出来る。</p><p>その際各種 IdP と claim のやり取りを行い、検証し、変換し、任意のクレームを構築し、最終的にトークンを払い出す。</p><p>その際には様々なデータが入力される。<br>ユーザーの入力ID/パスワードであったり、ニックネーム、他の IdP から返却されるトークンかもしれない。</p><p>それらの入力から claim を取り出し、変換したり、外部 API で Validation したりして、最終的にトークンを作成し B2C の秘密鍵で署名するのが Azure B2C のキモ。</p><p>この claim の変換規則や、保存先、ユーザーの入力フォーム、それらのすべてを自由にカスタマイズできるのが、カスタム ポリシーである。</p><p>そして設定は <strong>すべて XML に保存されている。</strong></p><p>そう…… <strong>XML</strong> に保存されているのだ。</p><p>サンプルを動かすのに必要な知識は、 以下のブログにまとめられていて、実際に一つのサンプルを動かしてみたのが、今回の記事である。</p><ul><li><a href="https://blog.azure.moe/2019/11/22/%e5%86%b4%e3%81%88%e3%81%aa%e3%81%84custom-policy%e3%81%ae%e8%82%b2%e3%81%a6%e6%96%b9/">冴えないCustom Policyの育て方 | ブチザッキ</a></li></ul><h2 id="今回動かすサンプル"><a href="#今回動かすサンプル" class="headerlink" title="今回動かすサンプル"></a>今回動かすサンプル</h2><p>今回動かすサンプルはこちら。</p><p>Sign-in with FIDO authenticator<br><a href="https://github.com/azure-ad-b2c/samples/tree/master/policies/fido2">https://github.com/azure-ad-b2c/samples/tree/master/policies/fido2</a></p><p>ID/Password でサインインするユーザーに、FIDO2 の Authenticator でサインインするフローを追加するもの。</p><p>最終的な動きはこんな感じ。</p><p>初期登録して<br><img src="https://raw.githubusercontent.com/azure-ad-b2c/samples/master/policies/fido2/media/registration-user-flow.png" alt=""></p><p>認証する。<br><img src="https://github.com/azure-ad-b2c/samples/blob/master/policies/fido2/media/authentication-user-flow.png?raw=true" alt=""></p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>残念ながら、このポリシー、これだけでは動かない。</p><p>まずはカスタム ポリシーの starterpack を構成する必要がある。</p><p><a href="https://github.com/Azure-Samples/active-directory-b2c-custom-policy-starterpack">https://github.com/Azure-Samples/active-directory-b2c-custom-policy-starterpack</a></p><p>幸いカスタム ポリシーの導入はドキュメントがあるので、その通りに構成すればサインインフローができるはず。</p><p>カスタム ポリシーの概要 - Azure Active Directory B2C | Microsoft Docs<br><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/active-directory-b2c-get-started-custom?tabs=applications">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/active-directory-b2c-get-started-custom?tabs=applications</a></p><p>たいていの人はここで XML を見て昇天する。心を強く持ってほしい。</p><p>XML の編集は <a href="https://marketplace.visualstudio.com/items?itemName=AzureADB2CTools.aadb2c">Azure AD B2C の VS Code 拡張</a> を入れると、少しは楽になる。<br>是非入れよう。</p><h2 id="FIDO2-のカスタムポリシー"><a href="#FIDO2-のカスタムポリシー" class="headerlink" title="FIDO2 のカスタムポリシー"></a>FIDO2 のカスタムポリシー</h2><p>さて、事前準備を突破してしまったら、追加のポリシーを設定していく。<br><a href="https://github.com/azure-ad-b2c/samples/tree/master/policies/fido2">サンプル</a> には、認証のコアとなる要求クレームや API コールが定義された <code>FIDOExtensions.xml</code> と、ユーザーが実際にアクセスするフローを定義した <code>FIDORegistration.xml</code> と <code>FIDOSignUpOrSignin.xml</code> がある。</p><p>詳しくは <a href="https://github.com/azure-ad-b2c/ief-wiki/wiki/Policy-structure">ief-wiki</a> などを参照して欲しいが、カスタム ポリシーの XML は先ほど作成した <code>TrustFrameworkBase.xml</code> を継承して、拡張属性などを定義する。最終的に継承された Extension の内容すべてを統合して、B2C のポリシーが完成する。</p><blockquote><p>IEF は dentity Experience Framework の略</p></blockquote><p>今回の場合は <code>TrustFrameworkBase.xml</code> &gt; <code>TrustFrameworkExtensions</code> &gt; <code>FIDOExtensions.xml</code> と継承されている。<br><code>FIDORegistration.xml</code> と <code>FIDOSignUpOrSignin.xml</code> は、継承され統合された <code>FIDOExtensions.xml</code> を参照する。</p><p><code>FIDOExtensions.xml</code> に定義されていない設定は、継承元のどこかに記述されているはずなので、気力があれば継承元のポリシーを覗いてみよう。</p><p>今回は <code>FIDOExtensions.xml</code> のみを編集する。ただし、編集する前に事前準備が必要なので順にやっていく。</p><h3 id="事前準備-1-FIDO2-サーバーの作成"><a href="#事前準備-1-FIDO2-サーバーの作成" class="headerlink" title="事前準備 1. FIDO2 サーバーの作成"></a>事前準備 1. FIDO2 サーバーの作成</h3><p>まずはバックエンドに使う FIDO2 サーバーのサンプルを動かそう。<br>このサンプルでは、FIDO2 のサーバー部分は以下のサンプルを流用している。</p><p><a href="https://github.com/MicrosoftEdge/webauthnsample">https://github.com/MicrosoftEdge/webauthnsample</a></p><p>もともとは HTML も含めたサインアップ/サインインのサンプルだが、ウェブの画面は利用せずに、API だけ利用する。</p><p>ホントは Azure Function とかに載せようとしたけど使い方わからなくて断念。<br>Azure AppService とかも使ったことないので、now.sh にデプロイした。</p><p>注意点としては、最終的に WebAuthn が動くのは B2C のログイン画面、つまり <code>https://yourtenant.b2clogin.com</code> 上なので、rpId も <code>yourtenant.b2clogin.com</code> にしなければならないこと。</p><ul><li>fido.js ファイル内の以下の部分を修正する</li></ul><pre class=" language-diff"><code class="language-diff"><span class="token deleted">- const hostname = process.env.HOSTNAME || "localhost";</span><span class="token inserted">+ const hostname = "yourtenant.b2clogin.com";</span></code></pre><p>now.sh にデプロイするために、<code>now.json</code> を以下のように作成する。</p><script src="https://gist.github.com/watahani/1169bdea01979e888dbe1e18b8c35982.js"></script><p>後は、<code>npm install -g now</code> して <code>now</code> でデプロイ完了。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/nowsh.png" alt=""></p><blockquote><p>now.sh が v2 にバージョンアップしていて困ったが <a href="https://qiita.com/aggre/items/f0cb9f8b8e8c54768e50">Now でクラウドの複雑さから解放されよう、今すぐに - Qiita</a> あたりを参考にした</p></blockquote><p><code>https://source-code.username.now.sh</code> とかでデプロイされるので <code>https://source-code.username.now.sh/challenge</code> にブラウザでアクセスしてチャレンジが返れば OK。</p><p>URL は後で使うのでメモっておく。</p><p>なお、後述するユーザーデータの保存先の関係上、WebAuthn の sign count はチェックしていない。</p><h3 id="事前準備-2-静的ファイルのホスト"><a href="#事前準備-2-静的ファイルのホスト" class="headerlink" title="事前準備 2. 静的ファイルのホスト"></a>事前準備 2. 静的ファイルのホスト</h3><p>WebAuthn のキーを登録/認証するための、カスタム サインインページのための静的 HTML をアップロードする。</p><p>Azure B2C では外部の HTML テンプレートを JavaScript でフェッチして、必要なフォームを埋め込んで表示する。</p><p>今回は、カスタム HTML 上で Authenticator からのレスポンスをフォームに詰めて、次のフローに流す。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2chtml.png" alt=""></p><p>適当に gist でも GitHub のリポジトリでも CORS が許可されている場所であればどこでも適当にアップロードにしていい。</p><p><a href="https://gist.githubusercontent.com/watahani/f94a8362a4cc075a67254eb403c9c1c7/raw/e83697aa603d0c11b78d9f503b4885ac84695601/self-asserted.html">https://gist.githubusercontent.com/watahani/f94a8362a4cc075a67254eb403c9c1c7/raw/e83697aa603d0c11b78d9f503b4885ac84695601/self-asserted.html</a><br><a href="https://gist.githubusercontent.com/watahani/a49bec0c38ad1e2540b829ee4121d8ba/raw/dc5eaa4c36b80459980eae312861fac7339b269c/welcome.html">https://gist.githubusercontent.com/watahani/a49bec0c38ad1e2540b829ee4121d8ba/raw/dc5eaa4c36b80459980eae312861fac7339b269c/welcome.html</a></p><p>URL は後で使うのでメモっておく。</p><h3 id="事前準備-3-アプリの登録"><a href="#事前準備-3-アプリの登録" class="headerlink" title="事前準備 3. アプリの登録"></a>事前準備 3. アプリの登録</h3><p>サンプルでは WebAuthn の Credential ID と公開鍵などを保存するアプリを作成している。<br>アプリケーションに Credential ID を保存する関係上、ユーザーは 1 つの Credential しか保存できない。</p><p>本来別途 DB を用意して、ユーザーと公開鍵を保存すべきだが、Application Extension (拡張プロパティ) に保存している。<br>Custom Policy の練習のためにこうなってるのだと言い聞かせて、設定を進める。</p><ul><li>Azure Active Directory B2C でカスタム ポリシーに独自の属性を追加する | Microsoft Docs<br><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/active-directory-b2c-create-custom-attributes-profile-edit-custom">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/active-directory-b2c-create-custom-attributes-profile-edit-custom</a></li></ul><p>何をやっているか簡単に説明すると、ユーザー属性を保存 &amp; 読み書きするアプリケーションを作成し、カスタムポリシー内で WebAuthn の情報を保存できるようにしている。</p><p>アプリの登録で登録する。アプリの名前は <code>WebApp-GraphAPI-FIDO2-Extensions</code> とした。</p><p>画面はこんな感じ。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/appreg.png" alt=""></p><p>Admin Consent を完了させる。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/apppermission.png" alt=""></p><p>で作成したアプリのオブジェクト ID と アプリケーション ID をメモっておく。</p><h2 id="FIDOExtensions-xml-の編集"><a href="#FIDOExtensions-xml-の編集" class="headerlink" title="FIDOExtensions.xml の編集"></a>FIDOExtensions.xml の編集</h2><p>ここまでの手順を完了した酔狂な人がいた場合、以下のような状態になっているはずである。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/extensions.png" alt=""></p><p>この細切れのコンポーネントを、FIDOExtensions.xml でつないでいく。XML で…。</p><h3 id="UserJourneys"><a href="#UserJourneys" class="headerlink" title="UserJourneys"></a>UserJourneys</h3><p>どんどん認証認可の話が関係なってきているが、先に進みます。</p><p>ユーザーのフローについては、UserJourneys と呼ばれるタグに定義されており、UserJourneys は大抵 Extensions か、SignInSignUp の定義ファイルにある。</p><p>今回は FIDORegistration.xml を軽く (?) みていく。あくまで軽くね。</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserJourneys</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserJourney</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIDO-Registration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationSteps</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Sample: Present the enrollment welcome screen--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-EnrollmentWelcome<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-FIDOEnrollmentWelcome<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CombinedSignInAndSignUp<span class="token punctuation">"</span></span> <span class="token attr-name">ContentDefinitionReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>api.signuporsignin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsProviderSelections</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsProviderSelection</span> <span class="token attr-name">ValidationClaimsExchangeId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LocalAccountSigninEmailExchange<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsProviderSelections</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LocalAccountSigninEmailExchange<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-LocalAccountSignin-Email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Check if the user has selected to sign in using one of the social providers --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Preconditions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Precondition</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExist<span class="token punctuation">"</span></span> <span class="token attr-name">ExecuteActionsIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Value</span><span class="token punctuation">></span></span>objectId<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Value</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Action</span><span class="token punctuation">></span></span>SkipThisOrchestrationStep<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Action</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Precondition</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Preconditions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SignUpWithLogonEmailExchange<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LocalAccountSignUpWithLogonEmail<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent           in the token. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AADUserReadWithObjectId<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-UserReadUsingObjectId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Sample: FIDO get a FIDO challenge value from the REST API service--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOGetChallenge<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOGetChallenge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Sample: FIDO enrollment step--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-Enrollment<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-FIDOEnrollment<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Sample: FIDO enrollment persist data--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-UserWriteFidoUsingObjectId<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-UserWriteFidoUsingObjectId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SendClaims<span class="token punctuation">"</span></span> <span class="token attr-name">CpimIssuerTechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JwtIssuer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationSteps</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClientDefinition</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DefaultWeb<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserJourney</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserJourneys</span><span class="token punctuation">></span></span></code></pre><p>OrchestrationStep の 1 ~ 4 までは通常の認証フローなので今回はスキップ。<br>いつか解説記事を書けたらかくかも。</p><p>5 が API のアクセスを実行する部分。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOGetChallenge<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOGetChallenge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span></code></pre><p>TechnicalProfileReferenceId に <code>REST-FIDOGetChallenge&quot;</code> とあるので、<code>FIDOExtensions.xml</code> の該当する部分を確認すると。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOGetChallenge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">></span></span>GET a FIDO Challenge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Protocol</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Proprietary<span class="token punctuation">"</span></span> <span class="token attr-name">Handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version<span class="token punctuation">=</span>1.0.0.0, Culture<span class="token punctuation">=</span>neutral, PublicKeyToken<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ServiceUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://yoursite.azurewebsites.net/challenge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AuthenticationType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>None<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SendClaimsIn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>QueryString<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Remove in Production--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AllowInsecureAuthInProduction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaims</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>challenge<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--Sample: Set the identity provider name to FIDO--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>identityProvider<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fido<span class="token punctuation">"</span></span> <span class="token attr-name">AlwaysUseDefaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseTechnicalProfileForSessionManagement</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SM-Noop<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">></span></span></code></pre><p>これが TechnicalProfile です!</p><p>このようにAPI をコールして Challenge を取得していることが分かりますね!!</p><p><code>Protocol</code> タグに <code>Handler=&quot;Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</code> と指定があるので、たしかに Rest API ですね!!!</p><p>さて、API のエンドポイントが <a href="https://yoursite.azurewebsites.net/challenge">https://yoursite.azurewebsites.net/challenge</a> になっているので、今回 now.sh 上に構築したエンドポイントに変更。</p><p>この並びに WebAuthn の Assertion と Attestation 他の API もついでに編集しておく。</p><p>蛇足ですが、サンプルの FIDO サーバーが古いので、バックエンドの API が /credentials と /assertion になっているが、今なら <a href="https://fidoalliance.org/specs/fido-v2.0-rd-20180702/fido-server-v2.0-rd-20180702.html">Server Requirements and Transport Binding Profile</a> に準拠するようにエンドポイント名は編集したほうがいいだろう。</p><p>となると XML 部分も直さないといけないし、そもそも B2C で引き回せるクレームとしてどの程度のデータ量が行けるかはよくわかってない。<br>やっぱ普通にサーバーへの認証部分は外部に丸投げしてしまって、ユーザー ID と Authenticator のレスポンスぐらい投げたら True, False が返ってくるぐらい外部のサーバーを作りこんどいたほうが取り回しは楽そう。</p><p>まああくまでサンプルです。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOMakeCredential<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">></span></span>GET a FIDO Challenge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Protocol</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Proprietary<span class="token punctuation">"</span></span> <span class="token attr-name">Handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version<span class="token punctuation">=</span>1.0.0.0, Culture<span class="token punctuation">=</span>neutral, PublicKeyToken<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ServiceUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://yoursite.azurewebsites.net/credentials<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AuthenticationType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>None<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SendClaimsIn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Body<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Remove in Production--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AllowInsecureAuthInProduction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaims</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_rawId<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientDataJSON<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientDataJSON<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attestationObject<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attestationObject<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaims</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fido_publicKeyJwk<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publicKeyJwk<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk1<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publicKeyJwk1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk2<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publicKeyJwk2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseTechnicalProfileForSessionManagement</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SM-Noop<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">></span></span></code></pre><p>これは、登録時に Authenticator のデータを送信すると、デコードして公開鍵を返すコード。<br>ちなみに Attestation は取得しているものの、保存も検証もしていないので悪しからず。</p><p>なぜ publicKeyJwk1 と publicKeyJwk2 があるのかというと、先ほど作成した Azure AD の拡張属性に格納できるデータが 245 文字までなので、長い公開鍵は分割しているからｗ</p><p>ちなみに対応する API はこちら。</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/credentials'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> credential <span class="token operator">=</span> <span class="token keyword">await</span> fido<span class="token punctuation">.</span><span class="token function">makeCredential</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> publicKeyJwkStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>credential<span class="token punctuation">.</span>publicKeyJwk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> publicKeyJwk1 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> publicKeyJwk2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>publicKeyJwkStr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">245</span> <span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            publicKeyJwk1 <span class="token operator">=</span> publicKeyJwkStr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">245</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            publicKeyJwk2 <span class="token operator">=</span> publicKeyJwkStr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">245</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            publicKeyJwk1 <span class="token operator">=</span> publicKeyJwkStr<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            publicKeyJwk<span class="token punctuation">:</span> publicKeyJwkStr<span class="token punctuation">,</span>            publicKeyJwk1<span class="token punctuation">:</span> publicKeyJwk1<span class="token punctuation">,</span>            publicKeyJwk2<span class="token punctuation">:</span> publicKeyJwk2        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">409</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> version<span class="token punctuation">:</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token number">409</span><span class="token punctuation">,</span> userMessage<span class="token punctuation">:</span> <span class="token string">'ERROR: '</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>直観的ではないが、InputCalim が Azure AD B2C から送信するデータで、OutputClaim が API から返されるデータ。</p><p>認証するほうも直しておく。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOAssertion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">></span></span>GET a FIDO Challenge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Protocol</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Proprietary<span class="token punctuation">"</span></span> <span class="token attr-name">Handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version<span class="token punctuation">=</span>1.0.0.0, Culture<span class="token punctuation">=</span>neutral, PublicKeyToken<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ServiceUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://yoursite.azurewebsites.net/assertion<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AuthenticationType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>None<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SendClaimsIn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Body<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Remove in Production--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AllowInsecureAuthInProduction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaims</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_rawId<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientDataJSON<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userHandle<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>signature<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authenticatorData<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk1<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publicKeyJwk1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk2<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publicKeyJwk2<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseTechnicalProfileForSessionManagement</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SM-Noop<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">></span></span></code></pre><p>さっきからちろちろある <code>Remove in Production</code> の警告は、API の認証を無視する設定。<br>本番環境では、ベーシック認証、できれば <strong>証明書認証で API を保護してください。</strong></p><p>API を叩く部分を書いたら、次は step 6.</p><p>そろそろ気持ち悪くなってきましたね。ぼくもです。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-Enrollment<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-FIDOEnrollment<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span></code></pre><p><code>SelfAsserted-FIDOEnrollment</code> を XML で探してみると、さっきと同じ TechnicalProfile タグだけど、 </p><p>Handler に <code>Handler=&quot;Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</code> とあるので、これは Web ページを表示する部分ですね!?</p><p>さっきと同じく、直観的ではないですが OutputClaim が、外部からの入力、今回はユーザーが入力する項目です。<br>実際には Web のテンプレートに、OutputClaim と同じ form が追加され、ユーザーの入力を促します。</p><p>が、今回は WebAuthn のキーでのサインインなので、js で credentials.create したデータを form にいい感じに突っ込みます。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SelfAsserted-FIDOEnrollment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">></span></span>Welcome to FIDO enrollment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Protocol</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Proprietary<span class="token punctuation">"</span></span> <span class="token attr-name">Handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version<span class="token punctuation">=</span>1.0.0.0, Culture<span class="token punctuation">=</span>neutral, PublicKeyToken<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ContentDefinitionReferenceId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>api.selfasserted.fido<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaimsTransformations</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CopyEmailAddress<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CopyDisplayName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIDOEnrollmentCreateRegistrationMessage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputClaimsTransformations</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaims</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMessage<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>readOnlyName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>readOnlyDisplayName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>challenge<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaims</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Sample: Read only claims to present to be sent the authenticator--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMessage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>readOnlyName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>readOnlyDisplayName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>challenge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--Sample: Claims return from the authenticator --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_rawId<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientDataJSON<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attestationObject<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--Sample: Bubble up claims from the validation technical profile--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fido_publicKeyJwk<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk1<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk2<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ValidationTechnicalProfiles</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ValidationTechnicalProfile</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REST-FIDOMakeCredential<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ValidationTechnicalProfiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseTechnicalProfileForSessionManagement</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SM-Noop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">></span></span></code></pre><p>どうやって突っ込んでるの? ってところは、さっき上げた HTML のテンプレート内を見れば分かる。<br>XML に突っ込む部分は <code>ContentDefinitionReferenceId</code> の <code>api.selfasserted.fido</code> にある、LoadUri の定義部分を確認。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Sample: FIDO self-asserted HTML page--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentDefinition</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>api.selfasserted.fido<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoadUri</span><span class="token punctuation">></span></span>https://yourtenant.blob.core.windows.net/azure-ad-b2c/fido/self-asserted.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LoadUri</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RecoveryUri</span><span class="token punctuation">></span></span>~/common/default_page_error.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RecoveryUri</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataUri</span><span class="token punctuation">></span></span>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataUri</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ContentDefinition</span><span class="token punctuation">></span></span>`</code></pre><p>html 内の javascript の当該のコードはこちら。<br>いつもの credentials.get コマンドの終了後に、HTML のフォームに戻り値を突っ込んでます。<br>B2C はフォームを返してしか値を取れないのだ…。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"createCredential started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PublicKeyCredential <span class="token operator">||</span> <span class="token keyword">typeof</span> PublicKeyCredential<span class="token punctuation">.</span>isUserVerifyingPlatformAuthenticatorAvailable <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"WebAuthn APIs are not available on this user agent."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> attachment <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='attachment']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> createCredentialOptions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        rp<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"WebAuthn Sample App"</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> <span class="token string">"https://example.com/rpIcon.png"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            id<span class="token punctuation">:</span> <span class="token function">stringToArrayBuffer</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#objectId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#readOnlyName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            displayName<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#readOnlyDisplayName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> <span class="token string">"https://example.com/userIcon.png"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        pubKeyCredParams<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//External authenticators support the ES256 algorithm</span>                type<span class="token punctuation">:</span> <span class="token string">"public-key"</span><span class="token punctuation">,</span>                alg<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">7</span>                             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>             <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//Windows Hello supports the RS256 algorithm</span>                type<span class="token punctuation">:</span> <span class="token string">"public-key"</span><span class="token punctuation">,</span>                alg<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">257</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        authenticatorSelection<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Select authenticators that support username-less flows</span>            requireResidentKey<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//Select authenticators that have a second factor (e.g. PIN, Bio)</span>            userVerification<span class="token punctuation">:</span> <span class="token string">"required"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//Selects between bound or detachable authenticators</span>            authenticatorAttachment<span class="token punctuation">:</span> attachment        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//Since Edge shows UI, it is better to select larger timeout values</span>        timeout<span class="token punctuation">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//an opaque challenge that the authenticator signs over</span>        challenge<span class="token punctuation">:</span>  <span class="token function">stringToArrayBuffer</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#challenge"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//prevent re-registration by specifying existing credentials here</span>        excludeCredentials<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//specifies whether you need an attestation statement</span>        attestation<span class="token punctuation">:</span> <span class="token string">"none"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>credentials<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        publicKey<span class="token punctuation">:</span> createCredentialOptions    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rawAttestation <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#extension_fido_rawId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token function">base64encode</span><span class="token punctuation">(</span>rawAttestation<span class="token punctuation">.</span>rawId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#clientDataJSON"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token function">base64encode</span><span class="token punctuation">(</span>rawAttestation<span class="token punctuation">.</span>response<span class="token punctuation">.</span>clientDataJSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#attestationObject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token function">base64encode</span><span class="token punctuation">(</span>rawAttestation<span class="token punctuation">.</span>response<span class="token punctuation">.</span>attestationObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"credentialId"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#extension_fido_rawId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#status"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Successfully created credential with ID: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#extension_fido_rawId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDebug<span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#continue"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>と、いうことで、ココの URI をさっき Gist に上げた URI に変更しておく。並びもついでに修正。</p><p><a href="https://gist.githubusercontent.com/watahani/f94a8362a4cc075a67254eb403c9c1c7/raw/e83697aa603d0c11b78d9f503b4885ac84695601/self-asserted.html">https://gist.githubusercontent.com/watahani/f94a8362a4cc075a67254eb403c9c1c7/raw/e83697aa603d0c11b78d9f503b4885ac84695601/self-asserted.html</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Sample: FIDO welcome self-asserted HTML page--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentDefinition</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>api.selfasserted.fido.welcome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoadUri</span><span class="token punctuation">></span></span>https://gist.githubusercontent.com/watahani/a49bec0c38ad1e2540b829ee4121d8ba/raw/dc5eaa4c36b80459980eae312861fac7339b269c/welcome.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LoadUri</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RecoveryUri</span><span class="token punctuation">></span></span>~/common/default_page_error.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RecoveryUri</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataUri</span><span class="token punctuation">></span></span>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataUri</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ContentDefinition</span><span class="token punctuation">></span></span></code></pre><p>いよいよアタマが痛くなってきましたが、最後です。<br>step 7 の <code>AAD-UserWriteFidoUsingObjectId</code> を確認する。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Sample: FIDO enrollment persist data--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClaimsExchange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchanges</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsExchange</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-UserWriteFidoUsingObjectId<span class="token punctuation">"</span></span> <span class="token attr-name">TechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-UserWriteFidoUsingObjectId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsExchanges</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrchestrationStep</span><span class="token punctuation">></span></span></code></pre><p>はい、そろそろ見慣れてきた TechnicalProfile ですが、Protocol がない。<br>代わりに IncludeTechnicalProfile があるのでそちらを見てみると…</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-UserWriteFidoUsingObjectId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Operation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Write<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RaiseErrorIfClaimsPrincipalAlreadyExists<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RaiseErrorIfClaimsPrincipalDoesNotExist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IncludeInSso</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IncludeInSso</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaims</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectId<span class="token punctuation">"</span></span> <span class="token attr-name">Required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PersistedClaims</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Required claims --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PersistedClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Sample: Writ FIDO claims to the user account --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PersistedClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk1<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PersistedClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_publicKeyJwk2<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PersistedClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extension_fido_rawId<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PersistedClaims</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IncludeTechnicalProfile</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-Common<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">></span></span></code></pre><p>AAD-Common の TechnicalProfile を見ると、先ほど作成したアプリの Object ID と Client ID (アプリケーション ID) を入れるところがある!<br>そう、ココが拡張属性を書き込むアプリが定義されている部分。</p><p>ということで、さっき作成したアプリの Client ID と Object ID を突っ込む。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AAD-Common<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">></span></span>Azure Active Directory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--  Sample: Provide objectId and appId before using extension properties.        For more information: https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-create-custom-attributes-profile-edit-custom         Action required: Insert objectId and appId here --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationObjectId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>オブジェクト ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClientId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>アプリケーション ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">></span></span></code></pre><p>XML の編集は以上で終了。</p><p>最後の step 8 はシンプルです。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrchestrationStep</span> <span class="token attr-name">Order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SendClaims<span class="token punctuation">"</span></span> <span class="token attr-name">CpimIssuerTechnicalProfileReferenceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JwtIssuer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>ここまで集めた Claims を Jwt 形式にして sign してアプリに送信するだけ。</p><p>諸々飛ばしたところはありますが、ひとまず XML の作成は完了したので B2C にポリシーをアップしよう。<br>アップできなければエラーメッセージを確認し、頑張って直してください…。</p><p>さて、ここまでやり遂げたあなたなら、先ほどの図も理解できるはずですね。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2ccomponent.png" alt=""></p><p>素晴らしい！ XML が世界を回していることを実感しますね!?</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>最後に動作確認をして、実際の動きを確かめてみる。</p><h3 id="レジストレーション-フロー"><a href="#レジストレーション-フロー" class="headerlink" title="レジストレーション フロー"></a>レジストレーション フロー</h3><p>Authenticator の登録には、既存の資格情報 (ここではパスワード) を入力する。<br>実際に運用するなら、MFA を突破した後のほうがいいけど、これ以上 XML は弄りたくないので。</p><p>登録の前には、再度資格情報が必要という警告を表示して</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_01.png" alt=""></p><p>資格情報を入れて<br><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_02.png" alt=""></p><p>Platform Authenticator か Cross-Platform Authenticator かを選ぶ。<br>今回は SoloKey を使うので Cross-Platform Authenticator。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_03.png" alt=""></p><p>Attestation 要求しているので警告がでて、いつもの。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_04.png" alt=""></p><p>id_token が発行される。</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_05.png" alt=""></p><h3 id="サインイン-フロー"><a href="#サインイン-フロー" class="headerlink" title="サインイン フロー"></a>サインイン フロー</h3><p>サインインの際は、FIDO ボタンをクリックして</p><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_06.png" alt=""></p><p>Authenticate ボタンで js が呼ばれて<br><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_07.png" alt=""></p><p>い つ も の<br><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_08.png" alt=""></p><p>id_token が発行される。<br><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_09.png" alt=""></p><p>Debug ボタンで hidden 状態の form を表示することができる。<br><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/b2c_10.png" alt=""></p><p>WebAuthn の公開鍵についてはユーザーの拡張属性に保存されている。<br>なんでか Azure AD B2C テナントは Microsoft Graph API をサポートしていない (使えるけど) ので、Azure AD Graph を叩いて確認する。</p><p>サインインしたユーザー情報を取得すると、確かに公開鍵が保存されている。</p><ul><li>Azure AD Graph Explorer<br><a href="https://graphexplorer.azurewebsites.net/#">https://graphexplorer.azurewebsites.net/#</a></li></ul><p><img src="/2019/12/06/azuread-b2c-fido2-custompolicy/extensionsvalue.png" alt=""></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は Azure AD B2C に FIDO2 を組み込むサンプルを動かしてみた。<br>XML を読み解くのは果てしなくつらい作業だったが、動いているのを見るといとおしく感じてくるから不思議である。</p><p>ここまで色々いじれ (てしまえ) る OP は中々なく、XML のつながりを辿るのは果てしなくつらい作業だが、クレームの変換や検証、Azure AD への書き込みや読み込みなど、非常にプリミティブな動作をなんとなく体験できる面白いオモチャなので、興味がある人は触ってみてほしい。</p><p>ただ、XML を弄るのは果てしなくつらい作業なので、私はしばらく見たくない。以上。</p><p>明日の Advent Calendar は <a href="https://twitter.com/@kishisuke">@kishisuke</a> の Sign In with Apple です。</p><p>そういえば、誰かが Sign In Apple も Azure AD B2C につないでましたね。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;この記事は&lt;a href=&quot;https://qiita.com/advent-calendar/2019/identity&quot;&gt;認証認可アドベントカレンダー&lt;/a&gt; の6日目の記事です。&lt;/p&gt;
&lt;p&gt;動機: やっぱ OIDC ネタと FIDO ネタが多いから、&lt;strong&gt;どっちも絡めたやつを書けばめっちゃウケるのでは？&lt;/strong&gt;&lt;br&gt;→ Azure AD B2C に WebAuthn によるパスワードレス サインインを実装するサンプルあったなあ…&lt;/p&gt;
&lt;p&gt;と、苦し紛れにネタをひねり出した結果、くっそニッチな記事になってしまった。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="OAuth" scheme="http://blog.haniyama.com/tags/OAuth/"/>
    
      <category term="FIDO2" scheme="http://blog.haniyama.com/tags/FIDO2/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Ignite 2019 メモ</title>
    <link href="http://blog.haniyama.com/2019/11/24/ms-ignite-2019/"/>
    <id>http://blog.haniyama.com/2019/11/24/ms-ignite-2019/</id>
    <published>2019-11-24T01:40:00.000Z</published>
    <updated>2022-05-18T13:45:29.097Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft Ignite 2019 が今年も開催されてましたね。</p><p>今年もセキュリティキーに関してアップデートがあったけど、ポケモン剣盾で時間とられて、余裕ないので雑にメモ。</p><p>孵化あまり、だれか交換しましょう。</p><span id="more"></span><p>去年はセキュリティキーでのサインイン含む、WebAuthn, パスワードレス系のセッションを聞いてテンション上げてましたねー。もう一年か、早いもんだ。</p><h2 id="BRK2130-Azure-Active-Directory-New-features-and-roadmap"><a href="#BRK2130-Azure-Active-Directory-New-features-and-roadmap" class="headerlink" title="BRK2130 Azure Active Directory: New features and roadmap"></a>BRK2130 Azure Active Directory: New features and roadmap</h2><p><a href="https://myignite.techcommunity.microsoft.com/sessions/81713?source=sessions">https://myignite.techcommunity.microsoft.com/sessions/81713?source=sessions</a></p><p>Azure AD の新機能のお話。</p><ul><li>SaaS アプリとの SCIM によるプロビジョニング<ul><li>Salesforce, Facebook 等へは SCIM で接続済み</li><li>なんか見てると、3rd Party の ID 管理システムから Azure AD への同期もできそうな雰囲気</li><li>SaaS &#x3D;&gt; AAD も SCIM なのかな…？</li></ul></li><li>オンプレとの同期ツール、Azure AD Cloud Provisioning<ul><li>(ググラビリティ低くない？)</li><li>軽量エージェントインストールするだけで設定はクラウド</li><li>三井住友? の 200 フォレストあるテナントで試してた？ (英語聞き取れず)</li><li>MIM とか知らないっす。</li></ul></li><li>First Worker 向け機能<ul><li>製造・小売り等の従業員向けっぽい</li><li>プロビジョニングと <strong>電話番号でのサインイン!</strong></li></ul></li><li>B2B ダイレクト フェデレーション (プレビュー))<ul><li>Google, Okta, Ping Fed や、他社の AD FS から直接ゲストユーザーがサインインできる</li><li>ドキュメントは<a href="https://docs.microsoft.com/ja-jp/azure/active-directory/b2b/direct-federation">このへん</a></li></ul></li><li>アクセスパネルのワークスペースによるグルーピング機能<ul><li>なんで今までなかったんや…</li></ul></li><li>Entitlement Management と外部ツールによる? 権限申請・承認フローのデモ</li><li>Azure AD の Availability のはなし</li><li>ハイブリッド環境への FIDO2 Security Key によるサインイン<ul><li>Hybrid Azure AD Joined 環境でセキュリティキーでのサインインできる</li><li>FY20Q1  Public Preview の予定…らしい</li></ul></li><li>条件付きアクセスのレポート オンリーモード<ul><li>条件付きアクセスの設定テストのために、サインインログに出すだけでブロックしないモード</li></ul></li></ul><p>盛りだくさんだけど、気になったのは First Worker 向けの電話番号でのサインインと、Hybrid Azure AD 環境での FIDO2 セキュリティキー。</p><p>あと SCIM 触ったことないので、どっかで触っておきたい。</p><h2 id="Eliminate-your-weakest-link-with-passwordless-authentication"><a href="#Eliminate-your-weakest-link-with-passwordless-authentication" class="headerlink" title="Eliminate your weakest link with passwordless authentication"></a>Eliminate your weakest link with passwordless authentication</h2><p><a href="https://myignite.techcommunity.microsoft.com/sessions/81716?source=sessions">https://myignite.techcommunity.microsoft.com/sessions/81716?source=sessions</a></p><p>Hybrid 環境での FIDO2 セキュリティキーのデプロイ。2020年の始めにパブリック プレビューの予定。</p><p>Azure AD Connect の最新版 + Win10 の Insider Build + ドメコンへのパッチが必要らしい。</p><p>フローはこんな感じ</p><p><img src="/2019/11/24/ms-ignite-2019/auth-flow.png"></p><ul><li>(0) Azure AD Connect で Kerberos Server keys をクラウドにもっていく</li><li>WebAuthn で認証</li><li>AAD がユーザーネームだけ入った一時的な TGT チケットを同期した秘密鍵で生成して取得</li><li>PRT と一緒に Windows 10 が受け取る</li><li>オンプレの AD に 一時的な TGT チケットを提示</li><li>オンプレ AD が完全な TGT チケットを返却</li></ul><p>これ、AD につながらないときはどんな動きするんだろう。普通に PRT 落ちてきてるから、Azure AD に対しては認証できそう。</p><p>あとは Kerberos Server keys を組織の外に同期するって、どの程度のインパクトなのかよくわからん。</p><p>そして動かんくなったときのデバッグつらそうｗ</p><p>あとは、Windows と CTAP2 の統合。</p><p><img src="/2019/11/24/ms-ignite-2019/winconf.png"></p><p><img src="/2019/11/24/ms-ignite-2019/winconffinger.png"></p><p>指紋や PIN の設定を Windows の設定から行えるようになったとのこと。デモでは失敗してたけど。</p><p>Biometrics 系の API って標準化されてるんかな。この辺最近追ってないのでわからん。</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p><img src="/2019/11/24/ms-ignite-2019/funnel.png"></p><p><img src="/2019/11/24/ms-ignite-2019/roadmap.png"></p><p>パスワードレスへ移行するための道筋的なのはこっち</p><ul><li>THR3076 Get the most out of passwordless authentication and avoid pitfalls<br><a href="https://myignite.techcommunity.microsoft.com/sessions/81735?source=sessions">https://myignite.techcommunity.microsoft.com/sessions/81735?source=sessions</a></li></ul><p>デバイスのアップデートサイクルに合わせて TPM 使えるマシンにしろとか、MSAL 使った OIDC の認証に切り替えろ見たいな話しをしていたと思う。(ちゃんと聞いてない)</p><p><img src="/2019/11/24/ms-ignite-2019/passwordlessjourney.png"></p><h2 id="BRK2261-Empower-firstline-worker-productivity-from-day-one"><a href="#BRK2261-Empower-firstline-worker-productivity-from-day-one" class="headerlink" title="BRK2261 Empower firstline worker productivity from day one"></a>BRK2261 Empower firstline worker productivity from day one</h2><p><a href="https://myignite.techcommunity.microsoft.com/sessions/81630?source=sessions">https://myignite.techcommunity.microsoft.com/sessions/81630?source=sessions</a></p><p>AAD 新機能のセッションみてちょっと気になったので。</p><p><img src="/2019/11/24/ms-ignite-2019/firstlineworker.png"></p><p>FirstLine Worker って言葉を知らなかったんだけど、小売店や製造業の、店舗従業員や作業員といった意味らしい。</p><p>そういった人たちにも、Teams やら Shift (Staff Hub の後継) を使ってもらって、仕事効率高めようという話。</p><p>MS シフト管理ツールまで持ってるんか…。Staff Hub とか聞いたことなかったわ。</p><p>は、置いといて、プロビジョニングして使い始めてもらうっていう文脈で、管理者が設定した電話番号にワンタイム パスコード送ってサインインができるという機能。<br>Y!っぽいあれですね。</p><p><img src="/2019/11/24/ms-ignite-2019/workday-provisioning.png"></p><p>HR システムからユーザーをプロビジョニングして、Teams のチャネルに自動招待。あと電話番号も登録。</p><p><img src="/2019/11/24/ms-ignite-2019/signin-with-phone-number.png"></p><p>ユーザーは自分の電話番号でサインインするだけ。</p><p>複数の組織に所属してたらどうなるんだろうとか、気になるところはあるけど、パスワード リセットのヘルプセンターの管理するよりずっといいんじゃないでしょうか。</p><p>今日はヒバニーの孵化作業があるので、ここまで。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft Ignite 2019 が今年も開催されてましたね。&lt;/p&gt;
&lt;p&gt;今年もセキュリティキーに関してアップデートがあったけど、ポケモン剣盾で時間とられて、余裕ないので雑にメモ。&lt;/p&gt;
&lt;p&gt;孵化あまり、だれか交換しましょう。&lt;/p&gt;
    
    </summary>
    
    
      <category term="雑記" scheme="http://blog.haniyama.com/tags/%E9%9B%91%E8%A8%98/"/>
    
      <category term="Azure AD" scheme="http://blog.haniyama.com/tags/Azure-AD/"/>
    
      <category term="Microsoft" scheme="http://blog.haniyama.com/tags/Microsoft/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD B2C に Yahoo! ID を連携しようとして失敗した話</title>
    <link href="http://blog.haniyama.com/2019/09/23/azuread-b2c-can-not-connect-yahooid/"/>
    <id>http://blog.haniyama.com/2019/09/23/azuread-b2c-can-not-connect-yahooid/</id>
    <published>2019-09-23T11:28:11.000Z</published>
    <updated>2022-05-18T13:45:28.994Z</updated>
    
    <content type="html"><![CDATA[<p>今日は Azure AD B2C を OIDC な IdP である Yahoo! ID とつなげてみよう、というお話。</p><h2 id="Azure-AD-B2C-とは"><a href="#Azure-AD-B2C-とは" class="headerlink" title="Azure AD B2C とは"></a>Azure AD B2C とは</h2><p>Microsoft が提供する Auth0 みたいなサービス。</p><span id="more"></span><p>アプリケーションへの認証を Google や Facebook, Twitter といったソーシャル アカウントで行うために、Azure AD B2C というテナントに、複数の IdP を連携させることができる。</p><p>具体的には B2C 側が、連携する IdP から id_token やら userinfo を引っ張ってきて、良しなにユーザーを登録・認証してくれるって感じ。<br>様々な IdP に対応していて、アプリケーション側は、Azure AD B2C から発行されるトークンだけ見てればいいので色々楽ですよ、というやつですね。タブンネ。</p><h2 id="だめでしたー"><a href="#だめでしたー" class="headerlink" title="だめでしたー"></a>だめでしたー</h2><p>タイトルにある通り、結論から言うと連携できなかった。<br>失敗した理由としては Yahoo! ID が response_mode&#x3D;query のパラメータを読み込んでくれなかった (※ B2C が response_mode を省略してくれなかった) からなのだけど、いろいろ手順も残しておきたいのでブログにまとめようと思う。</p><blockquote><p>追記: カスタム ポリシーで OAuth プロファイルで作成すればいけた。</p></blockquote><h2 id="失敗手順"><a href="#失敗手順" class="headerlink" title="失敗手順"></a>失敗手順</h2><p>細かい手順は省略しているので、各自ドキュメント等よんで調べてください。</p><h3 id="B2C-テナントを作る"><a href="#B2C-テナントを作る" class="headerlink" title="B2C テナントを作る"></a>B2C テナントを作る</h3><p>略。</p><h3 id="Yahoo-ID-を利用するアプリの登録"><a href="#Yahoo-ID-を利用するアプリの登録" class="headerlink" title="Yahoo! ID を利用するアプリの登録"></a>Yahoo! ID を利用するアプリの登録</h3><p><a href="https://developer.yahoo.co.jp/start/">ご利用ガイド - Yahoo!デベロッパーネットワーク</a> に、step by step で手順があるので、その通りにアプリを登録する。</p><p>Authorize Code Flow を動かすので、アプリケーションは “サーバーサイド（Yahoo! ID連携 v2）” を選んで、あとは適当に入力する。</p><p><img src="/2019/09/23/azuread-b2c-can-not-connect-yahooid/callback.png"></p><p>コールバック URL には、後述するが以下の 2 つを追加しておく。</p><ul><li><a href="https://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/oauth2/authresp">https://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/oauth2/authresp</a></li><li><a href="https://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/b2c_1a_trustframeworkbaseyahoo/oauth2/authresp">https://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/b2c_1a_trustframeworkbaseyahoo/oauth2/authresp</a></li></ul><p>あとは、検証用に jwt.io とか jwt.ms とか localhost とか必要であれば追加しておく。</p><h3 id="カスタム-OIDC-プロバイダーとして-Yahoo-ID-を追加する"><a href="#カスタム-OIDC-プロバイダーとして-Yahoo-ID-を追加する" class="headerlink" title="カスタム OIDC プロバイダーとして Yahoo! ID を追加する"></a>カスタム OIDC プロバイダーとして Yahoo! ID を追加する</h3><p>組み込みポリシーを利用して B2C に OIDC の IdP を追加するには、<code>Azure AD B2C</code> &gt; <code>ID プロバイダー</code> &gt; <code>新しい OpenID Connect プロバイダー</code> を選択する。</p><p>OIDC の場合メタデータ URL を指定すればほぼ完了。Yahoo! ID の場合は以下の URLとなる。</p><ul><li><a href="https://auth.login.yahoo.co.jp/yconnect/v2/.well-known/openid-configuration">https://auth.login.yahoo.co.jp/yconnect/v2/.well-known/openid-configuration</a></li></ul><p>クライアント ID とクライアント シークレットは、アプリを作ったときに払い出されたものを。スコープは<code>openid profile email</code>、<br>応答の種類は <code>code</code>、応答モードは <code>query</code>、ドメインのヒントは、アプリケーションが B2C に対して認証リクエスト投げるときに利用するものだと思うので適当で OK。</p><p>あとはクレームのマッピングを <a href="https://developer.yahoo.co.jp/yconnect/v2/userinfo.html">Yahoo! ID の UserInfo API のドキュメント</a> をみて適当に決める。</p><p><img src="/2019/09/23/azuread-b2c-can-not-connect-yahooid/custom-oidc-provider.png"></p><p>手順はこれだけで OK。</p><h3 id="ユーザーフローの作成"><a href="#ユーザーフローの作成" class="headerlink" title="ユーザーフローの作成"></a>ユーザーフローの作成</h3><p><code>ユーザー フロー</code> &gt; <code>新しいユーザー フロー</code> &gt; <code>サインアップとサインイン</code> から、新しいサインアップとサインインフローを作成し、IdP として先ほど登録した OIDC プロバイダー (Yahoo!) を選ぶ。クレームの要求は適当に設定して保存する。</p><h3 id="アプリの登録"><a href="#アプリの登録" class="headerlink" title="アプリの登録"></a>アプリの登録</h3><p>Azure AD B2C を IdP として利用するアプリの登録。略。</p><h3 id="作成したユーザー-フローのテスト"><a href="#作成したユーザー-フローのテスト" class="headerlink" title="作成したユーザー フローのテスト"></a>作成したユーザー フローのテスト</h3><p>作成したユーザー フローを選択し、<code>今すぐ実行</code> を選択する。</p><p><img src="/2019/09/23/azuread-b2c-can-not-connect-yahooid/run-flow.png"></p><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p>‘Error: invalid_request,Error Description: response_mode is invalid.’</p><p><img src="/2019/09/23/azuread-b2c-can-not-connect-yahooid/result.png"></p><p>初めに書いた通り、結論から言うと動かなかった。なぜうまく動かないのか、もう少し詳細にみてみる。</p><p>Chrome の <a href="https://chrome.google.com/webstore/detail/redirect-path/aomidfkchockcldhbkggjokdkkebmdll">Redirect Path</a> という拡張を利用して、サインイン時のリダイレクトの動きを見てみた。</p><p>B2C のサインイン ページから Yahoo! へは以下のリクエストが送られていた。</p><pre class="language-http" style="" tabindex="0"><code id="e052293e" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;e052293e&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nhttps://auth.login.yahoo.co.jp/yconnect/v2/authorization?\n  client_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026\n  redirect_uri=https%3a%2f%2fyourdomain.b2clogin.com%2fyourdomain.onmicrosoft.com%2foauth2%2fauthresp&amp;\n  response_type=code&amp;\n  scope=openid+profile+email&amp;\n  response_mode=query&amp;\n  nonce=CpKTVRSC%2fgtFG0FSaQEpIg%3d%3d&amp;\n  ui_locales=en-US&amp;\n  state=StateProperties%3deyJ....\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>https</span><span class=\&quot;token punctuation\&quot;>:</span><span class=\&quot;token header-value\&quot;>//auth.login.yahoo.co.jp/yconnect/v2/authorization?\n  client_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;amp;\n  redirect_uri=https%3a%2f%2fyourdomain.b2clogin.com%2fyourdomain.onmicrosoft.com%2foauth2%2fauthresp&amp;amp;\n  response_type=code&amp;amp;\n  scope=openid+profile+email&amp;amp;\n  response_mode=query&amp;amp;\n  nonce=CpKTVRSC%2fgtFG0FSaQEpIg%3d%3d&amp;amp;\n  ui_locales=en-US&amp;amp;\n  state=StateProperties%3deyJ....</span></span>\n&quot;}"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//auth.login.yahoo.co.jp/yconnect/v2/authorization?  client_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;  redirect_uri=https%3a%2f%2fyourdomain.b2clogin.com%2fyourdomain.onmicrosoft.com%2foauth2%2fauthresp&amp;  response_type=code&amp;  scope=openid+profile+email&amp;  response_mode=query&amp;  nonce=CpKTVRSC%2fgtFG0FSaQEpIg%3d%3d&amp;  ui_locales=en-US&amp;  state=StateProperties%3deyJ....</span></span></code></pre><p>で、Yahoo! ID はこのリクエストに対し、以下のエラーを返していた。</p><pre class="language-http" style="" tabindex="0"><code id="f843073f" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;f843073f&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nhttps://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/oauth2/authresp?\n  error=invalid_request\u0026\n  error_description=response_mode+is+invalid.&amp;\n  error_code=1227&amp;\n  state=StateProperties%3DeyJ...\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>https</span><span class=\&quot;token punctuation\&quot;>:</span><span class=\&quot;token header-value\&quot;>//yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/oauth2/authresp?\n  error=invalid_request&amp;amp;\n  error_description=response_mode+is+invalid.&amp;amp;\n  error_code=1227&amp;amp;\n  state=StateProperties%3DeyJ...</span></span>\n&quot;}"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/oauth2/authresp?  error=invalid_request&amp;  error_description=response_mode+is+invalid.&amp;  error_code=1227&amp;  state=StateProperties%3DeyJ...</span></span></code></pre><p>B2C のエンドポイントは、エラーを受け取ったらそのままアプリに返すらしく、登録していた jwt.ms に以下のようにエラーを返していた。</p><pre class="language-http" style="" tabindex="0"><code id="bf989f3d" class="language-http" data-prism-hydrate="{&quot;element&quot;:&quot;bf989f3d&quot;,&quot;language&quot;:&quot;http&quot;,&quot;code&quot;:&quot;\nhttps://jwt.ms/#\n  error=server_error\u0026\n  error_description=AADB2C90273%3a+An+invalid+response+was+received+%3a+%27Error%3a+invalid_request%2cError+Description%3a+response_mode+is+invalid.%27%0d%0aCorrelation+ID%3a+b300b4fb-c1ab-491d-86f1-4d1dc129892f%0d%0aTimestamp%3a+2019-09-23+09%3a39%3a54Z%0d%0a\n&quot;,&quot;highlightedCode&quot;:&quot;\n\u003cspan class=\&quot;token header\&quot;\u003e<span class=\&quot;token header-name keyword\&quot;>https</span><span class=\&quot;token punctuation\&quot;>:</span><span class=\&quot;token header-value\&quot;>//jwt.ms/#\n  error=server_error&amp;amp;\n  error_description=AADB2C90273%3a+An+invalid+response+was+received+%3a+%27Error%3a+invalid_request%2cError+Description%3a+response_mode+is+invalid.%27%0d%0aCorrelation+ID%3a+b300b4fb-c1ab-491d-86f1-4d1dc129892f%0d%0aTimestamp%3a+2019-09-23+09%3a39%3a54Z%0d%0a</span></span>\n&quot;}"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//jwt.ms/#  error=server_error&amp;  error_description=AADB2C90273%3a+An+invalid+response+was+received+%3a+%27Error%3a+invalid_request%2cError+Description%3a+response_mode+is+invalid.%27%0d%0aCorrelation+ID%3a+b300b4fb-c1ab-491d-86f1-4d1dc129892f%0d%0aTimestamp%3a+2019-09-23+09%3a39%3a54Z%0d%0a</span></span></code></pre><p>ということで、B2C がリクエストに投げる response_mode を指定している部分が悪そうだというのが分かる。実際、Yahoo! ID に投げる Authorize Request から response_mode を消してやるとうまく動く。</p><p>respones_mode 自体は OAuth の<a href="https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html">OAuth 2.0 Multiple Response Type Encoding Practices</a> で、AuthZ レスポンスをどこに返すかを指定するパラメータらしい。<br>@TakahikoKawasaki さんの <a href="https://qiita.com/TakahikoKawasaki/items/185d34814eb9f7ac7ef3#13-%E5%BF%9C%E7%AD%94%E3%83%A2%E3%83%BC%E3%83%89-response_mode">OAuth &amp; OpenID Connect 関連仕様まとめ - Qiita</a> が非常にわかりやすかった。</p><p>とはいえ、必須のパラメータではないので B2C のパラメータとしては消せてもいい気がするけど…。</p><h3 id="カスタムポリシーで試す"><a href="#カスタムポリシーで試す" class="headerlink" title="カスタムポリシーで試す"></a>カスタムポリシーで試す</h3><p>Azure B2C が response_mode を絶対入れてリクエストを送るのがダメなので、色々できるカスタムポリシーで試してみる。</p><p>まずは、Client Secret を ポリシー キー に <code>B2C_1A_YahooAppSecret</code> として登録する。<br>その後<a href="https://github.com/Azure-Samples/active-directory-b2c-custom-policy-starterpack">B2C Custom Policy Starterpack</a> の SocialandLocalAccounts の TrustFrameworkBase.xml の Facebook 部分を以下に入れ替える。</p><pre class="language-xml" style="" tabindex="0"><code id="d6a5423f" class="language-xml" data-prism-hydrate="{&quot;element&quot;:&quot;d6a5423f&quot;,&quot;language&quot;:&quot;xml&quot;,&quot;code&quot;:&quot;\n      \u003cClaimsProvider\u003e\n      <!-- The following Domain element allows this profile to be used if the request comes with domain_hint \n           query string parameter, e.g. domain_hint=facebook.com  -->\n      <Domain>yahoo.co.jp</Domain>\n      <DisplayName>Yahoo! Japan</DisplayName>\n      <TechnicalProfiles>\n        <TechnicalProfile Id=\&quot;Yahoo-OIDCv2\&quot;>\n          <!-- The text in the following DisplayName element is shown to the user on the claims provider \n               selection screen. -->\n          <DisplayName>Yahoo!</DisplayName>\n          <Protocol Name=\&quot;OpenIdConnect\&quot; />\n          <Metadata>\n            <Item Key=\&quot;ProviderName\&quot;>yahoo</Item>\n            <Item Key=\&quot;METADATA\&quot;>https://auth.login.yahoo.co.jp/yconnect/v2/.well-known/openid-configuration</Item>\n            <Item Key=\&quot;response_types\&quot;>code</Item>\n            <Item Key=\&quot;scope\&quot;>openid profile email</Item>\n            <!-- 消す <Item Key=\&quot;response_mode\&quot;>query</Item> -->\n            <Item Key=\&quot;HttpBinding\&quot;>GET</Item>\n            <Item Key=\&quot;client_id\&quot;>xxxxxxxxx</Item>\n          </Metadata>\n          <CryptographicKeys>\n            <Key Id=\&quot;client_secret\&quot; StorageReferenceId=\&quot;B2C_1A_YahooAppSecret\&quot; />\n          </CryptographicKeys>\n          <InputClaims />\n          <OutputClaims>\n            <OutputClaim ClaimTypeReferenceId=\&quot;identityProvider\&quot; DefaultValue=\&quot;yahoo.co.jp\&quot; />\n            <OutputClaim ClaimTypeReferenceId=\&quot;authenticationSource\&quot; DefaultValue=\&quot;socialIdpAuthentication\&quot; />\n            <OutputClaim ClaimTypeReferenceId=\&quot;issuerUserId\&quot; PartnerClaimType=\&quot;sub\&quot; />\n            <OutputClaim ClaimTypeReferenceId=\&quot;displayName\&quot; PartnerClaimType=\&quot;name\&quot; />\n            <OutputClaim ClaimTypeReferenceId=\&quot;email\&quot; />\n          </OutputClaims>\n          <OutputClaimsTransformations>\n            <OutputClaimsTransformation ReferenceId=\&quot;CreateRandomUPNUserName\&quot; />\n            <OutputClaimsTransformation ReferenceId=\&quot;CreateUserPrincipalName\&quot; />\n            <OutputClaimsTransformation ReferenceId=\&quot;CreateAlternativeSecurityId\&quot; />\n            <OutputClaimsTransformation ReferenceId=\&quot;CreateSubjectClaimFromAlternativeSecurityId\&quot; />\n          </OutputClaimsTransformations>\n          <UseTechnicalProfileForSessionManagement ReferenceId=\&quot;SM-SocialLogin\&quot; />\n        </TechnicalProfile>\n      </TechnicalProfiles>\n    </ClaimsProvider>\n&quot;,&quot;highlightedCode&quot;:&quot;\n      <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>\u0026lt;</span>ClaimsProvider</span><span class=\&quot;token punctuation\&quot;>></span></span>\n      <span class=\&quot;token comment\&quot;>&amp;lt;!-- The following Domain element allows this profile to be used if the request comes with domain_hint \n           query string parameter, e.g. domain_hint=facebook.com  --></span>\n      <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Domain</span><span class=\&quot;token punctuation\&quot;>></span></span>yahoo.co.jp<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Domain</span><span class=\&quot;token punctuation\&quot;>></span></span>\n      <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>DisplayName</span><span class=\&quot;token punctuation\&quot;>></span></span>Yahoo! Japan<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>DisplayName</span><span class=\&quot;token punctuation\&quot;>></span></span>\n      <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>TechnicalProfiles</span><span class=\&quot;token punctuation\&quot;>></span></span>\n        <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>TechnicalProfile</span> <span class=\&quot;token attr-name\&quot;>Id</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>Yahoo-OIDCv2<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token comment\&quot;>&amp;lt;!-- The text in the following DisplayName element is shown to the user on the claims provider \n               selection screen. --></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>DisplayName</span><span class=\&quot;token punctuation\&quot;>></span></span>Yahoo!<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>DisplayName</span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Protocol</span> <span class=\&quot;token attr-name\&quot;>Name</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>OpenIdConnect<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Metadata</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>ProviderName<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>yahoo<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>METADATA<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>https://auth.login.yahoo.co.jp/yconnect/v2/.well-known/openid-configuration<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>response_types<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>code<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>scope<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>openid profile email<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token comment\&quot;>&amp;lt;!-- 消す &amp;lt;Item Key=\&quot;response_mode\&quot;>query&amp;lt;/Item> --></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>HttpBinding<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>GET<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>client_id<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span>xxxxxxxxx<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Metadata</span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>CryptographicKeys</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>Key</span> <span class=\&quot;token attr-name\&quot;>Id</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>client_secret<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token attr-name\&quot;>StorageReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>B2C_1A_YahooAppSecret<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>CryptographicKeys</span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>InputClaims</span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaims</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaim</span> <span class=\&quot;token attr-name\&quot;>ClaimTypeReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>identityProvider<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token attr-name\&quot;>DefaultValue</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>yahoo.co.jp<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaim</span> <span class=\&quot;token attr-name\&quot;>ClaimTypeReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>authenticationSource<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token attr-name\&quot;>DefaultValue</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>socialIdpAuthentication<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaim</span> <span class=\&quot;token attr-name\&quot;>ClaimTypeReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>issuerUserId<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token attr-name\&quot;>PartnerClaimType</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>sub<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaim</span> <span class=\&quot;token attr-name\&quot;>ClaimTypeReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>displayName<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token attr-name\&quot;>PartnerClaimType</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>name<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaim</span> <span class=\&quot;token attr-name\&quot;>ClaimTypeReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>email<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>OutputClaims</span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaimsTransformations</span><span class=\&quot;token punctuation\&quot;>></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaimsTransformation</span> <span class=\&quot;token attr-name\&quot;>ReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>CreateRandomUPNUserName<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaimsTransformation</span> <span class=\&quot;token attr-name\&quot;>ReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>CreateUserPrincipalName<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaimsTransformation</span> <span class=\&quot;token attr-name\&quot;>ReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>CreateAlternativeSecurityId<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n            <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>OutputClaimsTransformation</span> <span class=\&quot;token attr-name\&quot;>ReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>CreateSubjectClaimFromAlternativeSecurityId<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>OutputClaimsTransformations</span><span class=\&quot;token punctuation\&quot;>></span></span>\n          <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;</span>UseTechnicalProfileForSessionManagement</span> <span class=\&quot;token attr-name\&quot;>ReferenceId</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>SM-SocialLogin<span class=\&quot;token punctuation\&quot;>\&quot;</span></span> <span class=\&quot;token punctuation\&quot;>/></span></span>\n        <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>TechnicalProfile</span><span class=\&quot;token punctuation\&quot;>></span></span>\n      <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>TechnicalProfiles</span><span class=\&quot;token punctuation\&quot;>></span></span>\n    <span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>ClaimsProvider</span><span class=\&quot;token punctuation\&quot;>></span></span>\n&quot;}">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClaimsProvider</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!-- The following Domain element allows this profile to be used if the request comes with domain_hint            query string parameter, e.g. domain_hint=facebook.com  --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Domain</span><span class="token punctuation">&gt;</span></span>yahoo.co.jp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Domain</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">&gt;</span></span>Yahoo! Japan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfiles</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TechnicalProfile</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Yahoo-OIDCv2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!-- The text in the following DisplayName element is shown to the user on the claims provider                selection screen. --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplayName</span><span class="token punctuation">&gt;</span></span>Yahoo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplayName</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Protocol</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OpenIdConnect<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Metadata</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ProviderName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>yahoo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>METADATA<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>https://auth.login.yahoo.co.jp/yconnect/v2/.well-known/openid-configuration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>response_types<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>openid profile email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 消す &lt;Item Key="response_mode"&gt;query&lt;/Item&gt; --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HttpBinding<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>GET<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>xxxxxxxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Metadata</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CryptographicKeys</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client_secret<span class="token punctuation">"</span></span> <span class="token attr-name">StorageReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B2C_1A_YahooAppSecret<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CryptographicKeys</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputClaims</span> <span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaims</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>identityProvider<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yahoo.co.jp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticationSource<span class="token punctuation">"</span></span> <span class="token attr-name">DefaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>socialIdpAuthentication<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>issuerUserId<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>displayName<span class="token punctuation">"</span></span> <span class="token attr-name">PartnerClaimType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaim</span> <span class="token attr-name">ClaimTypeReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputClaims</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaimsTransformations</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CreateRandomUPNUserName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CreateUserPrincipalName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CreateAlternativeSecurityId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputClaimsTransformation</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CreateSubjectClaimFromAlternativeSecurityId<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputClaimsTransformations</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseTechnicalProfileForSessionManagement</span> <span class="token attr-name">ReferenceId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SM-SocialLogin<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfile</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TechnicalProfiles</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClaimsProvider</span><span class="token punctuation">&gt;</span></span></code></pre><p>あと、PolicyId は <code>B2C_1A_TrustFrameworkBaseYahoo</code> に変えておく (参照してる xml も直しておく)。<br>できたら <code>TrustFrameworkBase.xml</code>, <code>TrustFrameworkExtensions.xml</code>, <code>SignUpOrSignIn.xml</code> の 3 ファイルを <code>Identity Experience Framework</code> にアップロードする。</p><p>ClaimsProvider を記述した PolicyId が、callback URL になるらしく、PolicyId が <code>trustframeworkbaseyahoo</code> だったら、以下の URL となる。</p><ul><li><a href="https://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/b2c_1a_trustframeworkbaseyahoo/oauth2/authresp">https://yourdomain.b2clogin.com/yourdomain.onmicrosoft.com/b2c_1a_trustframeworkbaseyahoo/oauth2/authresp</a></li></ul><blockquote><p>※なんか <a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/openid-connect-technical-profile">ドキュメント</a> には <a href="https://yourtenant.b2clogin.com/your-tenant.onmicrosoft.com/oauth2/authresp">https://yourtenant.b2clogin.com/your-tenant.onmicrosoft.com/oauth2/authresp</a> 使うってかいてあって実際の動作と違う…。なんだこれ？</p></blockquote><p>で、response_mode を消したり、空で設定してみたり…</p><pre class="language-xml" style="" tabindex="0"><code id="41fccf3e" class="language-xml" data-prism-hydrate="{&quot;element&quot;:&quot;41fccf3e&quot;,&quot;language&quot;:&quot;xml&quot;,&quot;code&quot;:&quot;\n\u003cItem Key=\&quot;response_mode\&quot;\u003e</Item>\n&quot;,&quot;highlightedCode&quot;:&quot;\n<span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>\u0026lt;</span>Item</span> <span class=\&quot;token attr-name\&quot;>Key</span><span class=\&quot;token attr-value\&quot;><span class=\&quot;token punctuation attr-equals\&quot;>=</span><span class=\&quot;token punctuation\&quot;>\&quot;</span>response_mode<span class=\&quot;token punctuation\&quot;>\&quot;</span></span><span class=\&quot;token punctuation\&quot;>></span></span><span class=\&quot;token tag\&quot;><span class=\&quot;token tag\&quot;><span class=\&quot;token punctuation\&quot;>&amp;lt;/</span>Item</span><span class=\&quot;token punctuation\&quot;>></span></span>\n&quot;}"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Item</span> <span class="token attr-name">Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>response_mode<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Item</span><span class="token punctuation">&gt;</span></span></code></pre><p>しかし B2C からの AuthZ リクエストから response_mode が消えることはなかった…。かなしい。<br>なお、response_mode を消したり、値を空にすると、デフォルトの <code>form_post</code> になる。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">MSさんJS苦手 &amp; SAML脳らしくて、id_token直で返して欲しいくせにfragmentは使いたくないとか言いおってな、出してきおったんや、form_postを。そんな経緯で出来たパラメーターやから、MSさんには必須かもしれん。</p>&mdash; nov matake (@nov) <a href="https://twitter.com/nov/status/1176051340339843072?ref_src=twsrc%5Etfw">September 23, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>なるほど？</p><p>ということで、現在のところ Yahoo! ID を Azure B2C と連携することは <del>できないようです。まる。</del> </p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Azure AD B2CのProtocol設定とパラメータの受付が若干クセが強いからOAuth2指定でもscopeにopenidを指定すればOpenID Connectとして動いてくれる&amp;response_mode問題も解決する</p>&mdash; Naohiro Fujie (@phr_eidentity) <a href="https://twitter.com/phr_eidentity/status/1176194980886396928?ref_src=twsrc%5Etfw">September 23, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>ということで、カスタム ポリシーならいけました。</p><script src="https://gist.github.com/watahani/6ee0ffff0f4879b760ba5ab171df7430.js"></script><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.yahoo.co.jp/yconnect/v2/">Yahoo! ID連携:v2 - Yahoo!デベロッパーネットワーク</a></li><li><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/active-directory-b2c-setup-msa-app">Microsoft アカウントでのサインアップおよびサインインを設定する - Azure Active Directory B2C | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/openid-connect-technical-profile">Azure Active Directory B2C 内のカスタム ポリシーで OpenID Connect 技術プロファイルを定義する | Microsoft Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日は Azure AD B2C を OIDC な IdP である Yahoo! ID とつなげてみよう、というお話。&lt;/p&gt;
&lt;h2 id=&quot;Azure-AD-B2C-とは&quot;&gt;&lt;a href=&quot;#Azure-AD-B2C-とは&quot; class=&quot;headerlink&quot; title=&quot;Azure AD B2C とは&quot;&gt;&lt;/a&gt;Azure AD B2C とは&lt;/h2&gt;&lt;p&gt;Microsoft が提供する Auth0 みたいなサービス。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="http://blog.haniyama.com/tags/Azure/"/>
    
      <category term="OIDC" scheme="http://blog.haniyama.com/tags/OIDC/"/>
    
  </entry>
  
  <entry>
    <title>セキュリティキーをなくしたのでリカバリ方法を実践してみる</title>
    <link href="http://blog.haniyama.com/2019/09/09/lost-securiykeys/"/>
    <id>http://blog.haniyama.com/2019/09/09/lost-securiykeys/</id>
    <published>2019-09-09T11:40:44.000Z</published>
    <updated>2022-05-18T13:45:29.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>追記: 見つかりました。</p></blockquote><p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">出てきました！ <a href="https://t.co/U9DkvPkkNF">pic.twitter.com/U9DkvPkkNF</a></p>&mdash; 82@はに (@watahani) <a href="https://twitter.com/watahani/status/1171410293634715648?ref_src=twsrc%5Etfw">September 10, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>普段使いのバッグをなくした。<del>たぶん置き引き</del> ※1。</p><p>中には検証&amp;普段使いに利用していた YubiKey もあった。てか山ほど Authenticator 入ってた。</p><p>まさか、置き引き野郎も、カバン開けたら金は一切入ってなくて、意味わからん USB 機器が山ほどはいってるとは思うまい ※1。</p><blockquote><p>※1 ランチに行った焼肉屋に置き忘れたことを忘れただけ。</p></blockquote><span id="more"></span><p><img src="https://blog.haniyama.com/2019/02/04/job-change/keys.jpg" alt=""></p><blockquote><p>これ</p></blockquote><h2 id="あらすじ"><a href="#あらすじ" class="headerlink" title="あらすじ"></a>あらすじ</h2><p>土曜日の午前中に病院に行き、薬局で薬を出してもらって、家に帰った ※2。</p><p>その時どうやらバッグを調剤薬局に忘れたらしい。<br>嫁には、小学校にランドセルしょって忘れてくるやつおるか？とあきれられたが、まさにそれをやってのけた私である。仕方がない。</p><p>さて、やっと次の日になって、カバンがないことに気づき、薬局に電話したが見つからず。<br>これを置き引きと呼んでよいかはよくわからないが、中に入ってたもろもろをロストしてしまった。</p><p>で、大量のセキュリティキーもなくしたので、各社のセキュリティキーの無効化手段について確認しておこうというのが本日の企画。</p><blockquote><p>※2 何度も言うが、ランチに行った焼肉屋に置き忘れたことを忘れただけ。</p></blockquote><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p><a href="https://myaccount.google.com/">https://myaccount.google.com/</a> から、<code>セキュリティ</code> &gt; <code>二段階認証</code> に移動。</p><p>サインインは信頼されたブラウザーからはパスワードだけで OK だった。<br>この辺は組織アカウントかどうかとかで動作が違うと思われる。</p><p><img src="/2019/09/09/lost-securiykeys/google-securitykeys.png" alt=""></p><p>信頼されたブラウザーって結構色々できるので気を付けたほうがいいなとコナミ。</p><p>ちゃんと最終使用日があるため、不正ログインされていないか確認可能だった。また、おおよその最終仕様場所もわかる。<br>編集ボタンから Revoke して完了。</p><h2 id="Microsoft-Account"><a href="#Microsoft-Account" class="headerlink" title="Microsoft Account"></a>Microsoft Account</h2><p><a href="https://account.microsoft.com">https://account.microsoft.com</a> から、<code>セキュリティ</code> に移動。</p><p>追加の認証はスマホへの通知にて。</p><p><img src="/2019/09/09/lost-securiykeys/msa-mfa.png" alt=""></p><p> <code>2 段階認証 (追加のセキュリティ オプション)</code> に移動して <code>Windows Hello とセキュリティキー</code> &gt; <code>サインイン方法の管理</code> にて一覧を確認可能。<br>MS って個人アカウントは MFA じゃなくて2段階認証やねんな。</p><p><img src="/2019/09/09/lost-securiykeys/ms-securitykeys.png" alt=""></p><p>最終利用日が分かる。削除ボタン押して revoke 完了。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/settings/">https://github.com/settings/</a> から <code>Security</code> &gt; <code>Two-factor authentication</code> &gt; <code>Security keys</code> にアクセス。</p><p><img src="/2019/09/09/lost-securiykeys/github-settings.png" alt=""></p><p>家にある YubiKey を登録してあったので、サインイン セッション + 追加の認証 YubiKey タッチでアクセスできた。<br>セキュリティキーまったくない場合は Authenticator アプリかリカバリコードでサインインかな。</p><p>もしかすると信頼された端末からはパスワードだけで入れるかもしれないけど未確認。</p><p><img src="/2019/09/09/lost-securiykeys/github-securitykeys.png" alt=""></p><p>ゴミ箱アイコンで削除…した後の画面です。<br>というのも、他のアカウントに比べてサインインした際の通知が来ないイメージだったので、なんとなく一番不安に感じたから、GitHub のキーを真っ先にめに無効化したんです。</p><h2 id="Facebook"><a href="#Facebook" class="headerlink" title="Facebook"></a>Facebook</h2><p><a href="https://www.facebook.com/settings">https://www.facebook.com/settings</a> から、<code>セキュリティとログイン</code> &gt; <code>二段階認証を使用</code></p><p>追加の確認はパスワードだった。これも信頼されたブラウザーとして保存しているからかな。</p><p><img src="/2019/09/09/lost-securiykeys/facebook-confirm.png" alt=""></p><p><code>セキュリティキー</code> から登録しているキーを削除…と思ったけど、いつ登録したかわからんやーつしかなかったので全部削除して手元のキーを登録しておく。</p><p><img src="/2019/09/09/lost-securiykeys/facebook-securitykeys.png" alt=""></p><h2 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h2><p><a href="https://twitter.com/settings/account">https://twitter.com/settings/account</a> にアクセス。</p><p>ログインは Authenticator アプリで。Chrome でプロファイル切り替えて使ってると、なぜか Twitter の認証が切れてしまうので最近はずっと Authenticator アプリ使ってた。</p><p><code>Security</code> &gt; <code>Two-factor authentication</code> から Security Key のチェックを外すだけ。</p><p><img src="/2019/09/09/lost-securiykeys/twitter-securitykey.png" alt=""></p><p>ついでに手元のキーを登録しておくけど、相変わらず一本しか登録できないし名前も付けれないのできっとまた忘れる。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>と、いうことで、限られたサンプルではあるがセキュリティキーをなくした場合のリカバリ手順でした。</p><p>Google と Facebook は信頼された端末からの設定であればパスワードのみでリカバリ可能だけど、Microsoft アカウントは、Authenticator アプリでの追加認証が必要だった。Twitter は最近常にセッション切れてるのでよくわからず。</p><p>もしかすると Microsoft アカウントについても信頼された端末にしてれば動作違うかもなのであくまで参考程度に。</p><p>で、やっぱ最終使用日時と、サインイン時の通知が来るのは機能として良い。</p><p>一番の問題は、なくしたキーを買うための予算が通るかである。あと、尼で買うと、前職にこいつキーなくしたなってバレる可能性があるのがつらい。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;追記: 見つかりました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;出てきました！ &lt;a href=&quot;https://t.co/U9DkvPkkNF&quot;&gt;pic.twitter.com/U9DkvPkkNF&lt;/a&gt;&lt;/p&gt;&amp;mdash; 82@はに (@watahani) &lt;a href=&quot;https://twitter.com/watahani/status/1171410293634715648?ref_src=twsrc%5Etfw&quot;&gt;September 10, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;普段使いのバッグをなくした。&lt;del&gt;たぶん置き引き&lt;/del&gt; ※1。&lt;/p&gt;
&lt;p&gt;中には検証&amp;amp;普段使いに利用していた YubiKey もあった。てか山ほど Authenticator 入ってた。&lt;/p&gt;
&lt;p&gt;まさか、置き引き野郎も、カバン開けたら金は一切入ってなくて、意味わからん USB 機器が山ほどはいってるとは思うまい ※1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※1 ランチに行った焼肉屋に置き忘れたことを忘れただけ。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="YubiKey" scheme="http://blog.haniyama.com/tags/YubiKey/"/>
    
      <category term="Account Recovery" scheme="http://blog.haniyama.com/tags/Account-Recovery/"/>
    
  </entry>
  
</feed>
